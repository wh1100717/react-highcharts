/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(1);
	var Highcharts = __webpack_require__(157);

	var highcharts_config = {
	    xAxis: {
	        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
	    },

	    series: [{
	        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]
	    }]
	};

	var data = [
	    [1219622400000,24.65],
	    [1219708800000,24.81],
	    [1219795200000,24.95],
	    [1219881600000,24.82],
	    [1219968000000,24.22],
	    [1220313600000,23.74],
	    [1220400000000,23.85],
	    [1220486400000,23.03],
	    [1220572800000,22.88],
	    [1220832000000,22.56],
	    [1220918400000,21.67],
	    [1221004800000,21.66],
	    [1221091200000,21.81],
	    [1221177600000,21.28],
	    [1221436800000,20.05],
	    [1221523200000,19.98],
	    [1221609600000,18.26],
	    [1221696000000,19.16],
	    [1221782400000,20.13],
	    [1222041600000,18.72],
	    [1222128000000,18.12],
	    [1222214400000,18.39],
	    [1222300800000,18.85],
	    [1222387200000,18.32],
	    [1222646400000,15.04],
	    [1222732800000,16.24],
	    [1222819200000,15.59],
	    [1222905600000,14.30],
	    [1222992000000,13.87],
	    [1223251200000,14.02],
	    [1223337600000,12.74],
	    [1223424000000,12.83],
	    [1223510400000,12.68],
	    [1223596800000,13.80],
	    [1223856000000,15.75],
	    [1223942400000,14.87],
	    [1224028800000,13.99],
	    [1224115200000,14.56],
	    [1224201600000,13.91],
	    [1224460800000,14.06],
	    [1224547200000,13.07],
	    [1224633600000,13.84],
	    [1224720000000,14.03],
	    [1224806400000,13.77],
	    [1225065600000,13.16],
	    [1225152000000,14.27],
	    [1225238400000,14.94],
	    [1225324800000,15.86],
	    [1225411200000,15.37],
	    [1225670400000,15.28],
	    [1225756800000,15.86],
	    [1225843200000,14.76],
	    [1225929600000,14.16],
	    [1226016000000,14.03],
	    [1226275200000,13.70],
	    [1226361600000,13.54],
	    [1226448000000,12.87],
	    [1226534400000,13.78],
	    [1226620800000,12.89],
	    [1226880000000,12.59],
	    [1226966400000,12.84],
	    [1227052800000,12.33],
	    [1227139200000,11.50],
	    [1227225600000,11.80],
	    [1227484800000,13.28],
	    [1227571200000,12.97],
	    [1227657600000,13.57],
	    [1227830400000,13.24],
	    [1228089600000,12.70],
	    [1228176000000,13.21],
	    [1228262400000,13.70],
	    [1228348800000,13.06],
	    [1228435200000,13.43],
	    [1228694400000,14.25],
	    [1228780800000,14.29],
	    [1228867200000,14.03],
	    [1228953600000,13.57],
	    [1229040000000,14.04],
	    [1229299200000,13.54],
	    [1229385600000,13.63],
	    [1229472000000,12.74],
	    [1229558400000,12.78],
	    [1229644800000,12.86],
	    [1229904000000,12.25],
	    [1229990400000,12.34],
	    [1230076800000,12.15],
	    [1230249600000,12.26],
	    [1230508800000,12.37],
	    [1230595200000,12.33],
	    [1230681600000,12.19],
	    [1230854400000,12.96],
	    [1231113600000,13.51],
	    [1231200000000,13.29],
	    [1231286400000,13.00],
	    [1231372800000,13.24],
	    [1231459200000,12.94],
	    [1231718400000,12.67],
	    [1231804800000,12.53],
	    [1231891200000,12.19],
	    [1231977600000,11.91],
	    [1232064000000,11.76],
	    [1232409600000,11.17],
	    [1232496000000,11.83],
	    [1232582400000,12.62],
	    [1232668800000,12.62],
	    [1232928000000,12.81],
	    [1233014400000,12.96],
	    [1233100800000,13.46],
	    [1233187200000,13.29],
	    [1233273600000,12.88],
	    [1233532800000,13.07],
	    [1233619200000,13.28],
	    [1233705600000,13.36],
	    [1233792000000,13.78],
	    [1233878400000,14.25],
	    [1234137600000,14.64],
	    [1234224000000,13.98],
	    [1234310400000,13.83],
	    [1234396800000,14.18],
	    [1234483200000,14.17],
	    [1234828800000,13.50],
	    [1234915200000,13.48],
	    [1235001600000,12.95],
	    [1235088000000,13.00],
	    [1235347200000,12.42],
	    [1235433600000,12.89],
	    [1235520000000,13.02],
	    [1235606400000,12.74],
	    [1235692800000,12.76],
	    [1235952000000,12.56],
	    [1236038400000,12.62],
	    [1236124800000,13.02],
	    [1236211200000,12.69],
	    [1236297600000,12.19],
	    [1236556800000,11.87],
	    [1236643200000,12.66],
	    [1236729600000,13.24],
	    [1236816000000,13.76],
	    [1236902400000,13.70],
	    [1237161600000,13.63],
	    [1237248000000,14.24],
	    [1237334400000,14.50],
	    [1237420800000,14.52],
	    [1237507200000,14.51],
	    [1237766400000,15.38],
	    [1237852800000,15.21],
	    [1237939200000,15.21],
	    [1238025600000,15.70],
	    [1238112000000,15.26],
	    [1238371200000,14.93],
	    [1238457600000,15.02],
	    [1238544000000,15.53],
	    [1238630400000,16.10],
	    [1238716800000,16.57],
	    [1238976000000,16.92],
	    [1239062400000,16.43],
	    [1239148800000,16.62],
	    [1239235200000,17.08],
	    [1239580800000,17.17],
	    [1239667200000,16.90],
	    [1239753600000,16.81],
	    [1239840000000,17.35],
	    [1239926400000,17.63],
	    [1240185600000,17.21],
	    [1240272000000,17.39],
	    [1240358400000,17.36],
	    [1240444800000,17.91],
	    [1240531200000,17.70],
	    [1240790400000,17.82],
	    [1240876800000,17.70],
	    [1240963200000,17.88],
	    [1241049600000,17.98],
	    [1241136000000,18.18],
	    [1241395200000,18.87],
	    [1241481600000,18.96],
	    [1241568000000,18.93],
	    [1241654400000,18.44],
	    [1241740800000,18.46],
	    [1242000000000,18.51],
	    [1242086400000,17.77],
	    [1242172800000,17.07],
	    [1242259200000,17.56],
	    [1242345600000,17.49],
	    [1242604800000,18.09],
	    [1242691200000,18.21],
	    [1242777600000,17.98],
	    [1242864000000,17.74],
	    [1242950400000,17.50],
	    [1243296000000,18.68],
	    [1243382400000,19.01],
	    [1243468800000,19.30],
	    [1243555200000,19.40],
	    [1243814400000,19.91],
	    [1243900800000,19.93],
	    [1243987200000,20.14],
	    [1244073600000,20.53],
	    [1244160000000,20.67],
	    [1244419200000,20.55],
	    [1244505600000,20.39],
	    [1244592000000,20.04],
	    [1244678400000,19.99],
	    [1244764800000,19.57],
	    [1245024000000,19.44],
	    [1245110400000,19.48],
	    [1245196800000,19.37],
	    [1245283200000,19.41],
	    [1245369600000,19.93],
	    [1245628800000,19.62],
	    [1245715200000,19.14],
	    [1245801600000,19.46],
	    [1245888000000,19.98],
	    [1245974400000,20.35],
	    [1246233600000,20.28],
	    [1246320000000,20.35],
	    [1246406400000,20.40],
	    [1246492800000,20.00],
	    [1246838400000,19.80],
	    [1246924800000,19.34],
	    [1247011200000,19.60],
	    [1247097600000,19.48],
	    [1247184000000,19.79],
	    [1247443200000,20.33],
	    [1247529600000,20.32],
	    [1247616000000,20.98],
	    [1247702400000,21.07],
	    [1247788800000,21.68],
	    [1248048000000,21.84],
	    [1248134400000,21.64],
	    [1248220800000,22.39],
	    [1248307200000,22.55],
	    [1248393600000,22.86],
	    [1248652800000,22.87],
	    [1248739200000,22.86],
	    [1248825600000,22.86],
	    [1248912000000,23.26],
	    [1248998400000,23.34],
	    [1249257600000,23.78],
	    [1249344000000,23.65],
	    [1249430400000,23.59],
	    [1249516800000,23.42],
	    [1249603200000,23.64],
	    [1249862400000,23.53],
	    [1249948800000,23.26],
	    [1250035200000,23.62],
	    [1250121600000,24.06],
	    [1250208000000,23.83],
	    [1250467200000,22.80],
	    [1250553600000,23.43],
	    [1250640000000,23.51],
	    [1250726400000,23.76],
	    [1250812800000,24.17],
	    [1251072000000,24.15],
	    [1251158400000,24.20],
	    [1251244800000,23.92],
	    [1251331200000,24.21],
	    [1251417600000,24.29],
	    [1251676800000,24.03],
	    [1251763200000,23.61],
	    [1251849600000,23.60],
	    [1251936000000,23.79],
	    [1252022400000,24.33],
	    [1252368000000,24.70],
	    [1252454400000,24.45],
	    [1252540800000,24.65],
	    [1252627200000,24.59],
	    [1252886400000,24.82],
	    [1252972800000,25.02],
	    [1253059200000,25.98],
	    [1253145600000,26.36],
	    [1253232000000,26.43],
	    [1253491200000,26.29],
	    [1253577600000,26.35],
	    [1253664000000,26.50],
	    [1253750400000,26.26],
	    [1253836800000,26.05],
	    [1254096000000,26.59],
	    [1254182400000,26.48],
	    [1254268800000,26.48],
	    [1254355200000,25.84],
	    [1254441600000,26.41],
	    [1254700800000,26.57],
	    [1254787200000,27.14],
	    [1254873600000,27.18],
	    [1254960000000,27.04],
	    [1255046400000,27.21],
	    [1255305600000,27.26],
	    [1255392000000,27.15],
	    [1255478400000,27.33],
	    [1255564800000,27.22],
	    [1255651200000,26.86],
	    [1255910400000,27.12],
	    [1255996800000,28.39],
	    [1256083200000,29.27],
	    [1256169600000,29.31],
	    [1256256000000,29.13],
	    [1256515200000,28.93],
	    [1256601600000,28.20],
	    [1256688000000,27.49],
	    [1256774400000,28.05],
	    [1256860800000,26.93],
	    [1257120000000,27.04],
	    [1257206400000,26.96],
	    [1257292800000,27.26],
	    [1257379200000,27.72],
	    [1257465600000,27.76],
	    [1257724800000,28.78],
	    [1257811200000,29.00],
	    [1257897600000,29.04],
	    [1257984000000,28.86],
	    [1258070400000,29.21],
	    [1258329600000,29.52],
	    [1258416000000,29.57],
	    [1258502400000,29.42],
	    [1258588800000,28.64],
	    [1258675200000,28.56],
	    [1258934400000,29.41],
	    [1259020800000,29.21],
	    [1259107200000,29.17],
	    [1259280000000,28.66],
	    [1259539200000,28.56],
	    [1259625600000,28.14],
	    [1259712000000,28.03],
	    [1259798400000,28.07],
	    [1259884800000,27.62],
	    [1260144000000,26.99],
	    [1260230400000,27.12],
	    [1260316800000,28.26],
	    [1260403200000,28.06],
	    [1260489600000,27.81],
	    [1260748800000,28.14],
	    [1260835200000,27.74],
	    [1260921600000,27.86],
	    [1261008000000,27.41],
	    [1261094400000,27.92],
	    [1261353600000,28.32],
	    [1261440000000,28.62],
	    [1261526400000,28.87],
	    [1261612800000,29.86],
	    [1261958400000,30.23],
	    [1262044800000,29.87],
	    [1262131200000,30.23],
	    [1262217600000,30.10],
	    [1262563200000,30.57],
	    [1262649600000,30.63],
	    [1262736000000,30.14],
	    [1262822400000,30.08],
	    [1262908800000,30.28],
	    [1263168000000,30.02],
	    [1263254400000,29.67],
	    [1263340800000,30.09],
	    [1263427200000,29.92],
	    [1263513600000,29.42],
	    [1263859200000,30.72],
	    [1263945600000,30.25],
	    [1264032000000,29.72],
	    [1264118400000,28.25],
	    [1264377600000,29.01],
	    [1264464000000,29.42],
	    [1264550400000,29.70],
	    [1264636800000,28.47],
	    [1264723200000,27.44],
	    [1264982400000,27.82],
	    [1265068800000,27.98],
	    [1265155200000,28.46],
	    [1265241600000,27.44],
	    [1265328000000,27.92],
	    [1265587200000,27.73],
	    [1265673600000,28.03],
	    [1265760000000,27.87],
	    [1265846400000,28.38],
	    [1265932800000,28.63],
	    [1266278400000,29.06],
	    [1266364800000,28.94],
	    [1266451200000,28.99],
	    [1266537600000,28.81],
	    [1266796800000,28.63],
	    [1266883200000,28.15],
	    [1266969600000,28.66],
	    [1267056000000,28.86],
	    [1267142400000,29.23],
	    [1267401600000,29.86],
	    [1267488000000,29.84],
	    [1267574400000,29.90],
	    [1267660800000,30.10],
	    [1267747200000,31.28],
	    [1268006400000,31.30],
	    [1268092800000,31.86],
	    [1268179200000,32.12],
	    [1268265600000,32.21],
	    [1268352000000,32.37],
	    [1268611200000,31.98],
	    [1268697600000,32.06],
	    [1268784000000,32.02],
	    [1268870400000,32.09],
	    [1268956800000,31.75],
	    [1269216000000,32.11],
	    [1269302400000,32.62],
	    [1269388800000,32.77],
	    [1269475200000,32.38],
	    [1269561600000,32.99],
	    [1269820800000,33.20],
	    [1269907200000,33.69],
	    [1269993600000,33.57],
	    [1270425600000,34.07],
	    [1270512000000,34.22],
	    [1270598400000,34.37],
	    [1270684800000,34.28],
	    [1270771200000,34.54],
	    [1271030400000,34.61],
	    [1271116800000,34.63],
	    [1271203200000,35.10],
	    [1271289600000,35.56],
	    [1271376000000,35.34],
	    [1271635200000,35.30],
	    [1271721600000,34.94],
	    [1271808000000,37.03],
	    [1271894400000,38.07],
	    [1271980800000,38.69],
	    [1272240000000,38.50],
	    [1272326400000,37.43],
	    [1272412800000,37.37],
	    [1272499200000,38.38],
	    [1272585600000,37.30],
	    [1272844800000,38.05],
	    [1272931200000,36.95],
	    [1273017600000,36.57],
	    [1273104000000,35.18],
	    [1273190400000,33.69],
	    [1273449600000,36.28],
	    [1273536000000,36.65],
	    [1273622400000,37.44],
	    [1273708800000,36.91],
	    [1273795200000,36.26],
	    [1274054400000,36.32],
	    [1274140800000,36.05],
	    [1274227200000,35.48],
	    [1274313600000,33.97],
	    [1274400000000,34.62],
	    [1274659200000,35.25],
	    [1274745600000,35.03],
	    [1274832000000,34.87],
	    [1274918400000,36.19],
	    [1275004800000,36.70],
	    [1275350400000,37.26],
	    [1275436800000,37.71],
	    [1275523200000,37.59],
	    [1275609600000,36.57],
	    [1275868800000,35.85],
	    [1275955200000,35.62],
	    [1276041600000,34.74],
	    [1276128000000,35.79],
	    [1276214400000,36.22],
	    [1276473600000,36.33],
	    [1276560000000,37.10],
	    [1276646400000,38.18],
	    [1276732800000,38.84],
	    [1276819200000,39.15],
	    [1277078400000,38.60],
	    [1277164800000,39.12],
	    [1277251200000,38.71],
	    [1277337600000,38.43],
	    [1277424000000,38.10],
	    [1277683200000,38.33],
	    [1277769600000,36.60],
	    [1277856000000,35.93],
	    [1277942400000,35.50],
	    [1278028800000,35.28],
	    [1278374400000,35.52],
	    [1278460800000,36.95],
	    [1278547200000,36.87],
	    [1278633600000,37.09],
	    [1278892800000,36.76],
	    [1278979200000,35.97],
	    [1279065600000,36.10],
	    [1279152000000,35.92],
	    [1279238400000,35.70],
	    [1279497600000,35.08],
	    [1279584000000,35.98],
	    [1279670400000,36.32],
	    [1279756800000,37.00],
	    [1279843200000,37.13],
	    [1280102400000,37.04],
	    [1280188800000,37.73],
	    [1280275200000,37.28],
	    [1280361600000,36.87],
	    [1280448000000,36.75],
	    [1280707200000,37.41],
	    [1280793600000,37.42],
	    [1280880000000,37.57],
	    [1280966400000,37.39],
	    [1281052800000,37.16],
	    [1281312000000,37.39],
	    [1281398400000,37.06],
	    [1281484800000,35.74],
	    [1281571200000,35.97],
	    [1281657600000,35.59],
	    [1281916800000,35.38],
	    [1282003200000,36.00],
	    [1282089600000,36.15],
	    [1282176000000,35.70],
	    [1282262400000,35.66],
	    [1282521600000,35.11],
	    [1282608000000,34.28],
	    [1282694400000,34.70],
	    [1282780800000,34.33],
	    [1282867200000,34.52],
	    [1283126400000,34.64],
	    [1283212800000,34.73],
	    [1283299200000,35.76],
	    [1283385600000,36.02],
	    [1283472000000,36.97],
	    [1283817600000,36.83],
	    [1283904000000,37.56],
	    [1283990400000,37.58],
	    [1284076800000,37.63],
	    [1284336000000,38.15],
	    [1284422400000,38.29],
	    [1284508800000,38.60],
	    [1284595200000,39.51],
	    [1284681600000,39.34],
	    [1284940800000,40.46],
	    [1285027200000,40.54],
	    [1285113600000,41.11],
	    [1285200000000,41.27],
	    [1285286400000,41.76],
	    [1285545600000,41.60],
	    [1285632000000,40.98],
	    [1285718400000,41.05],
	    [1285804800000,40.54],
	    [1285891200000,40.36],
	    [1286150400000,39.81],
	    [1286236800000,41.28],
	    [1286323200000,41.31],
	    [1286409600000,41.32],
	    [1286496000000,42.01],
	    [1286755200000,42.19],
	    [1286841600000,42.65],
	    [1286928000000,42.88],
	    [1287014400000,43.19],
	    [1287100800000,44.96],
	    [1287360000000,45.43],
	    [1287446400000,44.21],
	    [1287532800000,44.36],
	    [1287619200000,44.22],
	    [1287705600000,43.92],
	    [1287964800000,44.12],
	    [1288051200000,44.01],
	    [1288137600000,43.98],
	    [1288224000000,43.61],
	    [1288310400000,43.00],
	    [1288569600000,43.45],
	    [1288656000000,44.19],
	    [1288742400000,44.69],
	    [1288828800000,45.47],
	    [1288915200000,45.30],
	    [1289174400000,45.52],
	    [1289260800000,45.15],
	    [1289347200000,45.43],
	    [1289433600000,45.24],
	    [1289520000000,44.00],
	    [1289779200000,43.86],
	    [1289865600000,43.08],
	    [1289952000000,42.93],
	    [1290038400000,44.06],
	    [1290124800000,43.82],
	    [1290384000000,44.77],
	    [1290470400000,44.10],
	    [1290556800000,44.97],
	    [1290729600000,45.00],
	    [1290988800000,45.27],
	    [1291075200000,44.45],
	    [1291161600000,45.20],
	    [1291248000000,45.45],
	    [1291334400000,45.35],
	    [1291593600000,45.74],
	    [1291680000000,45.46],
	    [1291766400000,45.86],
	    [1291852800000,45.68],
	    [1291939200000,45.79],
	    [1292198400000,45.95],
	    [1292284800000,45.76],
	    [1292371200000,45.77],
	    [1292457600000,45.89],
	    [1292544000000,45.80],
	    [1292803200000,46.03],
	    [1292889600000,46.32],
	    [1292976000000,46.45],
	    [1293062400000,46.23],
	    [1293408000000,46.38],
	    [1293494400000,46.50],
	    [1293580800000,46.47],
	    [1293667200000,46.24],
	    [1293753600000,46.08],
	    [1294012800000,47.08],
	    [1294099200000,47.33],
	    [1294185600000,47.71],
	    [1294272000000,47.68],
	    [1294358400000,48.02],
	    [1294617600000,48.92],
	    [1294704000000,48.81],
	    [1294790400000,49.20],
	    [1294876800000,49.38],
	    [1294963200000,49.78],
	    [1295308800000,48.66],
	    [1295395200000,48.41],
	    [1295481600000,47.53],
	    [1295568000000,46.67],
	    [1295827200000,48.21],
	    [1295913600000,48.77],
	    [1296000000000,49.12],
	    [1296086400000,49.03],
	    [1296172800000,48.01],
	    [1296432000000,48.47],
	    [1296518400000,49.29],
	    [1296604800000,49.19],
	    [1296691200000,49.06],
	    [1296777600000,49.50],
	    [1297036800000,50.27],
	    [1297123200000,50.74],
	    [1297209600000,51.17],
	    [1297296000000,50.65],
	    [1297382400000,50.98],
	    [1297641600000,51.31],
	    [1297728000000,51.41],
	    [1297814400000,51.88],
	    [1297900800000,51.19],
	    [1297987200000,50.08],
	    [1298332800000,48.37],
	    [1298419200000,48.95],
	    [1298505600000,48.98],
	    [1298592000000,49.74],
	    [1298851200000,50.46],
	    [1298937600000,49.90],
	    [1299024000000,50.30],
	    [1299110400000,51.37],
	    [1299196800000,51.43],
	    [1299456000000,50.77],
	    [1299542400000,50.82],
	    [1299628800000,50.35],
	    [1299715200000,49.52],
	    [1299801600000,50.28],
	    [1300060800000,50.51],
	    [1300147200000,49.35],
	    [1300233600000,47.14],
	    [1300320000000,47.81],
	    [1300406400000,47.24],
	    [1300665600000,48.47],
	    [1300752000000,48.74],
	    [1300838400000,48.46],
	    [1300924800000,49.28],
	    [1301011200000,50.22],
	    [1301270400000,50.06],
	    [1301356800000,50.14],
	    [1301443200000,49.80],
	    [1301529600000,49.79],
	    [1301616000000,49.22],
	    [1301875200000,48.74],
	    [1301961600000,48.41],
	    [1302048000000,48.29],
	    [1302134400000,48.30],
	    [1302220800000,47.87],
	    [1302480000000,47.26],
	    [1302566400000,47.49],
	    [1302652800000,48.02],
	    [1302739200000,47.49],
	    [1302825600000,46.78],
	    [1303084800000,47.41],
	    [1303171200000,48.27],
	    [1303257600000,48.92],
	    [1303344000000,50.10],
	    [1303689600000,50.43],
	    [1303776000000,50.06],
	    [1303862400000,50.02],
	    [1303948800000,49.54],
	    [1304035200000,50.02],
	    [1304294400000,49.47],
	    [1304380800000,49.74],
	    [1304467200000,49.94],
	    [1304553600000,49.54],
	    [1304640000000,49.52],
	    [1304899200000,49.66],
	    [1304985600000,49.92],
	    [1305072000000,49.60],
	    [1305158400000,49.51],
	    [1305244800000,48.64],
	    [1305504000000,47.61],
	    [1305590400000,48.02],
	    [1305676800000,48.55],
	    [1305763200000,48.65],
	    [1305849600000,47.89],
	    [1306108800000,47.77],
	    [1306195200000,47.46],
	    [1306281600000,48.11],
	    [1306368000000,47.86],
	    [1306454400000,48.20],
	    [1306800000000,49.69],
	    [1306886400000,49.36],
	    [1306972800000,49.44],
	    [1307059200000,49.06],
	    [1307318400000,48.29],
	    [1307404800000,47.43],
	    [1307491200000,47.46],
	    [1307577600000,47.36],
	    [1307664000000,46.56],
	    [1307923200000,46.66],
	    [1308009600000,47.49],
	    [1308096000000,46.68],
	    [1308182400000,46.45],
	    [1308268800000,45.75],
	    [1308528000000,45.05],
	    [1308614400000,46.47],
	    [1308700800000,46.09],
	    [1308787200000,47.32],
	    [1308873600000,46.62],
	    [1309132800000,47.43],
	    [1309219200000,47.89],
	    [1309305600000,47.72],
	    [1309392000000,47.95],
	    [1309478400000,49.04],
	    [1309824000000,49.92],
	    [1309910400000,50.25],
	    [1309996800000,51.03],
	    [1310083200000,51.39],
	    [1310342400000,50.57],
	    [1310428800000,50.54],
	    [1310515200000,51.15],
	    [1310601600000,51.11],
	    [1310688000000,52.13],
	    [1310947200000,53.40],
	    [1311033600000,53.84],
	    [1311120000000,55.27],
	    [1311206400000,55.33],
	    [1311292800000,56.19],
	    [1311552000000,56.93],
	    [1311638400000,57.63],
	    [1311724800000,56.08],
	    [1311811200000,55.97],
	    [1311897600000,55.78],
	    [1312156800000,56.68],
	    [1312243200000,55.46],
	    [1312329600000,56.08],
	    [1312416000000,53.91],
	    [1312502400000,53.37],
	    [1312761600000,50.46],
	    [1312848000000,53.43],
	    [1312934400000,51.96],
	    [1313020800000,53.39],
	    [1313107200000,53.86],
	    [1313366400000,54.77],
	    [1313452800000,54.35],
	    [1313539200000,54.35],
	    [1313625600000,52.29],
	    [1313712000000,50.86],
	    [1313971200000,50.92],
	    [1314057600000,53.37],
	    [1314144000000,53.74],
	    [1314230400000,53.39],
	    [1314316800000,54.80],
	    [1314576000000,55.71],
	    [1314662400000,55.71],
	    [1314748800000,54.98],
	    [1314835200000,54.43],
	    [1314921600000,53.44],
	    [1315267200000,54.25],
	    [1315353600000,54.85],
	    [1315440000000,54.88],
	    [1315526400000,53.93],
	    [1315785600000,54.28],
	    [1315872000000,54.95],
	    [1315958400000,55.61],
	    [1316044800000,56.14],
	    [1316131200000,57.21],
	    [1316390400000,58.80],
	    [1316476800000,59.06],
	    [1316563200000,58.88],
	    [1316649600000,57.40],
	    [1316736000000,57.76],
	    [1316995200000,57.60],
	    [1317081600000,57.04],
	    [1317168000000,56.72],
	    [1317254400000,55.80],
	    [1317340800000,54.47],
	    [1317600000000,53.51],
	    [1317686400000,53.21],
	    [1317772800000,54.04],
	    [1317859200000,53.91],
	    [1317945600000,52.83],
	    [1318204800000,55.54],
	    [1318291200000,57.18],
	    [1318377600000,57.46],
	    [1318464000000,58.35],
	    [1318550400000,60.29],
	    [1318809600000,60.00],
	    [1318896000000,60.32],
	    [1318982400000,56.95],
	    [1319068800000,56.47],
	    [1319155200000,56.12],
	    [1319414400000,57.97],
	    [1319500800000,56.82],
	    [1319587200000,57.23],
	    [1319673600000,57.81],
	    [1319760000000,57.85],
	    [1320019200000,57.83],
	    [1320105600000,56.64],
	    [1320192000000,56.77],
	    [1320278400000,57.58],
	    [1320364800000,57.18],
	    [1320624000000,57.10],
	    [1320710400000,58.03],
	    [1320796800000,56.47],
	    [1320883200000,55.03],
	    [1320969600000,54.95],
	    [1321228800000,54.18],
	    [1321315200000,55.55],
	    [1321401600000,54.97],
	    [1321488000000,53.92],
	    [1321574400000,53.56],
	    [1321833600000,52.72],
	    [1321920000000,53.79],
	    [1322006400000,52.43],
	    [1322179200000,51.94],
	    [1322438400000,53.73],
	    [1322524800000,53.31],
	    [1322611200000,54.60],
	    [1322697600000,55.42],
	    [1322784000000,55.67],
	    [1323043200000,56.14],
	    [1323129600000,55.85],
	    [1323216000000,55.58],
	    [1323302400000,55.81],
	    [1323388800000,56.23],
	    [1323648000000,55.98],
	    [1323734400000,55.54],
	    [1323820800000,54.31],
	    [1323907200000,54.13],
	    [1323993600000,54.43],
	    [1324252800000,54.60],
	    [1324339200000,56.56],
	    [1324425600000,56.64],
	    [1324512000000,56.94],
	    [1324598400000,57.62],
	    [1324944000000,58.08],
	    [1325030400000,57.52],
	    [1325116800000,57.87],
	    [1325203200000,57.86],
	    [1325548800000,58.75],
	    [1325635200000,59.06],
	    [1325721600000,59.72],
	    [1325808000000,60.34],
	    [1326067200000,60.25],
	    [1326153600000,60.46],
	    [1326240000000,60.36],
	    [1326326400000,60.20],
	    [1326412800000,59.97],
	    [1326758400000,60.67],
	    [1326844800000,61.30],
	    [1326931200000,61.11],
	    [1327017600000,60.04],
	    [1327276800000,61.06],
	    [1327363200000,60.06],
	    [1327449600000,63.81],
	    [1327536000000,63.52],
	    [1327622400000,63.90],
	    [1327881600000,64.72],
	    [1327968000000,65.21],
	    [1328054400000,65.17],
	    [1328140800000,65.02],
	    [1328227200000,65.67],
	    [1328486400000,66.28],
	    [1328572800000,66.98],
	    [1328659200000,68.10],
	    [1328745600000,70.45],
	    [1328832000000,70.49],
	    [1329091200000,71.80],
	    [1329177600000,72.78],
	    [1329264000000,71.10],
	    [1329350400000,71.74],
	    [1329436800000,71.73],
	    [1329782400000,73.55],
	    [1329868800000,73.29],
	    [1329955200000,73.77],
	    [1330041600000,74.63],
	    [1330300800000,75.11],
	    [1330387200000,76.49],
	    [1330473600000,77.49],
	    [1330560000000,77.78],
	    [1330646400000,77.88],
	    [1330905600000,76.17],
	    [1330992000000,75.75],
	    [1331078400000,75.81],
	    [1331164800000,77.43],
	    [1331251200000,77.88],
	    [1331510400000,78.86],
	    [1331596800000,81.16],
	    [1331683200000,84.23],
	    [1331769600000,83.65],
	    [1331856000000,83.65],
	    [1332115200000,85.87],
	    [1332201600000,86.57],
	    [1332288000000,86.07],
	    [1332374400000,85.62],
	    [1332460800000,85.15],
	    [1332720000000,86.71],
	    [1332806400000,87.78],
	    [1332892800000,88.23],
	    [1332979200000,87.12],
	    [1333065600000,85.65],
	    [1333324800000,88.38],
	    [1333411200000,89.90],
	    [1333497600000,89.19],
	    [1333584000000,90.53],
	    [1333929600000,90.89],
	    [1334016000000,89.78],
	    [1334102400000,89.46],
	    [1334188800000,88.97],
	    [1334275200000,86.46],
	    [1334534400000,82.88],
	    [1334620800000,87.10],
	    [1334707200000,86.91],
	    [1334793600000,83.92],
	    [1334880000000,81.85],
	    [1335139200000,81.67],
	    [1335225600000,80.04],
	    [1335312000000,87.14],
	    [1335398400000,86.81],
	    [1335484800000,86.14],
	    [1335744000000,83.43],
	    [1335830400000,83.16],
	    [1335916800000,83.71],
	    [1336003200000,83.12],
	    [1336089600000,80.75],
	    [1336348800000,81.35],
	    [1336435200000,81.17],
	    [1336521600000,81.31],
	    [1336608000000,81.50],
	    [1336694400000,80.96],
	    [1336953600000,79.75],
	    [1337040000000,79.02],
	    [1337126400000,78.01],
	    [1337212800000,75.73],
	    [1337299200000,75.77],
	    [1337558400000,80.18],
	    [1337644800000,79.57],
	    [1337731200000,81.51],
	    [1337817600000,80.76],
	    [1337904000000,80.33],
	    [1338249600000,81.75],
	    [1338336000000,82.74],
	    [1338422400000,82.53],
	    [1338508800000,80.14],
	    [1338768000000,80.61],
	    [1338854400000,80.40],
	    [1338940800000,81.64],
	    [1339027200000,81.67],
	    [1339113600000,82.90],
	    [1339372800000,81.60],
	    [1339459200000,82.31],
	    [1339545600000,81.74],
	    [1339632000000,81.65],
	    [1339718400000,82.02],
	    [1339977600000,83.68],
	    [1340064000000,83.92],
	    [1340150400000,83.68],
	    [1340236800000,82.52],
	    [1340323200000,83.16],
	    [1340582400000,81.54],
	    [1340668800000,81.72],
	    [1340755200000,82.07],
	    [1340841600000,81.29],
	    [1340928000000,83.43],
	    [1341187200000,84.65],
	    [1341273600000,85.63],
	    [1341446400000,87.13],
	    [1341532800000,86.55],
	    [1341792000000,87.70],
	    [1341878400000,86.89],
	    [1341964800000,86.35],
	    [1342051200000,85.56],
	    [1342137600000,86.42],
	    [1342396800000,86.70],
	    [1342483200000,86.71],
	    [1342569600000,86.61],
	    [1342656000000,87.76],
	    [1342742400000,86.33],
	    [1343001600000,86.26],
	    [1343088000000,85.85],
	    [1343174400000,82.14],
	    [1343260800000,82.13],
	    [1343347200000,83.59],
	    [1343606400000,85.00],
	    [1343692800000,87.25],
	    [1343779200000,86.69],
	    [1343865600000,86.83],
	    [1343952000000,87.96],
	    [1344211200000,88.94],
	    [1344297600000,88.70],
	    [1344384000000,88.55],
	    [1344470400000,88.68],
	    [1344556800000,88.81],
	    [1344816000000,90.00],
	    [1344902400000,90.24],
	    [1344988800000,90.12],
	    [1345075200000,90.91],
	    [1345161600000,92.59],
	    [1345420800000,95.02],
	    [1345507200000,93.72],
	    [1345593600000,95.55],
	    [1345680000000,94.66],
	    [1345766400000,94.75],
	    [1346025600000,96.53],
	    [1346112000000,96.40],
	    [1346198400000,96.21],
	    [1346284800000,94.84],
	    [1346371200000,95.03],
	    [1346716800000,96.42],
	    [1346803200000,95.75],
	    [1346889600000,96.61],
	    [1346976000000,97.21],
	    [1347235200000,94.68],
	    [1347321600000,94.37],
	    [1347408000000,95.68],
	    [1347494400000,97.57],
	    [1347580800000,98.75],
	    [1347840000000,99.97],
	    [1347926400000,100.27],
	    [1348012800000,100.30],
	    [1348099200000,99.81],
	    [1348185600000,100.01],
	    [1348444800000,98.68],
	    [1348531200000,96.22],
	    [1348617600000,95.03],
	    [1348704000000,97.33],
	    [1348790400000,95.30],
	    [1349049600000,94.20],
	    [1349136000000,94.47],
	    [1349222400000,95.92],
	    [1349308800000,95.26],
	    [1349395200000,93.23],
	    [1349654400000,91.17],
	    [1349740800000,90.84],
	    [1349827200000,91.56],
	    [1349913600000,89.70],
	    [1350000000000,89.96],
	    [1350259200000,90.68],
	    [1350345600000,92.83],
	    [1350432000000,92.09],
	    [1350518400000,90.38],
	    [1350604800000,87.12],
	    [1350864000000,90.58],
	    [1350950400000,87.62],
	    [1351036800000,88.12],
	    [1351123200000,87.08],
	    [1351209600000,86.29],
	    [1351641600000,85.05],
	    [1351728000000,85.22],
	    [1351814400000,82.40],
	    [1352073600000,83.52],
	    [1352160000000,83.26],
	    [1352246400000,79.71],
	    [1352332800000,76.82],
	    [1352419200000,78.15],
	    [1352678400000,77.55],
	    [1352764800000,77.56],
	    [1352851200000,76.70],
	    [1352937600000,75.09],
	    [1353024000000,75.38],
	    [1353283200000,80.82],
	    [1353369600000,80.13],
	    [1353456000000,80.24],
	    [1353628800000,81.64],
	    [1353888000000,84.22],
	    [1353974400000,83.54],
	    [1354060800000,83.28],
	    [1354147200000,84.19],
	    [1354233600000,83.61],
	    [1354492800000,83.74],
	    [1354579200000,82.26],
	    [1354665600000,76.97],
	    [1354752000000,78.18],
	    [1354838400000,76.18],
	    [1355097600000,75.69],
	    [1355184000000,77.34],
	    [1355270400000,77.00],
	    [1355356800000,75.67],
	    [1355443200000,72.83],
	    [1355702400000,74.12],
	    [1355788800000,76.27],
	    [1355875200000,75.19],
	    [1355961600000,74.53],
	    [1356048000000,74.19],
	    [1356307200000,74.31],
	    [1356480000000,73.29],
	    [1356566400000,73.58],
	    [1356652800000,72.80],
	    [1356912000000,76.02],
	    [1357084800000,78.43],
	    [1357171200000,77.44],
	    [1357257600000,75.29],
	    [1357516800000,74.80],
	    [1357603200000,75.04],
	    [1357689600000,73.87],
	    [1357776000000,74.79],
	    [1357862400000,74.33],
	    [1358121600000,71.68],
	    [1358208000000,69.42],
	    [1358294400000,72.30],
	    [1358380800000,71.81],
	    [1358467200000,71.43],
	    [1358812800000,72.11],
	    [1358899200000,73.43],
	    [1358985600000,64.36],
	    [1359072000000,62.84],
	    [1359331200000,64.26],
	    [1359417600000,65.47],
	    [1359504000000,65.26],
	    [1359590400000,65.07],
	    [1359676800000,64.80],
	    [1359936000000,63.19],
	    [1360022400000,65.41],
	    [1360108800000,65.34],
	    [1360195200000,66.89],
	    [1360281600000,67.85],
	    [1360540800000,68.56],
	    [1360627200000,66.84],
	    [1360713600000,66.72],
	    [1360800000000,66.66],
	    [1360886400000,65.74],
	    [1361232000000,65.71],
	    [1361318400000,64.12],
	    [1361404800000,63.72],
	    [1361491200000,64.40],
	    [1361750400000,63.26],
	    [1361836800000,64.14],
	    [1361923200000,63.51],
	    [1362009600000,63.06],
	    [1362096000000,61.50],
	    [1362355200000,60.01],
	    [1362441600000,61.59],
	    [1362528000000,60.81],
	    [1362614400000,61.51],
	    [1362700800000,61.67],
	    [1362960000000,62.55],
	    [1363046400000,61.20],
	    [1363132800000,61.19],
	    [1363219200000,61.79],
	    [1363305600000,63.38],
	    [1363564800000,65.10],
	    [1363651200000,64.93],
	    [1363737600000,64.58],
	    [1363824000000,64.68],
	    [1363910400000,65.99],
	    [1364169600000,66.23],
	    [1364256000000,65.88],
	    [1364342400000,64.58],
	    [1364428800000,63.24],
	    [1364774400000,61.27],
	    [1364860800000,61.40],
	    [1364947200000,61.71],
	    [1365033600000,61.10],
	    [1365120000000,60.46],
	    [1365379200000,60.89],
	    [1365465600000,61.00],
	    [1365552000000,62.24],
	    [1365638400000,62.05],
	    [1365724800000,61.40],
	    [1365984000000,59.98],
	    [1366070400000,60.89],
	    [1366156800000,57.54],
	    [1366243200000,56.01],
	    [1366329600000,55.79],
	    [1366588800000,56.95],
	    [1366675200000,58.02],
	    [1366761600000,57.92],
	    [1366848000000,58.34],
	    [1366934400000,59.60],
	    [1367193600000,61.45],
	    [1367280000000,63.25],
	    [1367366400000,62.76],
	    [1367452800000,63.65],
	    [1367539200000,64.28],
	    [1367798400000,65.82],
	    [1367884800000,65.52],
	    [1367971200000,66.26],
	    [1368057600000,65.25],
	    [1368144000000,64.71],
	    [1368403200000,64.96],
	    [1368489600000,63.41],
	    [1368576000000,61.26],
	    [1368662400000,62.08],
	    [1368748800000,61.89],
	    [1369008000000,63.28],
	    [1369094400000,62.81],
	    [1369180800000,63.05],
	    [1369267200000,63.16],
	    [1369353600000,63.59],
	    [1369699200000,63.06],
	    [1369785600000,63.56],
	    [1369872000000,64.51],
	    [1369958400000,64.25],
	    [1370217600000,64.39],
	    [1370304000000,64.19],
	    [1370390400000,63.59],
	    [1370476800000,62.64],
	    [1370563200000,63.12],
	    [1370822400000,62.70],
	    [1370908800000,62.51],
	    [1370995200000,61.74],
	    [1371081600000,62.28],
	    [1371168000000,61.44],
	    [1371427200000,61.71],
	    [1371513600000,61.68],
	    [1371600000000,60.43],
	    [1371686400000,59.55],
	    [1371772800000,59.07],
	    [1372032000000,57.51],
	    [1372118400000,57.52],
	    [1372204800000,56.87],
	    [1372291200000,56.25],
	    [1372377600000,56.65],
	    [1372636800000,58.46],
	    [1372723200000,59.78],
	    [1372809600000,60.11],
	    [1372982400000,59.63],
	    [1373241600000,59.29],
	    [1373328000000,60.34],
	    [1373414400000,60.10],
	    [1373500800000,61.04],
	    [1373587200000,60.93],
	    [1373846400000,61.06],
	    [1373932800000,61.46],
	    [1374019200000,61.47],
	    [1374105600000,61.68],
	    [1374192000000,60.71],
	    [1374451200000,60.90],
	    [1374537600000,59.86],
	    [1374624000000,62.93],
	    [1374710400000,62.64],
	    [1374796800000,63.00],
	    [1375056000000,63.97],
	    [1375142400000,64.76],
	    [1375228800000,64.65],
	    [1375315200000,65.24],
	    [1375401600000,66.08],
	    [1375660800000,67.06],
	    [1375747200000,66.46],
	    [1375833600000,66.43],
	    [1375920000000,65.86],
	    [1376006400000,64.92],
	    [1376265600000,66.77],
	    [1376352000000,69.94],
	    [1376438400000,71.21],
	    [1376524800000,71.13],
	    [1376611200000,71.76],
	    [1376870400000,72.53],
	    [1376956800000,71.58],
	    [1377043200000,71.77],
	    [1377129600000,71.85],
	    [1377216000000,71.57],
	    [1377475200000,71.85],
	    [1377561600000,69.80],
	    [1377648000000,70.13],
	    [1377734400000,70.24],
	    [1377820800000,69.60],
	    [1378166400000,69.80],
	    [1378252800000,71.24],
	    [1378339200000,70.75],
	    [1378425600000,71.17],
	    [1378684800000,72.31],
	    [1378771200000,70.66],
	    [1378857600000,66.82],
	    [1378944000000,67.53],
	    [1379030400000,66.41],
	    [1379289600000,64.30],
	    [1379376000000,65.05],
	    [1379462400000,66.38],
	    [1379548800000,67.47],
	    [1379635200000,66.77],
	    [1379894400000,70.09],
	    [1379980800000,69.87],
	    [1380067200000,68.79],
	    [1380153600000,69.46],
	    [1380240000000,68.96],
	    [1380499200000,68.11],
	    [1380585600000,69.71],
	    [1380672000000,69.94],
	    [1380758400000,69.06],
	    [1380844800000,69.00],
	    [1381104000000,69.68],
	    [1381190400000,68.71],
	    [1381276800000,69.51],
	    [1381363200000,69.95],
	    [1381449600000,70.40],
	    [1381708800000,70.86],
	    [1381795200000,71.24],
	    [1381881600000,71.59],
	    [1381968000000,72.07],
	    [1382054400000,72.70],
	    [1382313600000,74.48],
	    [1382400000000,74.27],
	    [1382486400000,74.99],
	    [1382572800000,75.99],
	    [1382659200000,75.14],
	    [1382918400000,75.70],
	    [1383004800000,73.81],
	    [1383091200000,74.98],
	    [1383177600000,74.67],
	    [1383264000000,74.29],
	    [1383523200000,75.25],
	    [1383609600000,75.06],
	    [1383696000000,74.42],
	    [1383782400000,73.21],
	    [1383868800000,74.37],
	    [1384128000000,74.15],
	    [1384214400000,74.29],
	    [1384300800000,74.38],
	    [1384387200000,75.45],
	    [1384473600000,75.00],
	    [1384732800000,74.09],
	    [1384819200000,74.22],
	    [1384905600000,73.57],
	    [1384992000000,74.45],
	    [1385078400000,74.26],
	    [1385337600000,74.82],
	    [1385424000000,76.20],
	    [1385510400000,77.99],
	    [1385683200000,79.44],
	    [1385942400000,78.75],
	    [1386028800000,80.90],
	    [1386115200000,80.71],
	    [1386201600000,81.13],
	    [1386288000000,80.00],
	    [1386547200000,80.92],
	    [1386633600000,80.79],
	    [1386720000000,80.19],
	    [1386806400000,80.08],
	    [1386892800000,79.20],
	    [1387152000000,79.64],
	    [1387238400000,79.28],
	    [1387324800000,78.68],
	    [1387411200000,77.78],
	    [1387497600000,78.43],
	    [1387756800000,81.44],
	    [1387843200000,81.10],
	    [1388016000000,80.56],
	    [1388102400000,80.01],
	    [1388361600000,79.22],
	    [1388448000000,80.15],
	    [1388620800000,79.02],
	    [1388707200000,77.28],
	    [1388966400000,77.70],
	    [1389052800000,77.15],
	    [1389139200000,77.64],
	    [1389225600000,76.65],
	    [1389312000000,76.13],
	    [1389571200000,76.53],
	    [1389657600000,78.06],
	    [1389744000000,79.62],
	    [1389830400000,79.18],
	    [1389916800000,77.24],
	    [1390262400000,78.44],
	    [1390348800000,78.79],
	    [1390435200000,79.45],
	    [1390521600000,78.01],
	    [1390780800000,78.64],
	    [1390867200000,72.36],
	    [1390953600000,71.54],
	    [1391040000000,71.40],
	    [1391126400000,71.51],
	    [1391385600000,71.65],
	    [1391472000000,72.68],
	    [1391558400000,73.23],
	    [1391644800000,73.22],
	    [1391731200000,74.24],
	    [1391990400000,75.57],
	    [1392076800000,76.57],
	    [1392163200000,76.56],
	    [1392249600000,77.78],
	    [1392336000000,77.71],
	    [1392681600000,78.00],
	    [1392768000000,76.77],
	    [1392854400000,75.88],
	    [1392940800000,75.04],
	    [1393200000000,75.36],
	    [1393286400000,74.58],
	    [1393372800000,73.91],
	    [1393459200000,75.38],
	    [1393545600000,75.18],
	    [1393804800000,75.39],
	    [1393891200000,75.89],
	    [1393977600000,76.05],
	    [1394064000000,75.82],
	    [1394150400000,75.78],
	    [1394409600000,75.85],
	    [1394496000000,76.58],
	    [1394582400000,76.66],
	    [1394668800000,75.81],
	    [1394755200000,74.96],
	    [1395014400000,75.25],
	    [1395100800000,75.91],
	    [1395187200000,75.89],
	    [1395273600000,75.53],
	    [1395360000000,76.12],
	    [1395619200000,77.03],
	    [1395705600000,77.86],
	    [1395792000000,77.11],
	    [1395878400000,76.78],
	    [1395964800000,76.69],
	    [1396224000000,76.68],
	    [1396310400000,77.38],
	    [1396396800000,77.51],
	    [1396483200000,76.97],
	    [1396569600000,75.97],
	    [1396828800000,74.78],
	    [1396915200000,74.78],
	    [1397001600000,75.76],
	    [1397088000000,74.78],
	    [1397174400000,74.23],
	    [1397433600000,74.53],
	    [1397520000000,73.99],
	    [1397606400000,74.14],
	    [1397692800000,74.99],
	    [1398038400000,75.88],
	    [1398124800000,75.96],
	    [1398211200000,74.96],
	    [1398297600000,81.11],
	    [1398384000000,81.71],
	    [1398643200000,84.87],
	    [1398729600000,84.62],
	    [1398816000000,84.30],
	    [1398902400000,84.50],
	    [1398988800000,84.65],
	    [1399248000000,85.85],
	    [1399334400000,84.92],
	    [1399420800000,84.62],
	    [1399507200000,84.00],
	    [1399593600000,83.65],
	    [1399852800000,84.69],
	    [1399939200000,84.82],
	    [1400025600000,84.84],
	    [1400112000000,84.12],
	    [1400198400000,85.36],
	    [1400457600000,86.37],
	    [1400544000000,86.39],
	    [1400630400000,86.62],
	    [1400716800000,86.75],
	    [1400803200000,87.73],
	    [1401148800000,89.38],
	    [1401235200000,89.14],
	    [1401321600000,90.77],
	    [1401408000000,90.43],
	    [1401667200000,89.81],
	    [1401753600000,91.08],
	    [1401840000000,92.12],
	    [1401926400000,92.48],
	    [1402012800000,92.22],
	    [1402272000000,93.70],
	    [1402358400000,94.25],
	    [1402444800000,93.86],
	    [1402531200000,92.29],
	    [1402617600000,91.28],
	    [1402876800000,92.20],
	    [1402963200000,92.08],
	    [1403049600000,92.18],
	    [1403136000000,91.86],
	    [1403222400000,90.91],
	    [1403481600000,90.83],
	    [1403568000000,90.28],
	    [1403654400000,90.36],
	    [1403740800000,90.90],
	    [1403827200000,91.98],
	    [1404086400000,92.93],
	    [1404172800000,93.52],
	    [1404259200000,93.48],
	    [1404345600000,94.03],
	    [1404691200000,95.97],
	    [1404777600000,95.35],
	    [1404864000000,95.39],
	    [1404950400000,95.04],
	    [1405036800000,95.22],
	    [1405296000000,96.45],
	    [1405382400000,95.32],
	    [1405468800000,94.78],
	    [1405555200000,93.09],
	    [1405641600000,94.43],
	    [1405900800000,93.94],
	    [1405987200000,94.72],
	    [1406073600000,97.19],
	    [1406160000000,97.03],
	    [1406246400000,97.67],
	    [1406505600000,99.02],
	    [1406592000000,98.38],
	    [1406678400000,98.15],
	    [1406764800000,95.60],
	    [1406851200000,96.13],
	    [1407110400000,95.59],
	    [1407196800000,95.12],
	    [1407283200000,94.96],
	    [1407369600000,94.48],
	    [1407456000000,94.74],
	    [1407715200000,95.99],
	    [1407801600000,95.97],
	    [1407888000000,97.24],
	    [1407974400000,97.50],
	    [1408060800000,97.98],
	    [1408320000000,99.16],
	    [1408406400000,100.53],
	    [1408492800000,100.57],
	    [1408579200000,100.58],
	    [1408665600000,101.32],
	    [1408924800000,101.54],
	    [1409011200000,100.89],
	    [1409097600000,102.13],
	    [1409184000000,102.25],
	    [1409270400000,102.50],
	    [1409616000000,103.30],
	    [1409702400000,98.94],
	    [1409788800000,98.12],
	    [1409875200000,98.97],
	    [1410134400000,98.36],
	    [1410220800000,97.99],
	    [1410307200000,101.00],
	    [1410393600000,101.43],
	    [1410480000000,101.66],
	    [1410739200000,101.63],
	    [1410825600000,100.86],
	    [1410912000000,101.58],
	    [1410998400000,101.79],
	    [1411084800000,100.96],
	    [1411344000000,101.06],
	    [1411430400000,102.64],
	    [1411516800000,101.75],
	    [1411603200000,97.87],
	    [1411689600000,100.75],
	    [1411948800000,100.11],
	    [1412035200000,100.75],
	    [1412121600000,99.18],
	    [1412208000000,99.90],
	    [1412294400000,99.62],
	    [1412553600000,99.62],
	    [1412640000000,98.75],
	    [1412726400000,100.80],
	    [1412812800000,101.02],
	    [1412899200000,100.73],
	    [1413158400000,99.81],
	    [1413244800000,98.75],
	    [1413331200000,97.54],
	    [1413417600000,96.26],
	    [1413504000000,97.67],
	    [1413763200000,99.76],
	    [1413849600000,102.47],
	    [1413936000000,102.99],
	    [1414022400000,104.83],
	    [1414108800000,105.22],
	    [1414368000000,105.11],
	    [1414454400000,106.74],
	    [1414540800000,107.34],
	    [1414627200000,106.98],
	    [1414713600000,108.00],
	    [1414972800000,109.40],
	    [1415059200000,108.60],
	    [1415145600000,108.86],
	    [1415232000000,108.70],
	    [1415318400000,109.01],
	    [1415577600000,108.83],
	    [1415664000000,109.70],
	    [1415750400000,111.25],
	    [1415836800000,112.82],
	    [1415923200000,114.18],
	    [1416182400000,113.99],
	    [1416268800000,115.47],
	    [1416355200000,114.67],
	    [1416441600000,116.31],
	    [1416528000000,116.47],
	    [1416787200000,118.62],
	    [1416873600000,117.60],
	    [1416960000000,119.00],
	    [1417132800000,118.93],
	    [1417392000000,115.07],
	    [1417478400000,114.63],
	    [1417564800000,115.93],
	    [1417651200000,115.49],
	    [1417737600000,115.00],
	    [1417996800000,112.40],
	    [1418083200000,114.12],
	    [1418169600000,111.95],
	    [1418256000000,111.62],
	    [1418342400000,109.73],
	    [1418601600000,108.22],
	    [1418688000000,106.74],
	    [1418774400000,109.41],
	    [1418860800000,112.65],
	    [1418947200000,111.78],
	    [1419206400000,112.94],
	    [1419292800000,112.54],
	    [1419379200000,112.01],
	    [1419552000000,113.99],
	    [1419811200000,113.91],
	    [1419897600000,112.52],
	    [1419984000000,110.38],
	    [1420156800000,109.33],
	    [1420416000000,106.25],
	    [1420502400000,106.26],
	    [1420588800000,107.75],
	    [1420675200000,111.89],
	    [1420761600000,112.01],
	    [1421020800000,109.25],
	    [1421107200000,110.22],
	    [1421193600000,109.80],
	    [1421280000000,106.82],
	    [1421366400000,105.99],
	    [1421712000000,108.72],
	    [1421798400000,109.55],
	    [1421884800000,112.40],
	    [1421971200000,112.98],
	    [1422230400000,113.10],
	    [1422316800000,109.14],
	    [1422403200000,115.31],
	    [1422489600000,118.90],
	    [1422576000000,117.16],
	    [1422835200000,118.63],
	    [1422921600000,118.65],
	    [1423008000000,119.56],
	    [1423094400000,119.94],
	    [1423180800000,118.93],
	    [1423440000000,119.72],
	    [1423526400000,122.02],
	    [1423612800000,124.88],
	    [1423699200000,126.46],
	    [1423785600000,127.08],
	    [1424131200000,127.83],
	    [1424217600000,128.72],
	    [1424304000000,128.45],
	    [1424390400000,129.50],
	    [1424649600000,133.00],
	    [1424736000000,132.17],
	    [1424822400000,128.79],
	    [1424908800000,130.42],
	    [1424995200000,128.46],
	    [1425254400000,129.09],
	    [1425340800000,129.36],
	    [1425427200000,128.54],
	    [1425513600000,126.41],
	    [1425600000000,126.60],
	    [1425859200000,127.14],
	    [1425945600000,124.51],
	    [1426032000000,122.24],
	    [1426118400000,124.45],
	    [1426204800000,123.59],
	    [1426464000000,124.95],
	    [1426550400000,127.04],
	    [1426636800000,128.47],
	    [1426723200000,127.50],
	    [1426809600000,125.90],
	    [1427068800000,127.21],
	    [1427155200000,126.69],
	    [1427241600000,123.38],
	    [1427328000000,124.24],
	    [1427414400000,123.25],
	    [1427673600000,126.37],
	    [1427760000000,124.43],
	    [1427846400000,124.25],
	    [1427932800000,125.32],
	    [1428278400000,127.35],
	    [1428364800000,126.01],
	    [1428451200000,125.60],
	    [1428537600000,126.56],
	    [1428624000000,127.10],
	    [1428883200000,126.85],
	    [1428969600000,126.30],
	    [1429056000000,126.78],
	    [1429142400000,126.17],
	    [1429228800000,124.75],
	    [1429488000000,127.60],
	    [1429574400000,126.91],
	    [1429660800000,128.62],
	    [1429747200000,129.67],
	    [1429833600000,130.28],
	    [1430092800000,132.65],
	    [1430179200000,130.56],
	    [1430265600000,128.64],
	    [1430352000000,125.15],
	    [1430438400000,128.95],
	    [1430697600000,128.70],
	    [1430784000000,125.80],
	    [1430870400000,125.01],
	    [1430956800000,125.26],
	    [1431043200000,127.62],
	    [1431302400000,126.32],
	    [1431388800000,125.86],
	    [1431475200000,126.01],
	    [1431561600000,128.95],
	    [1431648000000,128.77],
	    [1431907200000,130.19],
	    [1431993600000,130.07],
	    [1432080000000,130.06],
	    [1432166400000,131.39],
	    [1432252800000,132.54],
	    [1432598400000,129.62],
	    [1432684800000,132.04],
	    [1432771200000,131.78],
	    [1432857600000,130.28],
	    [1433116800000,130.54],
	    [1433203200000,129.96],
	    [1433289600000,130.12],
	    [1433376000000,129.36],
	    [1433462400000,128.65],
	    [1433721600000,127.80],
	    [1433808000000,127.42],
	    [1433894400000,128.88],
	    [1433980800000,128.59],
	    [1434067200000,127.17],
	    [1434326400000,126.92],
	    [1434412800000,127.60],
	    [1434499200000,127.30],
	    [1434585600000,127.88],
	    [1434672000000,126.60],
	    [1434931200000,127.61],
	    [1435017600000,127.03],
	    [1435104000000,128.11],
	    [1435190400000,127.50],
	    [1435276800000,126.75],
	    [1435536000000,124.53],
	    [1435622400000,125.42],
	    [1435708800000,126.60],
	    [1435795200000,126.44],
	    [1436140800000,126.00],
	    [1436227200000,125.69],
	    [1436313600000,122.57],
	    [1436400000000,120.07],
	    [1436486400000,123.28],
	    [1436745600000,125.66],
	    [1436832000000,125.61],
	    [1436918400000,126.82],
	    [1437004800000,128.51],
	    [1437091200000,129.62],
	    [1437350400000,132.07],
	    [1437436800000,130.75],
	    [1437523200000,125.22],
	    [1437609600000,125.16],
	    [1437696000000,124.50],
	    [1437955200000,122.77],
	    [1438041600000,123.38],
	    [1438128000000,122.99],
	    [1438214400000,122.37],
	    [1438300800000,121.30],
	    [1438560000000,118.44],
	    [1438646400000,114.64],
	    [1438732800000,115.40],
	    [1438819200000,115.13],
	    [1438905600000,115.52],
	    [1439164800000,119.72],
	    [1439251200000,113.49],
	    [1439337600000,115.24],
	    [1439424000000,115.15],
	    [1439510400000,115.96],
	    [1439769600000,117.16],
	    [1439856000000,116.50],
	    [1439942400000,115.01],
	    [1440028800000,112.65],
	    [1440115200000,105.76]
	]

	var highstock_config = {
	    stockChart: true,
	    rangeSelector : {
	        selected : 1
	    },

	    title : {
	        text : 'AAPL Stock Price'
	    },

	    series : [{
	        name : 'AAPL',
	        data : data,
	        tooltip: {
	            valueDecimals: 2
	        }
	    }]
	}

	React.render(React.createElement(Highcharts, {config: highcharts_config}), document.getElementById('testHighcharts'));
	React.render(React.createElement(Highcharts, {config: highstock_config}), document.getElementById('testHighstock'));


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(4);
	var ReactChildren = __webpack_require__(8);
	var ReactComponent = __webpack_require__(22);
	var ReactClass = __webpack_require__(37);
	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);
	var ReactDOM = __webpack_require__(40);
	var ReactDOMTextComponent = __webpack_require__(42);
	var ReactDefaultInjection = __webpack_require__(91);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(28);
	var ReactPropTypes = __webpack_require__(122);
	var ReactReconciler = __webpack_require__(29);
	var ReactServerRendering = __webpack_require__(154);

	var assign = __webpack_require__(13);
	var findDOMNode = __webpack_require__(111);
	var onlyChild = __webpack_require__(156);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(51);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);

	var invariant = __webpack_require__(7);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var ReactFragment = __webpack_require__(10);

	var traverseAllChildren = __webpack_require__(18);
	var warning = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(11);

	var warning = __webpack_require__(15);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);

	var assign = __webpack_require__(13);
	var warning = __webpack_require__(15);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);
	var warning = __webpack_require__(15);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(16);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactInstanceHandles = __webpack_require__(19);

	var getIteratorFn = __webpack_require__(21);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(20);

	var invariant = __webpack_require__(7);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(23);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(24);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(27);
	var PooledClass = __webpack_require__(9);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactPerf = __webpack_require__(28);
	var ReactReconciler = __webpack_require__(29);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(30);
	var ReactElementValidator = __webpack_require__(32);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(31);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactPropTypeLocations = __webpack_require__(33);
	var ReactPropTypeLocationNames = __webpack_require__(34);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactNativeComponent = __webpack_require__(35);

	var getIteratorFn = __webpack_require__(21);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(22);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactErrorUtils = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactLifeCycle = __webpack_require__(24);
	var ReactPropTypeLocations = __webpack_require__(33);
	var ReactPropTypeLocationNames = __webpack_require__(34);
	var ReactUpdateQueue = __webpack_require__(23);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var keyMirror = __webpack_require__(6);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);

	var mapObject = __webpack_require__(41);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(43);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactDOMComponent = __webpack_require__(87);

	var assign = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(46);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);

	var quoteAttributeValueForBrowser = __webpack_require__(45);
	var warning = __webpack_require__(15);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(7);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(46);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(48);
	var ReactMount = __webpack_require__(67);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(49);
	var DOMChildrenOperations = __webpack_require__(58);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(28);

	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(66);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(51);

	var camelizeStyleName = __webpack_require__(52);
	var dangerousStyleValue = __webpack_require__(54);
	var hyphenateStyleName = __webpack_require__(55);
	var memoizeStringOnly = __webpack_require__(57);
	var warning = __webpack_require__(15);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(53);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(50);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(56);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 57 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(59);
	var ReactMultiChildUpdateTypes = __webpack_require__(64);

	var setTextContent = __webpack_require__(65);
	var invariant = __webpack_require__(7);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var createNodesFromMarkup = __webpack_require__(60);
	var emptyFunction = __webpack_require__(16);
	var getMarkupWrap = __webpack_require__(63);
	var invariant = __webpack_require__(7);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(51);

	var createArrayFromMixed = __webpack_require__(61);
	var getMarkupWrap = __webpack_require__(63);
	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(62);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(51);

	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(6);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);
	var escapeTextContentForBrowser = __webpack_require__(46);
	var setInnerHTML = __webpack_require__(66);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactMarkupChecksum = __webpack_require__(77);
	var ReactPerf = __webpack_require__(28);
	var ReactReconciler = __webpack_require__(29);
	var ReactUpdateQueue = __webpack_require__(23);
	var ReactUpdates = __webpack_require__(26);

	var emptyObject = __webpack_require__(14);
	var containsNode = __webpack_require__(79);
	var getReactRootElementInContainer = __webpack_require__(82);
	var instantiateReactComponent = __webpack_require__(83);
	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(66);
	var shouldUpdateReactComponent = __webpack_require__(86);
	var warning = __webpack_require__(15);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPluginRegistry = __webpack_require__(70);
	var ReactEventEmitterMixin = __webpack_require__(73);
	var ViewportMetrics = __webpack_require__(74);

	var assign = __webpack_require__(13);
	var isEventSupported = __webpack_require__(75);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(70);
	var EventPluginUtils = __webpack_require__(4);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(7);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(69);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 74 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(25);

	var invariant = __webpack_require__(7);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(78);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 78 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(80);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(81);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(84);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactNativeComponent = __webpack_require__(35);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(15);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactContext = __webpack_require__(12);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(32);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactLifeCycle = __webpack_require__(24);
	var ReactNativeComponent = __webpack_require__(35);
	var ReactPerf = __webpack_require__(28);
	var ReactPropTypeLocations = __webpack_require__(33);
	var ReactPropTypeLocationNames = __webpack_require__(34);
	var ReactReconciler = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);
	var invariant = __webpack_require__(7);
	var shouldUpdateReactComponent = __webpack_require__(86);
	var warning = __webpack_require__(15);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(15);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(49);
	var DOMProperty = __webpack_require__(44);
	var DOMPropertyOperations = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactMount = __webpack_require__(67);
	var ReactMultiChild = __webpack_require__(88);
	var ReactPerf = __webpack_require__(28);

	var assign = __webpack_require__(13);
	var escapeTextContentForBrowser = __webpack_require__(46);
	var invariant = __webpack_require__(7);
	var isEventSupported = __webpack_require__(75);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactMultiChildUpdateTypes = __webpack_require__(64);

	var ReactReconciler = __webpack_require__(29);
	var ReactChildReconciler = __webpack_require__(89);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(29);

	var flattenChildren = __webpack_require__(90);
	var instantiateReactComponent = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(86);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(18);
	var warning = __webpack_require__(15);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(92);
	var ChangeEventPlugin = __webpack_require__(100);
	var ClientReactRootIndex = __webpack_require__(102);
	var DefaultEventPluginOrder = __webpack_require__(103);
	var EnterLeaveEventPlugin = __webpack_require__(104);
	var ExecutionEnvironment = __webpack_require__(51);
	var HTMLDOMPropertyConfig = __webpack_require__(108);
	var MobileSafariClickEventPlugin = __webpack_require__(109);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(47);
	var ReactDefaultBatchingStrategy = __webpack_require__(112);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactDOMButton = __webpack_require__(113);
	var ReactDOMForm = __webpack_require__(116);
	var ReactDOMImg = __webpack_require__(118);
	var ReactDOMIDOperations = __webpack_require__(48);
	var ReactDOMIframe = __webpack_require__(119);
	var ReactDOMInput = __webpack_require__(120);
	var ReactDOMOption = __webpack_require__(123);
	var ReactDOMSelect = __webpack_require__(124);
	var ReactDOMTextarea = __webpack_require__(125);
	var ReactDOMTextComponent = __webpack_require__(42);
	var ReactElement = __webpack_require__(11);
	var ReactEventListener = __webpack_require__(126);
	var ReactInjection = __webpack_require__(129);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMount = __webpack_require__(67);
	var ReactReconcileTransaction = __webpack_require__(130);
	var SelectEventPlugin = __webpack_require__(136);
	var ServerReactRootIndex = __webpack_require__(138);
	var SimpleEventPlugin = __webpack_require__(139);
	var SVGDOMPropertyConfig = __webpack_require__(148);

	var createFullPageComponent = __webpack_require__(149);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(150);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var ExecutionEnvironment = __webpack_require__(51);
	var FallbackCompositionState = __webpack_require__(94);
	var SyntheticCompositionEvent = __webpack_require__(96);
	var SyntheticInputEvent = __webpack_require__(99);

	var keyOf = __webpack_require__(39);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var getTextContentAccessor = __webpack_require__(95);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);
	var getEventTarget = __webpack_require__(98);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 98 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPropagators = __webpack_require__(93);
	var ExecutionEnvironment = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(26);
	var SyntheticEvent = __webpack_require__(97);

	var isEventSupported = __webpack_require__(75);
	var isTextInputElement = __webpack_require__(101);
	var keyOf = __webpack_require__(39);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(39);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var SyntheticMouseEvent = __webpack_require__(105);

	var ReactMount = __webpack_require__(67);
	var keyOf = __webpack_require__(39);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(74);

	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	var getEventTarget = __webpack_require__(98);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 107 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ExecutionEnvironment = __webpack_require__(51);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);

	var emptyFunction = __webpack_require__(16);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(111);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(17);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactMount = __webpack_require__(67);

	var invariant = __webpack_require__(7);
	var isNode = __webpack_require__(81);
	var warning = __webpack_require__(15);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(26);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var keyMirror = __webpack_require__(6);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(115);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(68);

	var accumulateInto = __webpack_require__(71);
	var forEachAccumulated = __webpack_require__(72);
	var invariant = __webpack_require__(7);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var LocalEventTrapMixin = __webpack_require__(117);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(122);

	var invariant = __webpack_require__(7);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactFragment = __webpack_require__(10);
	var ReactPropTypeLocationNames = __webpack_require__(34);

	var emptyFunction = __webpack_require__(16);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var warning = __webpack_require__(15);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(114);
	var DOMPropertyOperations = __webpack_require__(43);
	var LinkedValueUtils = __webpack_require__(121);
	var ReactBrowserComponentMixin = __webpack_require__(110);
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var invariant = __webpack_require__(7);

	var warning = __webpack_require__(15);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(127);
	var ExecutionEnvironment = __webpack_require__(51);
	var PooledClass = __webpack_require__(9);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(26);

	var assign = __webpack_require__(13);
	var getEventTarget = __webpack_require__(98);
	var getUnboundedScrollPosition = __webpack_require__(128);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(16);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var EventPluginHub = __webpack_require__(69);
	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactClass = __webpack_require__(37);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(35);
	var ReactDOMComponent = __webpack_require__(87);
	var ReactPerf = __webpack_require__(28);
	var ReactRootIndex = __webpack_require__(20);
	var ReactUpdates = __webpack_require__(26);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(27);
	var PooledClass = __webpack_require__(9);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactInputSelection = __webpack_require__(131);
	var ReactPutListenerQueue = __webpack_require__(135);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(132);

	var containsNode = __webpack_require__(79);
	var focusNode = __webpack_require__(115);
	var getActiveElement = __webpack_require__(134);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	var getNodeForCharacterOffset = __webpack_require__(133);
	var getTextContentAccessor = __webpack_require__(95);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var ReactBrowserEventEmitter = __webpack_require__(68);

	var assign = __webpack_require__(13);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPropagators = __webpack_require__(93);
	var ReactInputSelection = __webpack_require__(131);
	var SyntheticEvent = __webpack_require__(97);

	var getActiveElement = __webpack_require__(134);
	var isTextInputElement = __webpack_require__(101);
	var keyOf = __webpack_require__(39);
	var shallowEqual = __webpack_require__(137);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 138 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginUtils = __webpack_require__(4);
	var EventPropagators = __webpack_require__(93);
	var SyntheticClipboardEvent = __webpack_require__(140);
	var SyntheticEvent = __webpack_require__(97);
	var SyntheticFocusEvent = __webpack_require__(141);
	var SyntheticKeyboardEvent = __webpack_require__(142);
	var SyntheticMouseEvent = __webpack_require__(105);
	var SyntheticDragEvent = __webpack_require__(145);
	var SyntheticTouchEvent = __webpack_require__(146);
	var SyntheticUIEvent = __webpack_require__(106);
	var SyntheticWheelEvent = __webpack_require__(147);

	var getEventCharCode = __webpack_require__(143);

	var invariant = __webpack_require__(7);
	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(97);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	var getEventCharCode = __webpack_require__(143);
	var getEventKey = __webpack_require__(144);
	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(143);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(105);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(106);

	var getEventModifierState = __webpack_require__(107);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(105);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(44);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(37);
	var ReactElement = __webpack_require__(11);

	var invariant = __webpack_require__(7);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(44);
	var ReactDefaultPerfAnalysis = __webpack_require__(151);
	var ReactMount = __webpack_require__(67);
	var ReactPerf = __webpack_require__(28);

	var performanceNow = __webpack_require__(152);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(13);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(153);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(51);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactMarkupChecksum = __webpack_require__(77);
	var ReactServerRenderingTransaction =
	  __webpack_require__(155);

	var emptyObject = __webpack_require__(14);
	var instantiateReactComponent = __webpack_require__(83);
	var invariant = __webpack_require__(7);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(9);
	var CallbackQueue = __webpack_require__(27);
	var ReactPutListenerQueue = __webpack_require__(135);
	var Transaction = __webpack_require__(36);

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(11);

	var invariant = __webpack_require__(7);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1), __webpack_require__(158));
		else if(typeof define === 'function' && define.amd)
			define(["react", "react/addons"], factory);
		else if(typeof exports === 'object')
			exports["Highcharts"] = factory(require("react"), require("react/addons"));
		else
			root["Highcharts"] = factory(root["react"], root["react/addons"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(1);

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global) {global.HighchartsAdapter = __webpack_require__(2);
		var Highchart = __webpack_require__(3);
		var React = __webpack_require__(4);
		var update = __webpack_require__(5).addons.update;
		module.exports = React.createClass({
		    displayName: 'Highchart',

		    initChart: function() {
		        var config = this.props.config
		        if (!config || !config.series) {
		            return
		        }
		        var node = this.refs.chart.getDOMNode();
		        if (!config.chart) {
		            config.chart = {}
		        }
		        config.chart.renderTo = node
		        this.config = update(config, {
		            $merge: {}
		        })
		        if (config.stockChart) {
		            this.chart = new Highchart.StockChart(config);
		        } else {
		            this.chart = new Highchart.Chart(config);
		        }
		    },

		    // @todo
		    // 目前的componentDidUpdate函数有些暴力，直接重新 new Highchart 需要实现一种低成本，不需要重新刷新的更新方式
		    refreshChart: function() {
		        var config = this.props.config
		        if (!config || !config.series) {
		            return
		        }
		        if (!this.chart) {
		            return this.initChart()
		        } 

		        //更新Series
		        this.updateSeries()

		        //重新更新config
		        this.config = update(config, {
		            $merge: {}
		        })
		    },

		    updateSeries: function() {
		        var newSeries = this.props.config.series
		        var series = this.config.series
		        var chart = this.getChart()
		        //和newSeries比较，同步删除不需要的serie
		        var removeList = []
		        for (var index = series.length - 1; index >= 0; index--) {
		            var serie = series[index]
		            var remove_flag = true
		            for (var n_index = newSeries.length - 1; n_index >= 0; n_index--) {
		                var n_serie = newSeries[n_index]
		                if (n_serie.id === serie.id) {
		                    remove_flag = false
		                    break
		                }
		            }
		            if (remove_flag) {
		                removeList.push(serie.id)
		            }
		        }
		        for (var s = 0; s < removeList.length; s++){
		            chart.get(removeList[s]).remove(true)
		        }
		        //循环遍历，寻找需要更新/添加的serie
		        for (var n_index = newSeries.length - 1; n_index >= 0; n_index--) {
		            var n_serie = newSeries[n_index]
		            var add_flag = true
		            for (var index = series.length - 1; index >= 0; index--) {
		                var serie = series[index]
		                if (n_serie.id === serie.id) {
		                    add_flag = false
		                    chart.get(n_serie.id).update(n_serie)
		                }
		            }
		            if (add_flag) {
		                chart.addSeries(n_serie)
		            }
		        }

		    },

		    getChart: function() {
		        if (!this.chart) {
		            throw new Error('getChart() should not be called before the component is mounted');
		        }
		        return this.chart;
		    },

		    componentDidMount: function() {
		        this.initChart();
		    },
		    componentDidUpdate: function() {
		        this.refreshChart()
		    },
		    render: function() {
		        return React.createElement("div", {className: "chart", ref: "chart"})
		    }
		});

		module.exports.Highchart = Highchart;
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		/**
		 * @license @product.name@ JS v@product.version@ (@product.date@)
		 *
		 * Standalone Highcharts Framework
		 *
		 * License: MIT License
		 */


		/*global Highcharts */
		var HighchartsAdapter = (function () {

		var UNDEFINED,
			doc = document,
			emptyArray = [],
			timers = [],
			timerId,
			animSetters = {},
			Fx;

		Math.easeInOutSine = function (t, b, c, d) {
			return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
		};



		/**
		 * Extend given object with custom events
		 */
		function augment(obj) {
			function removeOneEvent(el, type, fn) {
				el.removeEventListener(type, fn, false);
			}

			function IERemoveOneEvent(el, type, fn) {
				fn = el.HCProxiedMethods[fn.toString()];
				el.detachEvent('on' + type, fn);
			}

			function removeAllEvents(el, type) {
				var events = el.HCEvents,
					remove,
					types,
					len,
					n;

				if (el.removeEventListener) {
					remove = removeOneEvent;
				} else if (el.attachEvent) {
					remove = IERemoveOneEvent;
				} else {
					return; // break on non-DOM events
				}


				if (type) {
					types = {};
					types[type] = true;
				} else {
					types = events;
				}

				for (n in types) {
					if (events[n]) {
						len = events[n].length;
						while (len--) {
							remove(el, n, events[n][len]);
						}
					}
				}
			}

			if (!obj.HCExtended) {
				Highcharts.extend(obj, {
					HCExtended: true,

					HCEvents: {},

					bind: function (name, fn) {
						var el = this,
							events = this.HCEvents,
							wrappedFn;

						// handle DOM events in modern browsers
						if (el.addEventListener) {
							el.addEventListener(name, fn, false);

						// handle old IE implementation
						} else if (el.attachEvent) {
							
							wrappedFn = function (e) {
								e.target = e.srcElement || window; // #2820
								fn.call(el, e);
							};

							if (!el.HCProxiedMethods) {
								el.HCProxiedMethods = {};
							}

							// link wrapped fn with original fn, so we can get this in removeEvent
							el.HCProxiedMethods[fn.toString()] = wrappedFn;

							el.attachEvent('on' + name, wrappedFn);
						}


						if (events[name] === UNDEFINED) {
							events[name] = [];
						}

						events[name].push(fn);
					},

					unbind: function (name, fn) {
						var events,
							index;

						if (name) {
							events = this.HCEvents[name] || [];
							if (fn) {
								index = HighchartsAdapter.inArray(fn, events);
								if (index > -1) {
									events.splice(index, 1);
									this.HCEvents[name] = events;
								}
								if (this.removeEventListener) {
									removeOneEvent(this, name, fn);
								} else if (this.attachEvent) {
									IERemoveOneEvent(this, name, fn);
								}
							} else {
								removeAllEvents(this, name);
								this.HCEvents[name] = [];
							}
						} else {
							removeAllEvents(this);
							this.HCEvents = {};
						}
					},

					trigger: function (name, args) {
						var events = this.HCEvents[name] || [],
							target = this,
							len = events.length,
							i,
							preventDefault,
							fn;

						// Attach a simple preventDefault function to skip default handler if called
						preventDefault = function () {
							args.defaultPrevented = true;
						};
						
						for (i = 0; i < len; i++) {
							fn = events[i];

							// args is never null here
							if (args.stopped) {
								return;
							}

							args.preventDefault = preventDefault;
							args.target = target;

							// If the type is not set, we're running a custom event (#2297). If it is set,
							// we're running a browser event, and setting it will cause en error in
							// IE8 (#2465).
							if (!args.type) {
								args.type = name;
							}
							

							
							// If the event handler return false, prevent the default handler from executing
							if (fn.call(this, args) === false) {
								args.preventDefault();
							}
						}
					}
				});
			}

			return obj;
		}


		return {

			/**
			 * Initialize the adapter. This is run once as Highcharts is first run.
			 */
			init: function (pathAnim) {

				/**
				 * Compatibility section to add support for legacy IE. This can be removed if old IE 
				 * support is not needed.
				 */
				if (!doc.defaultView) {
					this._getStyle = function (el, prop) {
						var val;
						if (el.style[prop]) {
							return el.style[prop];
						} else {
							if (prop === 'opacity') {
								prop = 'filter';
							}
							/*jslint unparam: true*/
							val = el.currentStyle[prop.replace(/\-(\w)/g, function (a, b) { return b.toUpperCase(); })];
							if (prop === 'filter') {
								val = val.replace(
									/alpha\(opacity=([0-9]+)\)/, 
									function (a, b) { 
										return b / 100; 
									}
								);
							}
							/*jslint unparam: false*/
							return val === '' ? 1 : val;
						} 
					};
					this.adapterRun = function (elem, method) {
						var alias = { width: 'clientWidth', height: 'clientHeight' }[method];

						if (alias) {
							elem.style.zoom = 1;
							return elem[alias] - 2 * parseInt(HighchartsAdapter._getStyle(elem, 'padding'), 10);
						}
					};
				}

				if (!Array.prototype.forEach) {
					this.each = function (arr, fn) { // legacy
						var i = 0, 
							len = arr.length;
						for (; i < len; i++) {
							if (fn.call(arr[i], arr[i], i, arr) === false) {
								return i;
							}
						}
					};
				}

				if (!Array.prototype.indexOf) {
					this.inArray = function (item, arr) {
						var len, 
							i = 0;

						if (arr) {
							len = arr.length;
							
							for (; i < len; i++) {
								if (arr[i] === item) {
									return i;
								}
							}
						}

						return -1;
					};
				}

				if (!Array.prototype.filter) {
					this.grep = function (elements, callback) {
						var ret = [],
							i = 0,
							length = elements.length;

						for (; i < length; i++) {
							if (!!callback(elements[i], i)) {
								ret.push(elements[i]);
							}
						}

						return ret;
					};
				}

				//--- End compatibility section ---


				/**
				 * Start of animation specific code
				 */
				Fx = function (elem, options, prop) {
					this.options = options;
					this.elem = elem;
					this.prop = prop;
				};
				Fx.prototype = {
					
					update: function () {
						var styles,
							paths = this.paths,
							elem = this.elem,
							elemelem = elem.element; // if destroyed, it is null

						// Animation setter defined from outside
						if (animSetters[this.prop]) {
							animSetters[this.prop](this);

						// Animating a path definition on SVGElement
						} else if (paths && elemelem) {
							elem.attr('d', pathAnim.step(paths[0], paths[1], this.now, this.toD));

						// Other animations on SVGElement
						} else if (elem.attr) {
							if (elemelem) {
								elem.attr(this.prop, this.now);
							}

						// HTML styles
						} else {
							styles = {};
							styles[this.prop] = this.now + this.unit;
							Highcharts.css(elem, styles);
						}
						
						if (this.options.step) {
							this.options.step.call(this.elem, this.now, this);
						}

					},
					custom: function (from, to, unit) {
						var self = this,
							t = function (gotoEnd) {
								return self.step(gotoEnd);
							},
							i;

						this.startTime = +new Date();
						this.start = from;
						this.end = to;
						this.unit = unit;
						this.now = this.start;
						this.pos = this.state = 0;

						t.elem = this.elem;

						if (t() && timers.push(t) === 1) {
							timerId = setInterval(function () {
								
								for (i = 0; i < timers.length; i++) {
									if (!timers[i]()) {
										timers.splice(i--, 1);
									}
								}

								if (!timers.length) {
									clearInterval(timerId);
								}
							}, 13);
						}
					},
					
					step: function (gotoEnd) {
						var t = +new Date(),
							ret,
							done,
							options = this.options,
							elem = this.elem,
							i;
						
						if (elem.stopAnimation || (elem.attr && !elem.element)) { // #2616, element including flag is destroyed
							ret = false;

						} else if (gotoEnd || t >= options.duration + this.startTime) {
							this.now = this.end;
							this.pos = this.state = 1;
							this.update();

							this.options.curAnim[this.prop] = true;

							done = true;
							for (i in options.curAnim) {
								if (options.curAnim[i] !== true) {
									done = false;
								}
							}

							if (done) {
								if (options.complete) {
									options.complete.call(elem);
								}
							}
							ret = false;

						} else {
							var n = t - this.startTime;
							this.state = n / options.duration;
							this.pos = options.easing(n, 0, 1, options.duration);
							this.now = this.start + ((this.end - this.start) * this.pos);
							this.update();
							ret = true;
						}
						return ret;
					}
				};

				/**
				 * The adapter animate method
				 */
				this.animate = function (el, prop, opt) {
					var start,
						unit = '',
						end,
						fx,
						args,
						name,
						PX = 'px';

					el.stopAnimation = false; // ready for new

					if (typeof opt !== 'object' || opt === null) {
						args = arguments;
						opt = {
							duration: args[2],
							easing: args[3],
							complete: args[4]
						};
					}
					if (typeof opt.duration !== 'number') {
						opt.duration = 400;
					}
					opt.easing = Math[opt.easing] || Math.easeInOutSine;
					opt.curAnim = Highcharts.extend({}, prop);
					
					for (name in prop) {
						fx = new Fx(el, opt, name);
						end = null;
						
						if (name === 'd') {
							fx.paths = pathAnim.init(
								el,
								el.d,
								prop.d
							);
							fx.toD = prop.d;
							start = 0;
							end = 1;
						} else if (el.attr) {
							start = el.attr(name);
						} else {
							start = parseFloat(HighchartsAdapter._getStyle(el, name)) || 0;
							if (name !== 'opacity') {
								unit = PX;
							}
						}
			
						if (!end) {
							end = prop[name];
						}
						if (end.match && end.match(PX)) {
							end = end.replace(/px/g, ''); // #4351
						}
						fx.custom(start, end, unit);
					}	
				};
			},

			/**
			 * Internal method to return CSS value for given element and property
			 */
			_getStyle: function (el, prop) {
				return window.getComputedStyle(el, undefined).getPropertyValue(prop);
			},

			/**
			 * Add an animation setter for a specific property
			 */
			addAnimSetter: function (prop, fn) {
				animSetters[prop] = fn;
			},

			/**
			 * Downloads a script and executes a callback when done.
			 * @param {String} scriptLocation
			 * @param {Function} callback
			 */
			getScript: function (scriptLocation, callback) {
				// We cannot assume that Assets class from mootools-more is available so instead insert a script tag to download script.
				var head = doc.getElementsByTagName('head')[0],
					script = doc.createElement('script');

				script.type = 'text/javascript';
				script.src = scriptLocation;
				script.onload = callback;

				head.appendChild(script);
			},

			/**
			 * Return the index of an item in an array, or -1 if not found
			 */
			inArray: function (item, arr) {
				return arr.indexOf ? arr.indexOf(item) : emptyArray.indexOf.call(arr, item);
			},


			/**
			 * A direct link to adapter methods
			 */
			adapterRun: function (elem, method) {
				return parseInt(HighchartsAdapter._getStyle(elem, method), 10);
			},

			/**
			 * Filter an array
			 */
			grep: function (elements, callback) {
				return emptyArray.filter.call(elements, callback);
			},

			/**
			 * Map an array
			 */
			map: function (arr, fn) {
				var results = [], i = 0, len = arr.length;

				for (; i < len; i++) {
					results[i] = fn.call(arr[i], arr[i], i, arr);
				}

				return results;
			},

			/**
			 * Get the element's offset position, corrected by overflow:auto. Loosely based on jQuery's offset method.
			 */
			offset: function (el) {
				var docElem = document.documentElement,
					box = el.getBoundingClientRect();

				return {
					top: box.top  + (window.pageYOffset || docElem.scrollTop)  - (docElem.clientTop  || 0),
					left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
				};
			},

			/**
			 * Add an event listener
			 */
			addEvent: function (el, type, fn) {
				augment(el).bind(type, fn);
			},

			/**
			 * Remove event added with addEvent
			 */
			removeEvent: function (el, type, fn) {
				augment(el).unbind(type, fn);
			},

			/**
			 * Fire an event on a custom object
			 */
			fireEvent: function (el, type, eventArguments, defaultFunction) {
				var e;

				if (doc.createEvent && (el.dispatchEvent || el.fireEvent)) {
					e = doc.createEvent('Events');
					e.initEvent(type, true, true);
					e.target = el;

					Highcharts.extend(e, eventArguments);

					if (el.dispatchEvent) {
						el.dispatchEvent(e);
					} else {
						el.fireEvent(type, e);
					}

				} else if (el.HCExtended === true) {
					eventArguments = eventArguments || {};
					el.trigger(type, eventArguments);
				}

				if (eventArguments && eventArguments.defaultPrevented) {
					defaultFunction = null;
				}

				if (defaultFunction) {
					defaultFunction(eventArguments);
				}
			},

			washMouseEvent: function (e) {
				return e;
			},


			/**
			 * Stop running animation
			 */
			stop: function (el) {
				el.stopAnimation = true;
			},

			/**
			 * Utility for iterating over an array. Parameters are reversed compared to jQuery.
			 * @param {Array} arr
			 * @param {Function} fn
			 */
			each: function (arr, fn) { // modern browsers
				return Array.prototype.forEach.call(arr, fn);
			}
		};
		}());


		/*** EXPORTS FROM exports-loader ***/
		module.exports = HighchartsAdapter

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		// ==ClosureCompiler==
		// @compilation_level SIMPLE_OPTIMIZATIONS

		/**
		 * @license Highstock JS v2.1.8-modified ()
		 *
		 * (c) 2009-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */

		// JSLint options:
		/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console, each, grep */
		/*jslint ass: true, sloppy: true, forin: true, plusplus: true, nomen: true, vars: true, regexp: true, newcap: true, browser: true, continue: true, white: true */
		(function () {
		// encapsulated variables
		var UNDEFINED,
			doc = document,
			win = window,
			math = Math,
			mathRound = math.round,
			mathFloor = math.floor,
			mathCeil = math.ceil,
			mathMax = math.max,
			mathMin = math.min,
			mathAbs = math.abs,
			mathCos = math.cos,
			mathSin = math.sin,
			mathPI = math.PI,
			deg2rad = mathPI * 2 / 360,


			// some variables
			userAgent = navigator.userAgent,
			isOpera = win.opera,
			isIE = /(msie|trident)/i.test(userAgent) && !isOpera,
			docMode8 = doc.documentMode === 8,
			isWebKit = /AppleWebKit/.test(userAgent),
			isFirefox = /Firefox/.test(userAgent),
			isTouchDevice = /(Mobile|Android|Windows Phone)/.test(userAgent),
			SVG_NS = 'http://www.w3.org/2000/svg',
			hasSVG = !!doc.createElementNS && !!doc.createElementNS(SVG_NS, 'svg').createSVGRect,
			hasBidiBug = isFirefox && parseInt(userAgent.split('Firefox/')[1], 10) < 4, // issue #38
			useCanVG = !hasSVG && !isIE && !!doc.createElement('canvas').getContext,
			Renderer,
			hasTouch,
			symbolSizes = {},
			idCounter = 0,
			garbageBin,
			defaultOptions,
			dateFormat, // function
			pathAnim,
			timeUnits,
			noop = function () { return UNDEFINED; },
			charts = [],
			chartCount = 0,
			PRODUCT = 'Highstock',
			VERSION = '2.1.8-modified',

			// some constants for frequently used strings
			DIV = 'div',
			ABSOLUTE = 'absolute',
			RELATIVE = 'relative',
			HIDDEN = 'hidden',
			PREFIX = 'highcharts-',
			VISIBLE = 'visible',
			PX = 'px',
			NONE = 'none',
			M = 'M',
			L = 'L',
			numRegex = /^[0-9]+$/,
			NORMAL_STATE = '',
			HOVER_STATE = 'hover',
			SELECT_STATE = 'select',
			marginNames = ['plotTop', 'marginRight', 'marginBottom', 'plotLeft'],
			
			// Object for extending Axis
			AxisPlotLineOrBandExtension,

			// constants for attributes
			STROKE_WIDTH = 'stroke-width',

			// time methods, changed based on whether or not UTC is used
			Date,  // Allow using a different Date class
			makeTime,
			timezoneOffset,
			getTimezoneOffset,
			getMinutes,
			getHours,
			getDay,
			getDate,
			getMonth,
			getFullYear,
			setMilliseconds,
			setSeconds,
			setMinutes,
			setHours,
			setDate,
			setMonth,
			setFullYear,


			// lookup over the types and the associated classes
			seriesTypes = {},
			Highcharts;

		// The Highcharts namespace
		Highcharts = win.Highcharts = win.Highcharts ? error(16, true) : {};

		Highcharts.seriesTypes = seriesTypes;

		/**
		 * Extend an object with the members of another
		 * @param {Object} a The object to be extended
		 * @param {Object} b The object to add to the first one
		 */
		var extend = Highcharts.extend = function (a, b) {
			var n;
			if (!a) {
				a = {};
			}
			for (n in b) {
				a[n] = b[n];
			}
			return a;
		};
			
		/**
		 * Deep merge two or more objects and return a third object. If the first argument is
		 * true, the contents of the second object is copied into the first object.
		 * Previously this function redirected to jQuery.extend(true), but this had two limitations.
		 * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,
		 * it copied properties from extended prototypes. 
		 */
		function merge() {
			var i,
				args = arguments,
				len,
				ret = {},
				doCopy = function (copy, original) {
					var value, key;

					// An object is replacing a primitive
					if (typeof copy !== 'object') {
						copy = {};
					}

					for (key in original) {
						if (original.hasOwnProperty(key)) {
							value = original[key];

							// Copy the contents of objects, but not arrays or DOM nodes
							if (value && typeof value === 'object' && Object.prototype.toString.call(value) !== '[object Array]' &&
									key !== 'renderTo' && typeof value.nodeType !== 'number') {
								copy[key] = doCopy(copy[key] || {}, value);
						
							// Primitives and arrays are copied over directly
							} else {
								copy[key] = original[key];
							}
						}
					}
					return copy;
				};

			// If first argument is true, copy into the existing object. Used in setOptions.
			if (args[0] === true) {
				ret = args[1];
				args = Array.prototype.slice.call(args, 2);
			}

			// For each argument, extend the return
			len = args.length;
			for (i = 0; i < len; i++) {
				ret = doCopy(ret, args[i]);
			}

			return ret;
		}

		/**
		 * Shortcut for parseInt
		 * @param {Object} s
		 * @param {Number} mag Magnitude
		 */
		function pInt(s, mag) {
			return parseInt(s, mag || 10);
		}

		/**
		 * Check for string
		 * @param {Object} s
		 */
		function isString(s) {
			return typeof s === 'string';
		}

		/**
		 * Check for object
		 * @param {Object} obj
		 */
		function isObject(obj) {
			return obj && typeof obj === 'object';
		}

		/**
		 * Check for array
		 * @param {Object} obj
		 */
		function isArray(obj) {
			return Object.prototype.toString.call(obj) === '[object Array]';
		}

		/**
		 * Check for number
		 * @param {Object} n
		 */
		function isNumber(n) {
			return typeof n === 'number';
		}

		function log2lin(num) {
			return math.log(num) / math.LN10;
		}
		function lin2log(num) {
			return math.pow(10, num);
		}

		/**
		 * Remove last occurence of an item from an array
		 * @param {Array} arr
		 * @param {Mixed} item
		 */
		function erase(arr, item) {
			var i = arr.length;
			while (i--) {
				if (arr[i] === item) {
					arr.splice(i, 1);
					break;
				}
			}
			//return arr;
		}

		/**
		 * Returns true if the object is not null or undefined. Like MooTools' $.defined.
		 * @param {Object} obj
		 */
		function defined(obj) {
			return obj !== UNDEFINED && obj !== null;
		}

		/**
		 * Set or get an attribute or an object of attributes. Can't use jQuery attr because
		 * it attempts to set expando properties on the SVG element, which is not allowed.
		 *
		 * @param {Object} elem The DOM element to receive the attribute(s)
		 * @param {String|Object} prop The property or an abject of key-value pairs
		 * @param {String} value The value if a single property is set
		 */
		function attr(elem, prop, value) {
			var key,
				ret;

			// if the prop is a string
			if (isString(prop)) {
				// set the value
				if (defined(value)) {
					elem.setAttribute(prop, value);

				// get the value
				} else if (elem && elem.getAttribute) { // elem not defined when printing pie demo...
					ret = elem.getAttribute(prop);
				}

			// else if prop is defined, it is a hash of key/value pairs
			} else if (defined(prop) && isObject(prop)) {
				for (key in prop) {
					elem.setAttribute(key, prop[key]);
				}
			}
			return ret;
		}
		/**
		 * Check if an element is an array, and if not, make it into an array. Like
		 * MooTools' $.splat.
		 */
		function splat(obj) {
			return isArray(obj) ? obj : [obj];
		}


		/**
		 * Return the first value that is defined. Like MooTools' $.pick.
		 */
		var pick = Highcharts.pick = function () {
			var args = arguments,
				i,
				arg,
				length = args.length;
			for (i = 0; i < length; i++) {
				arg = args[i];
				if (arg !== UNDEFINED && arg !== null) {
					return arg;
				}
			}
		};

		/**
		 * Set CSS on a given element
		 * @param {Object} el
		 * @param {Object} styles Style object with camel case property names
		 */
		function css(el, styles) {
			if (isIE && !hasSVG) { // #2686
				if (styles && styles.opacity !== UNDEFINED) {
					styles.filter = 'alpha(opacity=' + (styles.opacity * 100) + ')';
				}
			}
			extend(el.style, styles);
		}

		/**
		 * Utility function to create element with attributes and styles
		 * @param {Object} tag
		 * @param {Object} attribs
		 * @param {Object} styles
		 * @param {Object} parent
		 * @param {Object} nopad
		 */
		function createElement(tag, attribs, styles, parent, nopad) {
			var el = doc.createElement(tag);
			if (attribs) {
				extend(el, attribs);
			}
			if (nopad) {
				css(el, {padding: 0, border: NONE, margin: 0});
			}
			if (styles) {
				css(el, styles);
			}
			if (parent) {
				parent.appendChild(el);
			}
			return el;
		}

		/**
		 * Extend a prototyped class by new members
		 * @param {Object} parent
		 * @param {Object} members
		 */
		function extendClass(parent, members) {
			var object = function () { return UNDEFINED; };
			object.prototype = new parent();
			extend(object.prototype, members);
			return object;
		}

		/**
		 * Pad a string to a given length by adding 0 to the beginning
		 * @param {Number} number
		 * @param {Number} length
		 */
		function pad(number, length) {
			// Create an array of the remaining length +1 and join it with 0's
			return new Array((length || 2) + 1 - String(number).length).join(0) + number;
		}

		/**
		 * Return a length based on either the integer value, or a percentage of a base.
		 */
		function relativeLength (value, base) {
			return (/%$/).test(value) ? base * parseFloat(value) / 100 : parseFloat(value);
		}

		/**
		 * Wrap a method with extended functionality, preserving the original function
		 * @param {Object} obj The context object that the method belongs to 
		 * @param {String} method The name of the method to extend
		 * @param {Function} func A wrapper function callback. This function is called with the same arguments
		 * as the original function, except that the original function is unshifted and passed as the first 
		 * argument. 
		 */
		var wrap = Highcharts.wrap = function (obj, method, func) {
			var proceed = obj[method];
			obj[method] = function () {
				var args = Array.prototype.slice.call(arguments);
				args.unshift(proceed);
				return func.apply(this, args);
			};
		};


		function getTZOffset(timestamp) {
			return ((getTimezoneOffset && getTimezoneOffset(timestamp)) || timezoneOffset || 0) * 60000;
		}

		/**
		 * Based on http://www.php.net/manual/en/function.strftime.php
		 * @param {String} format
		 * @param {Number} timestamp
		 * @param {Boolean} capitalize
		 */
		dateFormat = function (format, timestamp, capitalize) {
			if (!defined(timestamp) || isNaN(timestamp)) {
				return defaultOptions.lang.invalidDate || '';
			}
			format = pick(format, '%Y-%m-%d %H:%M:%S');

			var date = new Date(timestamp - getTZOffset(timestamp)),
				key, // used in for constuct below
				// get the basic time values
				hours = date[getHours](),
				day = date[getDay](),
				dayOfMonth = date[getDate](),
				month = date[getMonth](),
				fullYear = date[getFullYear](),
				lang = defaultOptions.lang,
				langWeekdays = lang.weekdays,

				// List all format keys. Custom formats can be added from the outside. 
				replacements = extend({

					// Day
					'a': langWeekdays[day].substr(0, 3), // Short weekday, like 'Mon'
					'A': langWeekdays[day], // Long weekday, like 'Monday'
					'd': pad(dayOfMonth), // Two digit day of the month, 01 to 31
					'e': dayOfMonth, // Day of the month, 1 through 31
					'w': day,

					// Week (none implemented)
					//'W': weekNumber(),

					// Month
					'b': lang.shortMonths[month], // Short month, like 'Jan'
					'B': lang.months[month], // Long month, like 'January'
					'm': pad(month + 1), // Two digit month number, 01 through 12

					// Year
					'y': fullYear.toString().substr(2, 2), // Two digits year, like 09 for 2009
					'Y': fullYear, // Four digits year, like 2009

					// Time
					'H': pad(hours), // Two digits hours in 24h format, 00 through 23
					'k': hours, // Hours in 24h format, 0 through 23
					'I': pad((hours % 12) || 12), // Two digits hours in 12h format, 00 through 11
					'l': (hours % 12) || 12, // Hours in 12h format, 1 through 12
					'M': pad(date[getMinutes]()), // Two digits minutes, 00 through 59
					'p': hours < 12 ? 'AM' : 'PM', // Upper case AM or PM
					'P': hours < 12 ? 'am' : 'pm', // Lower case AM or PM
					'S': pad(date.getSeconds()), // Two digits seconds, 00 through  59
					'L': pad(mathRound(timestamp % 1000), 3) // Milliseconds (naming from Ruby)
				}, Highcharts.dateFormats);


			// do the replaces
			for (key in replacements) {
				while (format.indexOf('%' + key) !== -1) { // regex would do it in one line, but this is faster
					format = format.replace('%' + key, typeof replacements[key] === 'function' ? replacements[key](timestamp) : replacements[key]);
				}
			}

			// Optionally capitalize the string and return
			return capitalize ? format.substr(0, 1).toUpperCase() + format.substr(1) : format;
		};

		/** 
		 * Format a single variable. Similar to sprintf, without the % prefix.
		 */
		function formatSingle(format, val) {
			var floatRegex = /f$/,
				decRegex = /\.([0-9])/,
				lang = defaultOptions.lang,
				decimals;

			if (floatRegex.test(format)) { // float
				decimals = format.match(decRegex);
				decimals = decimals ? decimals[1] : -1;
				if (val !== null) {
					val = Highcharts.numberFormat(
						val,
						decimals,
						lang.decimalPoint,
						format.indexOf(',') > -1 ? lang.thousandsSep : ''
					);
				}
			} else {
				val = dateFormat(format, val);
			}
			return val;
		}

		/**
		 * Format a string according to a subset of the rules of Python's String.format method.
		 */
		function format(str, ctx) {
			var splitter = '{',
				isInside = false,
				segment,
				valueAndFormat,
				path,
				i,
				len,
				ret = [],
				val,
				index;
			
			while ((index = str.indexOf(splitter)) !== -1) {
				
				segment = str.slice(0, index);
				if (isInside) { // we're on the closing bracket looking back
					
					valueAndFormat = segment.split(':');
					path = valueAndFormat.shift().split('.'); // get first and leave format
					len = path.length;
					val = ctx;

					// Assign deeper paths
					for (i = 0; i < len; i++) {
						val = val[path[i]];
					}

					// Format the replacement
					if (valueAndFormat.length) {
						val = formatSingle(valueAndFormat.join(':'), val);
					}

					// Push the result and advance the cursor
					ret.push(val);
					
				} else {
					ret.push(segment);
					
				}
				str = str.slice(index + 1); // the rest
				isInside = !isInside; // toggle
				splitter = isInside ? '}' : '{'; // now look for next matching bracket
			}
			ret.push(str);
			return ret.join('');
		}

		/**
		 * Get the magnitude of a number
		 */
		function getMagnitude(num) {
			return math.pow(10, mathFloor(math.log(num) / math.LN10));
		}

		/**
		 * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5
		 * @param {Number} interval
		 * @param {Array} multiples
		 * @param {Number} magnitude
		 * @param {Object} options
		 */
		function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, preventExceed) {
			var normalized, 
				i,
				retInterval = interval;

			// round to a tenfold of 1, 2, 2.5 or 5
			magnitude = pick(magnitude, 1);
			normalized = interval / magnitude;

			// multiples for a linear scale
			if (!multiples) {
				multiples = [1, 2, 2.5, 5, 10];

				// the allowDecimals option
				if (allowDecimals === false) {
					if (magnitude === 1) {
						multiples = [1, 2, 5, 10];
					} else if (magnitude <= 0.1) {
						multiples = [1 / magnitude];
					}
				}
			}

			// normalize the interval to the nearest multiple
			for (i = 0; i < multiples.length; i++) {
				retInterval = multiples[i];
				if ((preventExceed && retInterval * magnitude >= interval) || // only allow tick amounts smaller than natural
					(!preventExceed && (normalized <= (multiples[i] + (multiples[i + 1] || multiples[i])) / 2))) {
					break;
				}
			}

			// multiply back to the correct magnitude
			retInterval *= magnitude;
			
			return retInterval;
		}


		/**
		 * Utility method that sorts an object array and keeping the order of equal items.
		 * ECMA script standard does not specify the behaviour when items are equal.
		 */
		function stableSort(arr, sortFunction) {
			var length = arr.length,
				sortValue,
				i;

			// Add index to each item
			for (i = 0; i < length; i++) {
				arr[i].ss_i = i; // stable sort index
			}

			arr.sort(function (a, b) {
				sortValue = sortFunction(a, b);
				return sortValue === 0 ? a.ss_i - b.ss_i : sortValue;
			});

			// Remove index from items
			for (i = 0; i < length; i++) {
				delete arr[i].ss_i; // stable sort index
			}
		}

		/**
		 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
		 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
		 * method is slightly slower, but safe.
		 */
		function arrayMin(data) {
			var i = data.length,
				min = data[0];

			while (i--) {
				if (data[i] < min) {
					min = data[i];
				}
			}
			return min;
		}

		/**
		 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
		 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
		 * method is slightly slower, but safe.
		 */
		function arrayMax(data) {
			var i = data.length,
				max = data[0];

			while (i--) {
				if (data[i] > max) {
					max = data[i];
				}
			}
			return max;
		}

		/**
		 * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.
		 * It loops all properties and invokes destroy if there is a destroy method. The property is
		 * then delete'ed.
		 * @param {Object} The object to destroy properties on
		 * @param {Object} Exception, do not destroy this property, only delete it.
		 */
		function destroyObjectProperties(obj, except) {
			var n;
			for (n in obj) {
				// If the object is non-null and destroy is defined
				if (obj[n] && obj[n] !== except && obj[n].destroy) {
					// Invoke the destroy
					obj[n].destroy();
				}

				// Delete the property from the object.
				delete obj[n];
			}
		}


		/**
		 * Discard an element by moving it to the bin and delete
		 * @param {Object} The HTML node to discard
		 */
		function discardElement(element) {
			// create a garbage bin element, not part of the DOM
			if (!garbageBin) {
				garbageBin = createElement(DIV);
			}

			// move the node and empty bin
			if (element) {
				garbageBin.appendChild(element);
			}
			garbageBin.innerHTML = '';
		}

		/**
		 * Provide error messages for debugging, with links to online explanation 
		 */
		function error (code, stop) {
			var msg = 'Highcharts error #' + code + ': www.highcharts.com/errors/' + code;
			if (stop) {
				throw msg;
			}
			// else ...
			if (win.console) {
				console.log(msg);
			}
		}

		/**
		 * Fix JS round off float errors
		 * @param {Number} num
		 */
		function correctFloat(num, prec) {
			return parseFloat(
				num.toPrecision(prec || 14)
			);
		}

		/**
		 * Set the global animation to either a given value, or fall back to the
		 * given chart's animation option
		 * @param {Object} animation
		 * @param {Object} chart
		 */
		function setAnimation(animation, chart) {
			chart.renderer.globalAnimation = pick(animation, chart.animation);
		}

		/**
		 * The time unit lookup
		 */
		timeUnits = {
			millisecond: 1,
			second: 1000,
			minute: 60000,
			hour: 3600000,
			day: 24 * 3600000,
			week: 7 * 24 * 3600000,
			month: 28 * 24 * 3600000,
			year: 364 * 24 * 3600000
		};


		/**
		 * Format a number and return a string based on input settings
		 * @param {Number} number The input number to format
		 * @param {Number} decimals The amount of decimals
		 * @param {String} decPoint The decimal point, defaults to the one given in the lang options
		 * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options
		 */
		Highcharts.numberFormat = function (number, decimals, decPoint, thousandsSep) {
			var lang = defaultOptions.lang,
				// http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/
				n = +number || 0,
				c = decimals === -1 ?
					mathMin((n.toString().split('.')[1] || '').length, 20) : // Preserve decimals. Not huge numbers (#3793).
					(isNaN(decimals = mathAbs(decimals)) ? 2 : decimals),
				d = decPoint === undefined ? lang.decimalPoint : decPoint,
				t = thousandsSep === undefined ? lang.thousandsSep : thousandsSep,
				s = n < 0 ? "-" : "",
				i = String(pInt(n = mathAbs(n).toFixed(c))),
				j = i.length > 3 ? i.length % 3 : 0;

			return (s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) +
					(c ? d + mathAbs(n - i).toFixed(c).slice(2) : ""));
		};
		/**
		 * Path interpolation algorithm used across adapters
		 */
		pathAnim = {
			/**
			 * Prepare start and end values so that the path can be animated one to one
			 */
			init: function (elem, fromD, toD) {
				fromD = fromD || '';
				var shift = elem.shift,
					bezier = fromD.indexOf('C') > -1,
					numParams = bezier ? 7 : 3,
					endLength,
					slice,
					i,
					start = fromD.split(' '),
					end = [].concat(toD), // copy
					startBaseLine,
					endBaseLine,
					sixify = function (arr) { // in splines make move points have six parameters like bezier curves
						i = arr.length;
						while (i--) {
							if (arr[i] === M) {
								arr.splice(i + 1, 0, arr[i + 1], arr[i + 2], arr[i + 1], arr[i + 2]);
							}
						}
					};

				if (bezier) {
					sixify(start);
					sixify(end);
				}

				// pull out the base lines before padding
				if (elem.isArea) {
					startBaseLine = start.splice(start.length - 6, 6);
					endBaseLine = end.splice(end.length - 6, 6);
				}

				// if shifting points, prepend a dummy point to the end path
				if (shift <= end.length / numParams && start.length === end.length) {
					while (shift--) {
						end = [].concat(end).splice(0, numParams).concat(end);
					}
				}
				elem.shift = 0; // reset for following animations

				// copy and append last point until the length matches the end length
				if (start.length) {
					endLength = end.length;
					while (start.length < endLength) {

						//bezier && sixify(start);
						slice = [].concat(start).splice(start.length - numParams, numParams);
						if (bezier) { // disable first control point
							slice[numParams - 6] = slice[numParams - 2];
							slice[numParams - 5] = slice[numParams - 1];
						}
						start = start.concat(slice);
					}
				}

				if (startBaseLine) { // append the base lines for areas
					start = start.concat(startBaseLine);
					end = end.concat(endBaseLine);
				}
				return [start, end];
			},

			/**
			 * Interpolate each value of the path and return the array
			 */
			step: function (start, end, pos, complete) {
				var ret = [],
					i = start.length,
					startVal;

				if (pos === 1) { // land on the final path without adjustment points appended in the ends
					ret = complete;

				} else if (i === end.length && pos < 1) {
					while (i--) {
						startVal = parseFloat(start[i]);
						ret[i] =
							isNaN(startVal) ? // a letter instruction like M or L
								start[i] :
								pos * (parseFloat(end[i] - startVal)) + startVal;

					}
				} else { // if animation is finished or length not matching, land on right value
					ret = end;
				}
				return ret;
			}
		};

		(function ($) {
			/**
			 * The default HighchartsAdapter for jQuery
			 */
			win.HighchartsAdapter = win.HighchartsAdapter || ($ && {
				
				/**
				 * Initialize the adapter by applying some extensions to jQuery
				 */
				init: function (pathAnim) {
					
					// extend the animate function to allow SVG animations
					var Fx = $.fx;
					
					/*jslint unparam: true*//* allow unused param x in this function */
					$.extend($.easing, {
						easeOutQuad: function (x, t, b, c, d) {
							return -c * (t /= d) * (t - 2) + b;
						}
					});
					/*jslint unparam: false*/
				
					// extend some methods to check for elem.attr, which means it is a Highcharts SVG object
					$.each(['cur', '_default', 'width', 'height', 'opacity'], function (i, fn) {
						var obj = Fx.step,
							base;
							
						// Handle different parent objects
						if (fn === 'cur') {
							obj = Fx.prototype; // 'cur', the getter, relates to Fx.prototype
						
						} else if (fn === '_default' && $.Tween) { // jQuery 1.8 model
							obj = $.Tween.propHooks[fn];
							fn = 'set';
						}
				
						// Overwrite the method
						base = obj[fn];
						if (base) { // step.width and step.height don't exist in jQuery < 1.7
				
							// create the extended function replacement
							obj[fn] = function (fx) {

								var elem;
								
								// Fx.prototype.cur does not use fx argument
								fx = i ? fx : this;

								// Don't run animations on textual properties like align (#1821)
								if (fx.prop === 'align') {
									return;
								}
				
								// shortcut
								elem = fx.elem;
				
								// Fx.prototype.cur returns the current value. The other ones are setters
								// and returning a value has no effect.
								return elem.attr ? // is SVG element wrapper
									elem.attr(fx.prop, fn === 'cur' ? UNDEFINED : fx.now) : // apply the SVG wrapper's method
									base.apply(this, arguments); // use jQuery's built-in method
							};
						}
					});

					// Extend the opacity getter, needed for fading opacity with IE9 and jQuery 1.10+
					wrap($.cssHooks.opacity, 'get', function (proceed, elem, computed) {
						return elem.attr ? (elem.opacity || 0) : proceed.call(this, elem, computed);
					});
					
					// Define the setter function for d (path definitions)
					this.addAnimSetter('d', function (fx) {
						var elem = fx.elem,
							ends;
				
						// Normally start and end should be set in state == 0, but sometimes,
						// for reasons unknown, this doesn't happen. Perhaps state == 0 is skipped
						// in these cases
						if (!fx.started) {
							ends = pathAnim.init(elem, elem.d, elem.toD);
							fx.start = ends[0];
							fx.end = ends[1];
							fx.started = true;
						}
				
						// Interpolate each value of the path
						elem.attr('d', pathAnim.step(fx.start, fx.end, fx.pos, elem.toD));
					});
					
					/**
					 * Utility for iterating over an array. Parameters are reversed compared to jQuery.
					 * @param {Array} arr
					 * @param {Function} fn
					 */
					this.each = Array.prototype.forEach ?
						function (arr, fn) { // modern browsers
							return Array.prototype.forEach.call(arr, fn);
							
						} : 
						function (arr, fn) { // legacy
							var i, 
								len = arr.length;
							for (i = 0; i < len; i++) {
								if (fn.call(arr[i], arr[i], i, arr) === false) {
									return i;
								}
							}
						};
					
					/**
					 * Register Highcharts as a plugin in the respective framework
					 */
					$.fn.highcharts = function () {
						var constr = 'Chart', // default constructor
							args = arguments,
							options,
							ret,
							chart;

						if (this[0]) {

							if (isString(args[0])) {
								constr = args[0];
								args = Array.prototype.slice.call(args, 1); 
							}
							options = args[0];

							// Create the chart
							if (options !== UNDEFINED) {
								/*jslint unused:false*/
								options.chart = options.chart || {};
								options.chart.renderTo = this[0];
								chart = new Highcharts[constr](options, args[1]);
								ret = this;
								/*jslint unused:true*/
							}

							// When called without parameters or with the return argument, get a predefined chart
							if (options === UNDEFINED) {
								ret = charts[attr(this[0], 'data-highcharts-chart')];
							}
						}
						
						return ret;
					};

				},

				/**
				 * Add an animation setter for a specific property
				 */
				addAnimSetter: function (prop, setter) {
					// jQuery 1.8 style
					if ($.Tween) {
						$.Tween.propHooks[prop] = {
							set: setter
						};
					// pre 1.8
					} else {
						$.fx.step[prop] = setter;
					}
				},
				
				/**
				 * Downloads a script and executes a callback when done.
				 * @param {String} scriptLocation
				 * @param {Function} callback
				 */
				getScript: $.getScript,
				
				/**
				 * Return the index of an item in an array, or -1 if not found
				 */
				inArray: $.inArray,
				
				/**
				 * A direct link to jQuery methods. MooTools and Prototype adapters must be implemented for each case of method.
				 * @param {Object} elem The HTML element
				 * @param {String} method Which method to run on the wrapped element
				 */
				adapterRun: function (elem, method) {
					return $(elem)[method]();
				},
			
				/**
				 * Filter an array
				 */
				grep: $.grep,
			
				/**
				 * Map an array
				 * @param {Array} arr
				 * @param {Function} fn
				 */
				map: function (arr, fn) {
					//return jQuery.map(arr, fn);
					var results = [],
						i = 0,
						len = arr.length;
					for (; i < len; i++) {
						results[i] = fn.call(arr[i], arr[i], i, arr);
					}
					return results;
			
				},
			
				/**
				 * Get the position of an element relative to the top left of the page
				 */
				offset: function (el) {
					return $(el).offset();
				},
			
				/**
				 * Add an event listener
				 * @param {Object} el A HTML element or custom object
				 * @param {String} event The event type
				 * @param {Function} fn The event handler
				 */
				addEvent: function (el, event, fn) {
					$(el).bind(event, fn);
				},
			
				/**
				 * Remove event added with addEvent
				 * @param {Object} el The object
				 * @param {String} eventType The event type. Leave blank to remove all events.
				 * @param {Function} handler The function to remove
				 */
				removeEvent: function (el, eventType, handler) {
					// workaround for jQuery issue with unbinding custom events:
					// http://forum.jQuery.com/topic/javascript-error-when-unbinding-a-custom-event-using-jQuery-1-4-2
					var func = doc.removeEventListener ? 'removeEventListener' : 'detachEvent';
					if (doc[func] && el && !el[func]) {
						el[func] = function () {};
					}
			
					$(el).unbind(eventType, handler);
				},
			
				/**
				 * Fire an event on a custom object
				 * @param {Object} el
				 * @param {String} type
				 * @param {Object} eventArguments
				 * @param {Function} defaultFunction
				 */
				fireEvent: function (el, type, eventArguments, defaultFunction) {
					var event = $.Event(type),
						detachedType = 'detached' + type,
						defaultPrevented;
			
					// Remove warnings in Chrome when accessing returnValue (#2790), layerX and layerY. Although Highcharts
					// never uses these properties, Chrome includes them in the default click event and
					// raises the warning when they are copied over in the extend statement below.
					//
					// To avoid problems in IE (see #1010) where we cannot delete the properties and avoid
					// testing if they are there (warning in chrome) the only option is to test if running IE.
					if (!isIE && eventArguments) {
						delete eventArguments.layerX;
						delete eventArguments.layerY;
						delete eventArguments.returnValue;
					}
			
					extend(event, eventArguments);
			
					// Prevent jQuery from triggering the object method that is named the
					// same as the event. For example, if the event is 'select', jQuery
					// attempts calling el.select and it goes into a loop.
					if (el[type]) {
						el[detachedType] = el[type];
						el[type] = null;
					}
			
					// Wrap preventDefault and stopPropagation in try/catch blocks in
					// order to prevent JS errors when cancelling events on non-DOM
					// objects. #615.
					/*jslint unparam: true*/
					$.each(['preventDefault', 'stopPropagation'], function (i, fn) {
						var base = event[fn];
						event[fn] = function () {
							try {
								base.call(event);
							} catch (e) {
								if (fn === 'preventDefault') {
									defaultPrevented = true;
								}
							}
						};
					});
					/*jslint unparam: false*/
			
					// trigger it
					$(el).trigger(event);
			
					// attach the method
					if (el[detachedType]) {
						el[type] = el[detachedType];
						el[detachedType] = null;
					}
			
					if (defaultFunction && !event.isDefaultPrevented() && !defaultPrevented) {
						defaultFunction(event);
					}
				},
				
				/**
				 * Extension method needed for MooTools
				 */
				washMouseEvent: function (e) {
					var ret = e.originalEvent || e;
					
					// computed by jQuery, needed by IE8
					if (ret.pageX === UNDEFINED) { // #1236
						ret.pageX = e.pageX;
						ret.pageY = e.pageY;
					}
					
					return ret;
				},
			
				/**
				 * Animate a HTML element or SVG element wrapper
				 * @param {Object} el
				 * @param {Object} params
				 * @param {Object} options jQuery-like animation options: duration, easing, callback
				 */
				animate: function (el, params, options) {
					var $el = $(el);
					if (!el.style) {
						el.style = {}; // #1881
					}
					if (params.d) {
						el.toD = params.d; // keep the array form for paths, used in $.fx.step.d
						params.d = 1; // because in jQuery, animating to an array has a different meaning
					}
			
					$el.stop();
					if (params.opacity !== UNDEFINED && el.attr) {
						params.opacity += 'px'; // force jQuery to use same logic as width and height (#2161)
					}
					el.hasAnim = 1; // #3342
					$el.animate(params, options);
			
				},
				/**
				 * Stop running animation
				 */
				stop: function (el) {
					if (el.hasAnim) { // #3342, memory leak on calling $(el) from destroy
						$(el).stop();
					}
				}
			});
		}(win.jQuery));


		// check for a custom HighchartsAdapter defined prior to this file
		var globalAdapter = win.HighchartsAdapter,
			adapter = globalAdapter || {};
			
		// Initialize the adapter
		if (globalAdapter) {
			globalAdapter.init.call(globalAdapter, pathAnim);
		}


		// Utility functions. If the HighchartsAdapter is not defined, adapter is an empty object
		// and all the utility functions will be null. In that case they are populated by the
		// default adapters below.
		var adapterRun = adapter.adapterRun,
			getScript = adapter.getScript,
			inArray = adapter.inArray,
			each = Highcharts.each = adapter.each,
			grep = adapter.grep,
			offset = adapter.offset,
			map = adapter.map,
			addEvent = adapter.addEvent,
			removeEvent = adapter.removeEvent,
			fireEvent = adapter.fireEvent,
			washMouseEvent = adapter.washMouseEvent,
			animate = adapter.animate,
			stop = adapter.stop;



		/* ****************************************************************************
		 * Handle the options                                                         *
		 *****************************************************************************/
		defaultOptions = {
			colors: ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', 
				    '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],
			symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],
			lang: {
				loading: 'Loading...',
				months: ['January', 'February', 'March', 'April', 'May', 'June', 'July',
						'August', 'September', 'October', 'November', 'December'],
				shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
				weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
				// invalidDate: '',
				decimalPoint: '.',
				numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'], // SI prefixes used in axis labels
				resetZoom: 'Reset zoom',
				resetZoomTitle: 'Reset zoom level 1:1',
				thousandsSep: ' '
			},
			global: {
				useUTC: true,
				//timezoneOffset: 0,
				canvasToolsURL: 'http://code.highcharts.com/stock/2.1.8-modified/modules/canvas-tools.js',
				VMLRadialGradientURL: 'http://code.highcharts.com/stock/2.1.8-modified/gfx/vml-radial-gradient.png'
			},
			chart: {
				//animation: true,
				//alignTicks: false,
				//reflow: true,
				//className: null,
				//events: { load, selection },
				//margin: [null],
				//marginTop: null,
				//marginRight: null,
				//marginBottom: null,
				//marginLeft: null,
				borderColor: '#4572A7',
				//borderWidth: 0,
				borderRadius: 0,
				defaultSeriesType: 'line',
				ignoreHiddenSeries: true,
				//inverted: false,
				//shadow: false,
				spacing: [10, 10, 15, 10],
				//spacingTop: 10,
				//spacingRight: 10,
				//spacingBottom: 15,
				//spacingLeft: 10,
				//style: {
				//	fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font
				//	fontSize: '12px'
				//},
				backgroundColor: '#FFFFFF',
				//plotBackgroundColor: null,
				plotBorderColor: '#C0C0C0',
				//plotBorderWidth: 0,
				//plotShadow: false,
				//zoomType: ''
				resetZoomButton: {
					theme: {
						zIndex: 20
					},
					position: {
						align: 'right',
						x: -10,
						//verticalAlign: 'top',
						y: 10
					}
					// relativeTo: 'plot'
				}
			},
			title: {
				text: 'Chart title',
				align: 'center',
				// floating: false,
				margin: 15,
				// x: 0,
				// verticalAlign: 'top',
				// y: null,
				style: {
					color: '#333333',
					fontSize: '18px'
				}

			},
			subtitle: {
				text: '',
				align: 'center',
				// floating: false
				// x: 0,
				// verticalAlign: 'top',
				// y: null,
				style: {
					color: '#555555'
				}
			},

			plotOptions: {
				line: { // base series options
					allowPointSelect: false,
					showCheckbox: false,
					animation: {
						duration: 1000
					},
					//connectNulls: false,
					//cursor: 'default',
					//clip: true,
					//dashStyle: null,
					//enableMouseTracking: true,
					events: {},
					//legendIndex: 0,
					//linecap: 'round',
					lineWidth: 2,
					//shadow: false,
					// stacking: null,
					marker: {
						//enabled: true,
						//symbol: null,
						lineWidth: 0,
						radius: 4,
						lineColor: '#FFFFFF',
						//fillColor: null,
						states: { // states for a single point
							hover: {
								enabled: true,
								lineWidthPlus: 1,
								radiusPlus: 2
							},
							select: {
								fillColor: '#FFFFFF',
								lineColor: '#000000',
								lineWidth: 2
							}
						}
					},
					point: {
						events: {}
					},
					dataLabels: {
						align: 'center',
						// defer: true,
						// enabled: false,
						formatter: function () {
							return this.y === null ? '' : Highcharts.numberFormat(this.y, -1);
						},
						style: {
							color: 'contrast',
							fontSize: '11px',
							fontWeight: 'bold',
							textShadow: '0 0 6px contrast, 0 0 3px contrast'
						},
						verticalAlign: 'bottom', // above singular point
						x: 0,
						y: 0,
						// backgroundColor: undefined,
						// borderColor: undefined,
						// borderRadius: undefined,
						// borderWidth: undefined,
						padding: 5
						// shadow: false
					},
					cropThreshold: 300, // draw points outside the plot area when the number of points is less than this
					pointRange: 0,
					//pointStart: 0,
					//pointInterval: 1,
					//showInLegend: null, // auto: true for standalone series, false for linked series
					states: { // states for the entire series
						hover: {
							//enabled: false,
							lineWidthPlus: 1,
							marker: {
								// lineWidth: base + 1,
								// radius: base + 1
							},
							halo: {
								size: 10,
								opacity: 0.25
							}
						},
						select: {
							marker: {}
						}
					},
					stickyTracking: true,
					//tooltip: {
						//pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b>'
						//valueDecimals: null,
						//xDateFormat: '%A, %b %e, %Y',
						//valuePrefix: '',
						//ySuffix: ''				
					//}
					turboThreshold: 1000
					// zIndex: null
				}
			},
			labels: {
				//items: [],
				style: {
					//font: defaultFont,
					position: ABSOLUTE,
					color: '#3E576F'
				}
			},
			legend: {
				enabled: true,
				align: 'center',
				//floating: false,
				layout: 'horizontal',
				labelFormatter: function () {
					return this.name;
				},
				//borderWidth: 0,
				borderColor: '#909090',
				borderRadius: 0,
				navigation: {
					// animation: true,
					activeColor: '#274b6d',
					// arrowSize: 12
					inactiveColor: '#CCC'
					// style: {} // text styles
				},
				// margin: 20,
				// reversed: false,
				shadow: false,
				// backgroundColor: null,
				/*style: {
					padding: '5px'
				},*/
				itemStyle: {			
					color: '#333333',
					fontSize: '12px',
					fontWeight: 'bold'
				},
				itemHoverStyle: {
					//cursor: 'pointer', removed as of #601
					color: '#000'
				},
				itemHiddenStyle: {
					color: '#CCC'
				},
				itemCheckboxStyle: {
					position: ABSOLUTE,
					width: '13px', // for IE precision
					height: '13px'
				},
				// itemWidth: undefined,
				// symbolRadius: 0,
				// symbolWidth: 16,
				symbolPadding: 5,
				verticalAlign: 'bottom',
				// width: undefined,
				x: 0,
				y: 0,
				title: {
					//text: null,
					style: {
						fontWeight: 'bold'
					}
				}			
			},

			loading: {
				// hideDuration: 100,
				labelStyle: {
					fontWeight: 'bold',
					position: RELATIVE,
					top: '45%'
				},
				// showDuration: 0,
				style: {
					position: ABSOLUTE,
					backgroundColor: 'white',
					opacity: 0.5,
					textAlign: 'center'
				}
			},

			tooltip: {
				enabled: true,
				animation: hasSVG,
				//crosshairs: null,
				backgroundColor: 'rgba(249, 249, 249, .85)',
				borderWidth: 1,
				borderRadius: 3,
				dateTimeLabelFormats: { 
					millisecond: '%A, %b %e, %H:%M:%S.%L',
					second: '%A, %b %e, %H:%M:%S',
					minute: '%A, %b %e, %H:%M',
					hour: '%A, %b %e, %H:%M',
					day: '%A, %b %e, %Y',
					week: 'Week from %A, %b %e, %Y',
					month: '%B %Y',
					year: '%Y'
				},
				footerFormat: '',
				//formatter: defaultFormatter,
				headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',
				pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',
				shadow: true,
				//shape: 'callout',
				//shared: false,
				snap: isTouchDevice ? 25 : 10,
				style: {
					color: '#333333',
					cursor: 'default',
					fontSize: '12px',
					padding: '8px',
					whiteSpace: 'nowrap'
				}
				//xDateFormat: '%A, %b %e, %Y',
				//valueDecimals: null,
				//valuePrefix: '',
				//valueSuffix: ''
			},

			credits: {
				enabled: true,
				text: 'Highcharts.com',
				href: 'http://www.highcharts.com',
				position: {
					align: 'right',
					x: -10,
					verticalAlign: 'bottom',
					y: -5
				},
				style: {
					cursor: 'pointer',
					color: '#909090',
					fontSize: '9px'
				}
			}
		};




		// Series defaults
		var defaultPlotOptions = defaultOptions.plotOptions,
			defaultSeriesOptions = defaultPlotOptions.line;

		// set the default time methods
		setTimeMethods();



		/**
		 * Set the time methods globally based on the useUTC option. Time method can be either
		 * local time or UTC (default).
		 */
		function setTimeMethods() {
			var globalOptions = defaultOptions.global,
				useUTC = globalOptions.useUTC,
				GET = useUTC ? 'getUTC' : 'get',
				SET = useUTC ? 'setUTC' : 'set';


			Date = globalOptions.Date || window.Date;
			timezoneOffset = useUTC && globalOptions.timezoneOffset;
			getTimezoneOffset = useUTC && globalOptions.getTimezoneOffset;
			makeTime = function (year, month, date, hours, minutes, seconds) {
				var d;
				if (useUTC) {
					d = Date.UTC.apply(0, arguments);
					d += getTZOffset(d);
				} else {
					d = new Date(
						year,
						month,
						pick(date, 1),
						pick(hours, 0),
						pick(minutes, 0),
						pick(seconds, 0)
					).getTime();
				}
				return d;
			};
			getMinutes =      GET + 'Minutes';
			getHours =        GET + 'Hours';
			getDay =          GET + 'Day';
			getDate =         GET + 'Date';
			getMonth =        GET + 'Month';
			getFullYear =     GET + 'FullYear';
			setMilliseconds = SET + 'Milliseconds';
			setSeconds =      SET + 'Seconds';
			setMinutes =      SET + 'Minutes';
			setHours =        SET + 'Hours';
			setDate =         SET + 'Date';
			setMonth =        SET + 'Month';
			setFullYear =     SET + 'FullYear';

		}

		/**
		 * Merge the default options with custom options and return the new options structure
		 * @param {Object} options The new custom options
		 */
		function setOptions(options) {
			
			// Copy in the default options
			defaultOptions = merge(true, defaultOptions, options);
			
			// Apply UTC
			setTimeMethods();

			return defaultOptions;
		}

		/**
		 * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
		 * wasn't enough because the setOptions method created a new object.
		 */
		function getOptions() {
			return defaultOptions;
		}


		/**
		 * Handle color operations. The object methods are chainable.
		 * @param {String} input The input color in either rbga or hex format
		 */
		var rgbaRegEx = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,
			hexRegEx = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
			rgbRegEx = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/;

		var Color = function (input) {
			// declare variables
			var rgba = [], result, stops;

			/**
			 * Parse the input color to rgba array
			 * @param {String} input
			 */
			function init(input) {

				// Gradients
				if (input && input.stops) {
					stops = map(input.stops, function (stop) {
						return Color(stop[1]);
					});

				// Solid colors
				} else {
					// rgba
					result = rgbaRegEx.exec(input);
					if (result) {
						rgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), parseFloat(result[4], 10)];
					} else { 
						// hex
						result = hexRegEx.exec(input);
						if (result) {
							rgba = [pInt(result[1], 16), pInt(result[2], 16), pInt(result[3], 16), 1];
						} else {
							// rgb
							result = rgbRegEx.exec(input);
							if (result) {
								rgba = [pInt(result[1]), pInt(result[2]), pInt(result[3]), 1];
							}
						}
					}
				}		

			}
			/**
			 * Return the color a specified format
			 * @param {String} format
			 */
			function get(format) {
				var ret;

				if (stops) {
					ret = merge(input);
					ret.stops = [].concat(ret.stops);
					each(stops, function (stop, i) {
						ret.stops[i] = [ret.stops[i][0], stop.get(format)];
					});

				// it's NaN if gradient colors on a column chart
				} else if (rgba && !isNaN(rgba[0])) {
					if (format === 'rgb') {
						ret = 'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')';
					} else if (format === 'a') {
						ret = rgba[3];
					} else {
						ret = 'rgba(' + rgba.join(',') + ')';
					}
				} else {
					ret = input;
				}
				return ret;
			}

			/**
			 * Brighten the color
			 * @param {Number} alpha
			 */
			function brighten(alpha) {
				if (stops) {
					each(stops, function (stop) {
						stop.brighten(alpha);
					});
				
				} else if (isNumber(alpha) && alpha !== 0) {
					var i;
					for (i = 0; i < 3; i++) {
						rgba[i] += pInt(alpha * 255);

						if (rgba[i] < 0) {
							rgba[i] = 0;
						}
						if (rgba[i] > 255) {
							rgba[i] = 255;
						}
					}
				}
				return this;
			}
			/**
			 * Set the color's opacity to a given alpha value
			 * @param {Number} alpha
			 */
			function setOpacity(alpha) {
				rgba[3] = alpha;
				return this;
			}

			// initialize: parse the input
			init(input);

			// public methods
			return {
				get: get,
				brighten: brighten,
				rgba: rgba,
				setOpacity: setOpacity,
				raw: input
			};
		};


		/**
		 * A wrapper object for SVG elements
		 */
		function SVGElement() {}

		SVGElement.prototype = {
			
			// Default base for animation
			opacity: 1,
			// For labels, these CSS properties are applied to the <text> node directly
			textProps: ['fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'color', 
				'lineHeight', 'width', 'textDecoration', 'textOverflow', 'textShadow'],
			
			/**
			 * Initialize the SVG renderer
			 * @param {Object} renderer
			 * @param {String} nodeName
			 */
			init: function (renderer, nodeName) {
				var wrapper = this;
				wrapper.element = nodeName === 'span' ?
					createElement(nodeName) :
					doc.createElementNS(SVG_NS, nodeName);
				wrapper.renderer = renderer;
			},
			
			/**
			 * Animate a given attribute
			 * @param {Object} params
			 * @param {Number} options The same options as in jQuery animation
			 * @param {Function} complete Function to perform at the end of animation
			 */
			animate: function (params, options, complete) {
				var animOptions = pick(options, this.renderer.globalAnimation, true);
				stop(this); // stop regardless of animation actually running, or reverting to .attr (#607)
				if (animOptions) {
					animOptions = merge(animOptions, {}); //#2625
					if (complete) { // allows using a callback with the global animation without overwriting it
						animOptions.complete = complete;
					}
					animate(this, params, animOptions);
				} else {
					this.attr(params, null, complete);
				}
				return this;
			},

			/**
			 * Build an SVG gradient out of a common JavaScript configuration object
			 */
			colorGradient: function (color, prop, elem) {
				var renderer = this.renderer,
					colorObject,
					gradName,
					gradAttr,
					gradients,
					gradientObject,
					stops,
					stopColor,
					stopOpacity,
					radialReference,
					n,
					id,
					key = [];

				// Apply linear or radial gradients
				if (color.linearGradient) {
					gradName = 'linearGradient';
				} else if (color.radialGradient) {
					gradName = 'radialGradient';
				}

				if (gradName) {
					gradAttr = color[gradName];
					gradients = renderer.gradients;
					stops = color.stops;
					radialReference = elem.radialReference;

					// Keep < 2.2 kompatibility
					if (isArray(gradAttr)) {
						color[gradName] = gradAttr = {
							x1: gradAttr[0],
							y1: gradAttr[1],
							x2: gradAttr[2],
							y2: gradAttr[3],
							gradientUnits: 'userSpaceOnUse'
						};
					}

					// Correct the radial gradient for the radial reference system
					if (gradName === 'radialGradient' && radialReference && !defined(gradAttr.gradientUnits)) {
						gradAttr = merge(gradAttr, {
							cx: (radialReference[0] - radialReference[2] / 2) + gradAttr.cx * radialReference[2],
							cy: (radialReference[1] - radialReference[2] / 2) + gradAttr.cy * radialReference[2],
							r: gradAttr.r * radialReference[2],
							gradientUnits: 'userSpaceOnUse'
						});
					}

					// Build the unique key to detect whether we need to create a new element (#1282)
					for (n in gradAttr) {
						if (n !== 'id') {
							key.push(n, gradAttr[n]);
						}
					}
					for (n in stops) {
						key.push(stops[n]);
					}
					key = key.join(',');

					// Check if a gradient object with the same config object is created within this renderer
					if (gradients[key]) {
						id = gradients[key].attr('id');

					} else {

						// Set the id and create the element
						gradAttr.id = id = PREFIX + idCounter++;
						gradients[key] = gradientObject = renderer.createElement(gradName)
							.attr(gradAttr)
							.add(renderer.defs);


						// The gradient needs to keep a list of stops to be able to destroy them
						gradientObject.stops = [];
						each(stops, function (stop) {
							var stopObject;
							if (stop[1].indexOf('rgba') === 0) {
								colorObject = Color(stop[1]);
								stopColor = colorObject.get('rgb');
								stopOpacity = colorObject.get('a');
							} else {
								stopColor = stop[1];
								stopOpacity = 1;
							}
							stopObject = renderer.createElement('stop').attr({
								offset: stop[0],
								'stop-color': stopColor,
								'stop-opacity': stopOpacity
							}).add(gradientObject);

							// Add the stop element to the gradient
							gradientObject.stops.push(stopObject);
						});
					}

					// Set the reference to the gradient object
					elem.setAttribute(prop, 'url(' + renderer.url + '#' + id + ')');
				} 
			},

			/**
			 * Apply a polyfill to the text-stroke CSS property, by copying the text element
			 * and apply strokes to the copy.
			 *
			 * Contrast checks at http://jsfiddle.net/highcharts/43soe9m1/2/
			 *
			 * docs: update default, document the polyfill and the limitations on hex colors and pixel values, document contrast pseudo-color
			 */
			applyTextShadow: function (textShadow) {
				var elem = this.element,
					tspans,
					hasContrast = textShadow.indexOf('contrast') !== -1,
					styles = {},
					// IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check
					// this again with new IE release. In exports, the rendering is passed to PhantomJS. 
					supports = this.renderer.forExport || (elem.style.textShadow !== UNDEFINED && !isIE);

				// When the text shadow is set to contrast, use dark stroke for light text and vice versa
				if (hasContrast) {
					styles.textShadow = textShadow = textShadow.replace(/contrast/g, this.renderer.getContrast(elem.style.fill));
				}

				// Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,
				// it removes the text shadows.
				if (isWebKit) {
					styles.textRendering = 'geometricPrecision';
				}

				/* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)
				if (elem.textContent.indexOf('2.') === 0) {
					elem.style['text-shadow'] = 'none';
					supports = false;
				}
				// */

				// No reason to polyfill, we've got native support
				if (supports) {
					css(elem, styles); // Apply altered textShadow or textRendering workaround
				} else {

					this.fakeTS = true; // Fake text shadow

					// In order to get the right y position of the clones, 
					// copy over the y setter
					this.ySetter = this.xSetter;

					tspans = [].slice.call(elem.getElementsByTagName('tspan'));
					each(textShadow.split(/\s?,\s?/g), function (textShadow) {
						var firstChild = elem.firstChild,
							color,
							strokeWidth;
						
						textShadow = textShadow.split(' ');
						color = textShadow[textShadow.length - 1];

						// Approximately tune the settings to the text-shadow behaviour
						strokeWidth = textShadow[textShadow.length - 2];

						if (strokeWidth) {
							each(tspans, function (tspan, y) {
								var clone;

								// Let the first line start at the correct X position
								if (y === 0) {
									tspan.setAttribute('x', elem.getAttribute('x'));
									y = elem.getAttribute('y');
									tspan.setAttribute('y', y || 0);
									if (y === null) {
										elem.setAttribute('y', 0);
									}
								}

								// Create the clone and apply shadow properties
								clone = tspan.cloneNode(1);
								attr(clone, {
									'class': PREFIX + 'text-shadow',
									'fill': color,
									'stroke': color,
									'stroke-opacity': 1 / mathMax(pInt(strokeWidth), 3),
									'stroke-width': strokeWidth,
									'stroke-linejoin': 'round'
								});
								elem.insertBefore(clone, firstChild);
							});
						}
					});
				}
			},

			/**
			 * Set or get a given attribute
			 * @param {Object|String} hash
			 * @param {Mixed|Undefined} val
			 */
			attr: function (hash, val, complete) {
				var key,
					value,
					element = this.element,
					hasSetSymbolSize,
					ret = this,
					skipAttr;

				// single key-value pair
				if (typeof hash === 'string' && val !== UNDEFINED) {
					key = hash;
					hash = {};
					hash[key] = val;
				}

				// used as a getter: first argument is a string, second is undefined
				if (typeof hash === 'string') {
					ret = (this[hash + 'Getter'] || this._defaultGetter).call(this, hash, element);
				
				// setter
				} else {

					for (key in hash) {
						value = hash[key];
						skipAttr = false;



						if (this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)) {
							if (!hasSetSymbolSize) {
								this.symbolAttr(hash);
								hasSetSymbolSize = true;
							}
							skipAttr = true;
						}

						if (this.rotation && (key === 'x' || key === 'y')) {
							this.doTransform = true;
						}
						
						if (!skipAttr) {
							(this[key + 'Setter'] || this._defaultSetter).call(this, value, key, element);
						}

						// Let the shadow follow the main element
						if (this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)) {
							this.updateShadows(key, value);
						}
					}

					// Update transform. Do this outside the loop to prevent redundant updating for batch setting
					// of attributes.
					if (this.doTransform) {
						this.updateTransform();
						this.doTransform = false;
					}

				}

				// In accordance with animate, run a complete callback
				if (complete) {
					complete();
				}

				return ret;
			},

			updateShadows: function (key, value) {
				var shadows = this.shadows,
					i = shadows.length;
				while (i--) {
					shadows[i].setAttribute(
						key,
						key === 'height' ?
							mathMax(value - (shadows[i].cutHeight || 0), 0) :
							key === 'd' ? this.d : value
					);
				}
			},

			/**
			 * Add a class name to an element
			 */
			addClass: function (className) {
				var element = this.element,
					currentClassName = attr(element, 'class') || '';

				if (currentClassName.indexOf(className) === -1) {
					attr(element, 'class', currentClassName + ' ' + className);
				}
				return this;
			},
			/* hasClass and removeClass are not (yet) needed
			hasClass: function (className) {
				return attr(this.element, 'class').indexOf(className) !== -1;
			},
			removeClass: function (className) {
				attr(this.element, 'class', attr(this.element, 'class').replace(className, ''));
				return this;
			},
			*/

			/**
			 * If one of the symbol size affecting parameters are changed,
			 * check all the others only once for each call to an element's
			 * .attr() method
			 * @param {Object} hash
			 */
			symbolAttr: function (hash) {
				var wrapper = this;

				each(['x', 'y', 'r', 'start', 'end', 'width', 'height', 'innerR', 'anchorX', 'anchorY'], function (key) {
					wrapper[key] = pick(hash[key], wrapper[key]);
				});

				wrapper.attr({
					d: wrapper.renderer.symbols[wrapper.symbolName](
						wrapper.x,
						wrapper.y,
						wrapper.width,
						wrapper.height,
						wrapper
					)
				});
			},

			/**
			 * Apply a clipping path to this object
			 * @param {String} id
			 */
			clip: function (clipRect) {
				return this.attr('clip-path', clipRect ? 'url(' + this.renderer.url + '#' + clipRect.id + ')' : NONE);
			},

			/**
			 * Calculate the coordinates needed for drawing a rectangle crisply and return the
			 * calculated attributes
			 * @param {Number} strokeWidth
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			crisp: function (rect) {

				var wrapper = this,
					key,
					attribs = {},
					normalizer,
					strokeWidth = rect.strokeWidth || wrapper.strokeWidth || 0;

				normalizer = mathRound(strokeWidth) % 2 / 2; // mathRound because strokeWidth can sometimes have roundoff errors

				// normalize for crisp edges
				rect.x = mathFloor(rect.x || wrapper.x || 0) + normalizer;
				rect.y = mathFloor(rect.y || wrapper.y || 0) + normalizer;
				rect.width = mathFloor((rect.width || wrapper.width || 0) - 2 * normalizer);
				rect.height = mathFloor((rect.height || wrapper.height || 0) - 2 * normalizer);
				rect.strokeWidth = strokeWidth;

				for (key in rect) {
					if (wrapper[key] !== rect[key]) { // only set attribute if changed
						wrapper[key] = attribs[key] = rect[key];
					}
				}

				return attribs;
			},

			/**
			 * Set styles for the element
			 * @param {Object} styles
			 */
			css: function (styles) {
				var elemWrapper = this,
					oldStyles = elemWrapper.styles,
					newStyles = {},
					elem = elemWrapper.element,
					textWidth,
					n,
					serializedCss = '',
					hyphenate,
					hasNew = !oldStyles;

				// convert legacy
				if (styles && styles.color) {
					styles.fill = styles.color;
				}

				// Filter out existing styles to increase performance (#2640)
				if (oldStyles) {
					for (n in styles) {
						if (styles[n] !== oldStyles[n]) {
							newStyles[n] = styles[n];
							hasNew = true;
						}
					}
				}
				if (hasNew) {
					textWidth = elemWrapper.textWidth = 
						(styles && styles.width && elem.nodeName.toLowerCase() === 'text' && pInt(styles.width)) || 
						elemWrapper.textWidth; // #3501

					// Merge the new styles with the old ones
					if (oldStyles) {
						styles = extend(
							oldStyles,
							newStyles
						);
					}		

					// store object
					elemWrapper.styles = styles;

					if (textWidth && (useCanVG || (!hasSVG && elemWrapper.renderer.forExport))) {
						delete styles.width;
					}

					// serialize and set style attribute
					if (isIE && !hasSVG) {
						css(elemWrapper.element, styles);
					} else {
						/*jslint unparam: true*/
						hyphenate = function (a, b) { return '-' + b.toLowerCase(); };
						/*jslint unparam: false*/
						for (n in styles) {
							serializedCss += n.replace(/([A-Z])/g, hyphenate) + ':' + styles[n] + ';';
						}
						attr(elem, 'style', serializedCss); // #1881
					}


					// re-build text
					if (textWidth && elemWrapper.added) {
						elemWrapper.renderer.buildText(elemWrapper);
					}
				}

				return elemWrapper;
			},

			/**
			 * Add an event listener
			 * @param {String} eventType
			 * @param {Function} handler
			 */
			on: function (eventType, handler) {
				var svgElement = this,
					element = svgElement.element;
				
				// touch
				if (hasTouch && eventType === 'click') {
					element.ontouchstart = function (e) {			
						svgElement.touchEventFired = Date.now();				
						e.preventDefault();
						handler.call(element, e);
					};
					element.onclick = function (e) {												
						if (userAgent.indexOf('Android') === -1 || Date.now() - (svgElement.touchEventFired || 0) > 1100) { // #2269
							handler.call(element, e);
						}
					};			
				} else {
					// simplest possible event model for internal use
					element['on' + eventType] = handler;
				}
				return this;
			},

			/**
			 * Set the coordinates needed to draw a consistent radial gradient across
			 * pie slices regardless of positioning inside the chart. The format is
			 * [centerX, centerY, diameter] in pixels.
			 */
			setRadialReference: function (coordinates) {
				this.element.radialReference = coordinates;
				return this;
			},

			/**
			 * Move an object and its children by x and y values
			 * @param {Number} x
			 * @param {Number} y
			 */
			translate: function (x, y) {
				return this.attr({
					translateX: x,
					translateY: y
				});
			},

			/**
			 * Invert a group, rotate and flip
			 */
			invert: function () {
				var wrapper = this;
				wrapper.inverted = true;
				wrapper.updateTransform();
				return wrapper;
			},

			/**
			 * Private method to update the transform attribute based on internal
			 * properties
			 */
			updateTransform: function () {
				var wrapper = this,
					translateX = wrapper.translateX || 0,
					translateY = wrapper.translateY || 0,
					scaleX = wrapper.scaleX,
					scaleY = wrapper.scaleY,
					inverted = wrapper.inverted,
					rotation = wrapper.rotation,
					element = wrapper.element,
					transform;

				// flipping affects translate as adjustment for flipping around the group's axis
				if (inverted) {
					translateX += wrapper.attr('width');
					translateY += wrapper.attr('height');
				}

				// Apply translate. Nearly all transformed elements have translation, so instead
				// of checking for translate = 0, do it always (#1767, #1846).
				transform = ['translate(' + translateX + ',' + translateY + ')'];

				// apply rotation
				if (inverted) {
					transform.push('rotate(90) scale(-1,1)');
				} else if (rotation) { // text rotation
					transform.push('rotate(' + rotation + ' ' + (element.getAttribute('x') || 0) + ' ' + (element.getAttribute('y') || 0) + ')');
					
					// Delete bBox memo when the rotation changes
					//delete wrapper.bBox;
				}

				// apply scale
				if (defined(scaleX) || defined(scaleY)) {
					transform.push('scale(' + pick(scaleX, 1) + ' ' + pick(scaleY, 1) + ')');
				}

				if (transform.length) {
					element.setAttribute('transform', transform.join(' '));
				}
			},
			/**
			 * Bring the element to the front
			 */
			toFront: function () {
				var element = this.element;
				element.parentNode.appendChild(element);
				return this;
			},


			/**
			 * Break down alignment options like align, verticalAlign, x and y
			 * to x and y relative to the chart.
			 *
			 * @param {Object} alignOptions
			 * @param {Boolean} alignByTranslate
			 * @param {String[Object} box The box to align to, needs a width and height. When the
			 *		box is a string, it refers to an object in the Renderer. For example, when
			 *		box is 'spacingBox', it refers to Renderer.spacingBox which holds width, height
			 *		x and y properties.
			 *
			 */
			align: function (alignOptions, alignByTranslate, box) {
				var align,
					vAlign,
					x,
					y,
					attribs = {},
					alignTo,
					renderer = this.renderer,
					alignedObjects = renderer.alignedObjects;

				// First call on instanciate
				if (alignOptions) {
					this.alignOptions = alignOptions;
					this.alignByTranslate = alignByTranslate;
					if (!box || isString(box)) { // boxes other than renderer handle this internally
						this.alignTo = alignTo = box || 'renderer';
						erase(alignedObjects, this); // prevent duplicates, like legendGroup after resize
						alignedObjects.push(this);
						box = null; // reassign it below
					}

				// When called on resize, no arguments are supplied
				} else {
					alignOptions = this.alignOptions;
					alignByTranslate = this.alignByTranslate;
					alignTo = this.alignTo;
				}

				box = pick(box, renderer[alignTo], renderer);

				// Assign variables
				align = alignOptions.align;
				vAlign = alignOptions.verticalAlign;
				x = (box.x || 0) + (alignOptions.x || 0); // default: left align
				y = (box.y || 0) + (alignOptions.y || 0); // default: top align

				// Align
				if (align === 'right' || align === 'center') {
					x += (box.width - (alignOptions.width || 0)) /
							{ right: 1, center: 2 }[align];
				}
				attribs[alignByTranslate ? 'translateX' : 'x'] = mathRound(x);


				// Vertical align
				if (vAlign === 'bottom' || vAlign === 'middle') {
					y += (box.height - (alignOptions.height || 0)) /
							({ bottom: 1, middle: 2 }[vAlign] || 1);

				}
				attribs[alignByTranslate ? 'translateY' : 'y'] = mathRound(y);

				// Animate only if already placed
				this[this.placed ? 'animate' : 'attr'](attribs);
				this.placed = true;
				this.alignAttr = attribs;

				return this;
			},

			/**
			 * Get the bounding box (width, height, x and y) for the element
			 */
			getBBox: function (reload) {
				var wrapper = this,
					bBox,// = wrapper.bBox,
					renderer = wrapper.renderer,
					width,
					height,
					rotation = wrapper.rotation,
					element = wrapper.element,
					styles = wrapper.styles,
					rad = rotation * deg2rad,
					textStr = wrapper.textStr,
					textShadow,
					elemStyle = element.style,
					toggleTextShadowShim,
					cacheKey;

				if (textStr !== UNDEFINED) {

					// Properties that affect bounding box
					cacheKey = ['', rotation || 0, styles && styles.fontSize, element.style.width].join(',');

					// Since numbers are monospaced, and numerical labels appear a lot in a chart,
					// we assume that a label of n characters has the same bounding box as others 
					// of the same length.
					if (textStr === '' || numRegex.test(textStr)) {
						cacheKey = 'num:' + textStr.toString().length + cacheKey;

					// Caching all strings reduces rendering time by 4-5%.
					} else {
						cacheKey = textStr + cacheKey;
					}
				}

				if (cacheKey && !reload) {
					bBox = renderer.cache[cacheKey];
				}

				// No cache found
				if (!bBox) {

					// SVG elements
					if (element.namespaceURI === SVG_NS || renderer.forExport) {
						try { // Fails in Firefox if the container has display: none.

							// When the text shadow shim is used, we need to hide the fake shadows
							// to get the correct bounding box (#3872)
							toggleTextShadowShim = this.fakeTS && function (display) {
								each(element.querySelectorAll('.' + PREFIX + 'text-shadow'), function (tspan) {
									tspan.style.display = display;
								});
							};

							// Workaround for #3842, Firefox reporting wrong bounding box for shadows
							if (isFirefox && elemStyle.textShadow) {
								textShadow = elemStyle.textShadow;
								elemStyle.textShadow = '';
							} else if (toggleTextShadowShim) {
								toggleTextShadowShim(NONE);
							}

							bBox = element.getBBox ?
								// SVG: use extend because IE9 is not allowed to change width and height in case
								// of rotation (below)
								extend({}, element.getBBox()) :
								// Canvas renderer and legacy IE in export mode
								{
									width: element.offsetWidth,
									height: element.offsetHeight
								};

							// #3842
							if (textShadow) {
								elemStyle.textShadow = textShadow;
							} else if (toggleTextShadowShim) {
								toggleTextShadowShim('');
							}
						} catch (e) {}

						// If the bBox is not set, the try-catch block above failed. The other condition
						// is for Opera that returns a width of -Infinity on hidden elements.
						if (!bBox || bBox.width < 0) {
							bBox = { width: 0, height: 0 };
						}


					// VML Renderer or useHTML within SVG
					} else {

						bBox = wrapper.htmlGetBBox();

					}

					// True SVG elements as well as HTML elements in modern browsers using the .useHTML option
					// need to compensated for rotation
					if (renderer.isSVG) {
						width = bBox.width;
						height = bBox.height;

						// Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)
						if (isIE && styles && styles.fontSize === '11px' && height.toPrecision(3) === '16.9') {
							bBox.height = height = 14;
						}

						// Adjust for rotated text
						if (rotation) {
							bBox.width = mathAbs(height * mathSin(rad)) + mathAbs(width * mathCos(rad));
							bBox.height = mathAbs(height * mathCos(rad)) + mathAbs(width * mathSin(rad));
						}
					}

					// Cache it
					if (cacheKey) {
						renderer.cache[cacheKey] = bBox;
					}
				}
				return bBox;
			},

			/**
			 * Show the element
			 */
			show: function (inherit) {
				return this.attr({ visibility: inherit ? 'inherit' : VISIBLE });
			},

			/**
			 * Hide the element
			 */
			hide: function () {
				return this.attr({ visibility: HIDDEN });
			},

			fadeOut: function (duration) {
				var elemWrapper = this;
				elemWrapper.animate({
					opacity: 0
				}, {
					duration: duration || 150,
					complete: function () {
						elemWrapper.attr({ y: -9999 }); // #3088, assuming we're only using this for tooltips
					}
				});
			},

			/**
			 * Add the element
			 * @param {Object|Undefined} parent Can be an element, an element wrapper or undefined
			 *	to append the element to the renderer.box.
			 */
			add: function (parent) {

				var renderer = this.renderer,
					element = this.element,
					inserted;

				if (parent) {
					this.parentGroup = parent;
				}

				// mark as inverted
				this.parentInverted = parent && parent.inverted;

				// build formatted text
				if (this.textStr !== undefined) {
					renderer.buildText(this);
				}

				// Mark as added
				this.added = true;

				// If we're adding to renderer root, or other elements in the group 
				// have a z index, we need to handle it
				if (!parent || parent.handleZ || this.zIndex) {
					inserted = this.zIndexSetter();
				}

				// If zIndex is not handled, append at the end
				if (!inserted) {
					(parent ? parent.element : renderer.box).appendChild(element);
				}

				// fire an event for internal hooks
				if (this.onAdd) {
					this.onAdd();
				}

				return this;
			},

			/**
			 * Removes a child either by removeChild or move to garbageBin.
			 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
			 */
			safeRemoveChild: function (element) {
				var parentNode = element.parentNode;
				if (parentNode) {
					parentNode.removeChild(element);
				}
			},

			/**
			 * Destroy the element and element wrapper
			 */
			destroy: function () {
				var wrapper = this,
					element = wrapper.element || {},
					shadows = wrapper.shadows,
					parentToClean = wrapper.renderer.isSVG && element.nodeName === 'SPAN' && wrapper.parentGroup,
					grandParent,
					key,
					i;

				// remove events
				element.onclick = element.onmouseout = element.onmouseover = element.onmousemove = element.point = null;
				stop(wrapper); // stop running animations

				if (wrapper.clipPath) {
					wrapper.clipPath = wrapper.clipPath.destroy();
				}

				// Destroy stops in case this is a gradient object
				if (wrapper.stops) {
					for (i = 0; i < wrapper.stops.length; i++) {
						wrapper.stops[i] = wrapper.stops[i].destroy();
					}
					wrapper.stops = null;
				}

				// remove element
				wrapper.safeRemoveChild(element);

				// destroy shadows
				if (shadows) {
					each(shadows, function (shadow) {
						wrapper.safeRemoveChild(shadow);
					});
				}

				// In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).
				while (parentToClean && parentToClean.div && parentToClean.div.childNodes.length === 0) {
					grandParent = parentToClean.parentGroup;
					wrapper.safeRemoveChild(parentToClean.div);
					delete parentToClean.div;
					parentToClean = grandParent;
				}

				// remove from alignObjects
				if (wrapper.alignTo) {
					erase(wrapper.renderer.alignedObjects, wrapper);
				}

				for (key in wrapper) {
					delete wrapper[key];
				}

				return null;
			},

			/**
			 * Add a shadow to the element. Must be done after the element is added to the DOM
			 * @param {Boolean|Object} shadowOptions
			 */
			shadow: function (shadowOptions, group, cutOff) {
				var shadows = [],
					i,
					shadow,
					element = this.element,
					strokeWidth,
					shadowWidth,
					shadowElementOpacity,

					// compensate for inverted plot area
					transform;


				if (shadowOptions) {
					shadowWidth = pick(shadowOptions.width, 3);
					shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
					transform = this.parentInverted ?
						'(-1,-1)' :
						'(' + pick(shadowOptions.offsetX, 1) + ', ' + pick(shadowOptions.offsetY, 1) + ')';
					for (i = 1; i <= shadowWidth; i++) {
						shadow = element.cloneNode(0);
						strokeWidth = (shadowWidth * 2) + 1 - (2 * i);
						attr(shadow, {
							'isShadow': 'true',
							'stroke': shadowOptions.color || 'black',
							'stroke-opacity': shadowElementOpacity * i,
							'stroke-width': strokeWidth,
							'transform': 'translate' + transform,
							'fill': NONE
						});
						if (cutOff) {
							attr(shadow, 'height', mathMax(attr(shadow, 'height') - strokeWidth, 0));
							shadow.cutHeight = strokeWidth;
						}

						if (group) {
							group.element.appendChild(shadow);
						} else {
							element.parentNode.insertBefore(shadow, element);
						}

						shadows.push(shadow);
					}

					this.shadows = shadows;
				}
				return this;

			},

			xGetter: function (key) {
				if (this.element.nodeName === 'circle') {
					key = { x: 'cx', y: 'cy' }[key] || key;
				}
				return this._defaultGetter(key);
			},

			/** 
			 * Get the current value of an attribute or pseudo attribute, used mainly
			 * for animation.
			 */
			_defaultGetter: function (key) {
				var ret = pick(this[key], this.element ? this.element.getAttribute(key) : null, 0);

				if (/^[\-0-9\.]+$/.test(ret)) { // is numerical
					ret = parseFloat(ret);
				}
				return ret;
			},


			dSetter: function (value, key, element) {
				if (value && value.join) { // join path
					value = value.join(' ');
				}
				if (/(NaN| {2}|^$)/.test(value)) {
					value = 'M 0 0';
				}
				element.setAttribute(key, value);

				this[key] = value;
			},
			dashstyleSetter: function (value) {
				var i;
				value = value && value.toLowerCase();
				if (value) {
					value = value
						.replace('shortdashdotdot', '3,1,1,1,1,1,')
						.replace('shortdashdot', '3,1,1,1')
						.replace('shortdot', '1,1,')
						.replace('shortdash', '3,1,')
						.replace('longdash', '8,3,')
						.replace(/dot/g, '1,3,')
						.replace('dash', '4,3,')
						.replace(/,$/, '')
						.split(','); // ending comma

					i = value.length;
					while (i--) {
						value[i] = pInt(value[i]) * this['stroke-width'];
					}
					value = value.join(',')
						.replace('NaN', 'none'); // #3226
					this.element.setAttribute('stroke-dasharray', value);
				}
			},
			alignSetter: function (value) {
				this.element.setAttribute('text-anchor', { left: 'start', center: 'middle', right: 'end' }[value]);
			},
			opacitySetter: function (value, key, element) {
				this[key] = value;
				element.setAttribute(key, value);
			},
			titleSetter: function (value) {
				var titleNode = this.element.getElementsByTagName('title')[0];
				if (!titleNode) {
					titleNode = doc.createElementNS(SVG_NS, 'title');
					this.element.appendChild(titleNode);
				}
				titleNode.appendChild(
					doc.createTextNode(
						(String(pick(value), '')).replace(/<[^>]*>/g, '') // #3276, #3895
					)
				);
			},
			textSetter: function (value) {
				if (value !== this.textStr) {
					// Delete bBox memo when the text changes
					delete this.bBox;
				
					this.textStr = value;
					if (this.added) {
						this.renderer.buildText(this);
					}
				}
			},
			fillSetter: function (value, key, element) {
				if (typeof value === 'string') {
					element.setAttribute(key, value);
				} else if (value) {
					this.colorGradient(value, key, element);
				}
			},
			visibilitySetter: function (value, key, element) {
				// IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)
				if (value === 'inherit') {
					element.removeAttribute(key);
				} else {
					element.setAttribute(key, value);
				}
			},
			zIndexSetter: function (value, key) {
				var renderer = this.renderer,
					parentGroup = this.parentGroup,
					parentWrapper = parentGroup || renderer,
					parentNode = parentWrapper.element || renderer.box,
					childNodes,
					otherElement,
					otherZIndex,
					element = this.element,
					inserted,
					run = this.added,
					i;
				
				if (defined(value)) {
					element.setAttribute(key, value); // So we can read it for other elements in the group
					value = +value;
					if (this[key] === value) { // Only update when needed (#3865)
						run = false;
					}
					this[key] = value;
				}

				// Insert according to this and other elements' zIndex. Before .add() is called,
				// nothing is done. Then on add, or by later calls to zIndexSetter, the node
				// is placed on the right place in the DOM.
				if (run) {
					value = this.zIndex;

					if (value && parentGroup) {
						parentGroup.handleZ = true;
					}
				
					childNodes = parentNode.childNodes;
					for (i = 0; i < childNodes.length && !inserted; i++) {
						otherElement = childNodes[i];
						otherZIndex = attr(otherElement, 'zIndex');
						if (otherElement !== element && (
								// Insert before the first element with a higher zIndex
								pInt(otherZIndex) > value ||
								// If no zIndex given, insert before the first element with a zIndex
								(!defined(value) && defined(otherZIndex))

								)) {
							parentNode.insertBefore(element, otherElement);
							inserted = true;
						}
					}
					if (!inserted) {
						parentNode.appendChild(element);
					}
				}
				return inserted;
			},
			_defaultSetter: function (value, key, element) {
				element.setAttribute(key, value);
			}
		};

		// Some shared setters and getters
		SVGElement.prototype.yGetter = SVGElement.prototype.xGetter;
		SVGElement.prototype.translateXSetter = SVGElement.prototype.translateYSetter = 
				SVGElement.prototype.rotationSetter = SVGElement.prototype.verticalAlignSetter = 
				SVGElement.prototype.scaleXSetter = SVGElement.prototype.scaleYSetter = function (value, key) {
			this[key] = value;
			this.doTransform = true;
		};

		// WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the 
		// stroke attribute altogether. #1270, #1369, #3065, #3072.
		SVGElement.prototype['stroke-widthSetter'] = SVGElement.prototype.strokeSetter = function (value, key, element) {
			this[key] = value;
			// Only apply the stroke attribute if the stroke width is defined and larger than 0
			if (this.stroke && this['stroke-width']) {
				this.strokeWidth = this['stroke-width'];
				SVGElement.prototype.fillSetter.call(this, this.stroke, 'stroke', element); // use prototype as instance may be overridden
				element.setAttribute('stroke-width', this['stroke-width']);
				this.hasStroke = true;
			} else if (key === 'stroke-width' && value === 0 && this.hasStroke) {
				element.removeAttribute('stroke');
				this.hasStroke = false;
			}
		};


		/**
		 * The default SVG renderer
		 */
		var SVGRenderer = function () {
			this.init.apply(this, arguments);
		};
		SVGRenderer.prototype = {
			Element: SVGElement,

			/**
			 * Initialize the SVGRenderer
			 * @param {Object} container
			 * @param {Number} width
			 * @param {Number} height
			 * @param {Boolean} forExport
			 */
			init: function (container, width, height, style, forExport) {
				var renderer = this,
					loc = location,
					boxWrapper,
					element,
					desc;

				boxWrapper = renderer.createElement('svg')
					.attr({
						version: '1.1'
					})
					.css(this.getStyle(style));
				element = boxWrapper.element;
				container.appendChild(element);

				// For browsers other than IE, add the namespace attribute (#1978)
				if (container.innerHTML.indexOf('xmlns') === -1) {
					attr(element, 'xmlns', SVG_NS);
				}

				// object properties
				renderer.isSVG = true;
				renderer.box = element;
				renderer.boxWrapper = boxWrapper;
				renderer.alignedObjects = [];

				// Page url used for internal references. #24, #672, #1070
				renderer.url = (isFirefox || isWebKit) && doc.getElementsByTagName('base').length ?
					loc.href
						.replace(/#.*?$/, '') // remove the hash
						.replace(/([\('\)])/g, '\\$1') // escape parantheses and quotes
						.replace(/ /g, '%20') : // replace spaces (needed for Safari only)
					'';

				// Add description
				desc = this.createElement('desc').add();
				desc.element.appendChild(doc.createTextNode('Created with ' + PRODUCT + ' ' + VERSION));


				renderer.defs = this.createElement('defs').add();
				renderer.forExport = forExport;
				renderer.gradients = {}; // Object where gradient SvgElements are stored
				renderer.cache = {}; // Cache for numerical bounding boxes

				renderer.setSize(width, height, false);



				// Issue 110 workaround:
				// In Firefox, if a div is positioned by percentage, its pixel position may land
				// between pixels. The container itself doesn't display this, but an SVG element
				// inside this container will be drawn at subpixel precision. In order to draw
				// sharp lines, this must be compensated for. This doesn't seem to work inside
				// iframes though (like in jsFiddle).
				var subPixelFix, rect;
				if (isFirefox && container.getBoundingClientRect) {
					renderer.subPixelFix = subPixelFix = function () {
						css(container, { left: 0, top: 0 });
						rect = container.getBoundingClientRect();
						css(container, {
							left: (mathCeil(rect.left) - rect.left) + PX,
							top: (mathCeil(rect.top) - rect.top) + PX
						});
					};

					// run the fix now
					subPixelFix();

					// run it on resize
					addEvent(win, 'resize', subPixelFix);
				}
			},

			getStyle: function (style) {
				return (this.style = extend({
					fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif', // default font
					fontSize: '12px'
				}, style));
			},

			/**
			 * Detect whether the renderer is hidden. This happens when one of the parent elements
			 * has display: none. #608.
			 */
			isHidden: function () {
				return !this.boxWrapper.getBBox().width;
			},

			/**
			 * Destroys the renderer and its allocated members.
			 */
			destroy: function () {
				var renderer = this,
					rendererDefs = renderer.defs;
				renderer.box = null;
				renderer.boxWrapper = renderer.boxWrapper.destroy();

				// Call destroy on all gradient elements
				destroyObjectProperties(renderer.gradients || {});
				renderer.gradients = null;

				// Defs are null in VMLRenderer
				// Otherwise, destroy them here.
				if (rendererDefs) {
					renderer.defs = rendererDefs.destroy();
				}

				// Remove sub pixel fix handler
				// We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed
				// See issue #982
				if (renderer.subPixelFix) {
					removeEvent(win, 'resize', renderer.subPixelFix);
				}

				renderer.alignedObjects = null;

				return null;
			},

			/**
			 * Create a wrapper for an SVG element
			 * @param {Object} nodeName
			 */
			createElement: function (nodeName) {
				var wrapper = new this.Element();
				wrapper.init(this, nodeName);
				return wrapper;
			},

			/**
			 * Dummy function for use in canvas renderer
			 */
			draw: function () {},

			/**
			 * Parse a simple HTML string into SVG tspans
			 *
			 * @param {Object} textNode The parent text SVG node
			 */
			buildText: function (wrapper) {
				var textNode = wrapper.element,
					renderer = this,
					forExport = renderer.forExport,
					textStr = pick(wrapper.textStr, '').toString(),
					hasMarkup = textStr.indexOf('<') !== -1,
					lines,
					childNodes = textNode.childNodes,
					styleRegex,
					hrefRegex,
					parentX = attr(textNode, 'x'),
					textStyles = wrapper.styles,
					width = wrapper.textWidth,
					textLineHeight = textStyles && textStyles.lineHeight,
					textShadow = textStyles && textStyles.textShadow,
					ellipsis = textStyles && textStyles.textOverflow === 'ellipsis',
					i = childNodes.length,
					tempParent = width && !wrapper.added && this.box,
					getLineHeight = function (tspan) {
						return textLineHeight ? 
							pInt(textLineHeight) :
							renderer.fontMetrics(
								/(px|em)$/.test(tspan && tspan.style.fontSize) ?
									tspan.style.fontSize :
									((textStyles && textStyles.fontSize) || renderer.style.fontSize || 12),
								tspan
							).h;
					},
					unescapeAngleBrackets = function (inputStr) {
						return inputStr.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
					};

				/// remove old text
				while (i--) {
					textNode.removeChild(childNodes[i]);
				}

				// Skip tspans, add text directly to text node. The forceTSpan is a hook 
				// used in text outline hack.
				if (!hasMarkup && !textShadow && !ellipsis && textStr.indexOf(' ') === -1) {
					textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));
					return;

				// Complex strings, add more logic
				} else {

					styleRegex = /<.*style="([^"]+)".*>/;
					hrefRegex = /<.*href="(http[^"]+)".*>/;

					if (tempParent) {
						tempParent.appendChild(textNode); // attach it to the DOM to read offset width
					}

					if (hasMarkup) {
						lines = textStr
							.replace(/<(b|strong)>/g, '<span style="font-weight:bold">')
							.replace(/<(i|em)>/g, '<span style="font-style:italic">')
							.replace(/<a/g, '<span')
							.replace(/<\/(b|strong|i|em|a)>/g, '</span>')
							.split(/<br.*?>/g);

					} else {
						lines = [textStr];
					}


					// remove empty line at end
					if (lines[lines.length - 1] === '') {
						lines.pop();
					}

					
					// build the lines
					each(lines, function (line, lineNo) {
						var spans, spanNo = 0;

						line = line.replace(/<span/g, '|||<span').replace(/<\/span>/g, '</span>|||');
						spans = line.split('|||');

						each(spans, function (span) {
							if (span !== '' || spans.length === 1) {
								var attributes = {},
									tspan = doc.createElementNS(SVG_NS, 'tspan'),
									spanStyle; // #390
								if (styleRegex.test(span)) {
									spanStyle = span.match(styleRegex)[1].replace(/(;| |^)color([ :])/, '$1fill$2');
									attr(tspan, 'style', spanStyle);
								}
								if (hrefRegex.test(span) && !forExport) { // Not for export - #1529
									attr(tspan, 'onclick', 'location.href=\"' + span.match(hrefRegex)[1] + '\"');
									css(tspan, { cursor: 'pointer' });
								}

								span = unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g, '') || ' ');

								// Nested tags aren't supported, and cause crash in Safari (#1596)
								if (span !== ' ') {

									// add the text node
									tspan.appendChild(doc.createTextNode(span));

									if (!spanNo) { // first span in a line, align it to the left
										if (lineNo && parentX !== null) {
											attributes.x = parentX;
										}
									} else {
										attributes.dx = 0; // #16
									}

									// add attributes
									attr(tspan, attributes);

									// Append it
									textNode.appendChild(tspan);

									// first span on subsequent line, add the line height
									if (!spanNo && lineNo) {

										// allow getting the right offset height in exporting in IE
										if (!hasSVG && forExport) {
											css(tspan, { display: 'block' });
										}

										// Set the line height based on the font size of either
										// the text element or the tspan element
										attr(
											tspan,
											'dy',
											getLineHeight(tspan)
										);
									}

									/*if (width) {
										renderer.breakText(wrapper, width);
									}*/

									// Check width and apply soft breaks or ellipsis
									if (width) {
										var words = span.replace(/([^\^])-/g, '$1- ').split(' '), // #1273
											hasWhiteSpace = spans.length > 1 || lineNo || (words.length > 1 && textStyles.whiteSpace !== 'nowrap'),
											tooLong,
											wasTooLong,
											actualWidth,
											rest = [],
											dy = getLineHeight(tspan),
											softLineNo = 1,
											rotation = wrapper.rotation,
											wordStr = span, // for ellipsis
											cursor = wordStr.length, // binary search cursor
											bBox;

										while ((hasWhiteSpace || ellipsis) && (words.length || rest.length)) {
											wrapper.rotation = 0; // discard rotation when computing box
											bBox = wrapper.getBBox(true);
											actualWidth = bBox.width;

											// Old IE cannot measure the actualWidth for SVG elements (#2314)
											if (!hasSVG && renderer.forExport) {
												actualWidth = renderer.measureSpanWidth(tspan.firstChild.data, wrapper.styles);
											}

											tooLong = actualWidth > width;

											// For ellipsis, do a binary search for the correct string length
											if (wasTooLong === undefined) {
												wasTooLong = tooLong; // First time
											}
											if (ellipsis && wasTooLong) {
												cursor /= 2;

												if (wordStr === '' || (!tooLong && cursor < 0.5)) {
													words = []; // All ok, break out
												} else {
													if (tooLong) {
														wasTooLong = true;
													}
													wordStr = span.substring(0, wordStr.length + (tooLong ? -1 : 1) * mathCeil(cursor));
													words = [wordStr + (width > 3 ? '\u2026' : '')];
													tspan.removeChild(tspan.firstChild);
												}

											// Looping down, this is the first word sequence that is not too long,
											// so we can move on to build the next line.
											} else if (!tooLong || words.length === 1) {
												words = rest;
												rest = [];
														
												if (words.length) {
													softLineNo++;
													
													tspan = doc.createElementNS(SVG_NS, 'tspan');
													attr(tspan, {
														dy: dy,
														x: parentX
													});
													if (spanStyle) { // #390
														attr(tspan, 'style', spanStyle);
													}
													textNode.appendChild(tspan);
												}
												if (actualWidth > width) { // a single word is pressing it out
													width = actualWidth;
												}
											} else { // append to existing line tspan
												tspan.removeChild(tspan.firstChild);
												rest.unshift(words.pop());
											}
											if (words.length) {
												tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g, '-')));
											}
										}
										if (wasTooLong) {
											wrapper.attr('title', wrapper.textStr);
										}
										wrapper.rotation = rotation;
									}

									spanNo++;
								}
							}
						});
					});
					if (tempParent) {
						tempParent.removeChild(textNode); // attach it to the DOM to read offset width
					}

					// Apply the text shadow
					if (textShadow && wrapper.applyTextShadow) {
						wrapper.applyTextShadow(textShadow);
					}
				}
			},

			

			/*
			breakText: function (wrapper, width) {
				var bBox = wrapper.getBBox(),
					node = wrapper.element,
					textLength = node.textContent.length,
					pos = mathRound(width * textLength / bBox.width), // try this position first, based on average character width
					increment = 0,
					finalPos;

				if (bBox.width > width) {
					while (finalPos === undefined) {
						textLength = node.getSubStringLength(0, pos);

						if (textLength <= width) {
							if (increment === -1) {
								finalPos = pos;
							} else {
								increment = 1;
							}
						} else {
							if (increment === 1) {
								finalPos = pos - 1;
							} else {
								increment = -1;
							}
						}
						pos += increment;
					}
				}
				console.log(finalPos, node.getSubStringLength(0, finalPos))
			},
			*/

			/** 
			 * Returns white for dark colors and black for bright colors
			 */
			getContrast: function (color) {
				color = Color(color).rgba;
				return color[0] + color[1] + color[2] > 384 ? '#000000' : '#FFFFFF';
			},

			/**
			 * Create a button with preset states
			 * @param {String} text
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Function} callback
			 * @param {Object} normalState
			 * @param {Object} hoverState
			 * @param {Object} pressedState
			 */
			button: function (text, x, y, callback, normalState, hoverState, pressedState, disabledState, shape) {
				var label = this.label(text, x, y, shape, null, null, null, null, 'button'),
					curState = 0,
					stateOptions,
					stateStyle,
					normalStyle,
					hoverStyle,
					pressedStyle,
					disabledStyle,
					verticalGradient = { x1: 0, y1: 0, x2: 0, y2: 1 };

				// Normal state - prepare the attributes
				normalState = merge({
					'stroke-width': 1,
					stroke: '#CCCCCC',
					fill: {
						linearGradient: verticalGradient,
						stops: [
							[0, '#FEFEFE'],
							[1, '#F6F6F6']
						]
					},
					r: 2,
					padding: 5,
					style: {
						color: 'black'
					}
				}, normalState);
				normalStyle = normalState.style;
				delete normalState.style;

				// Hover state
				hoverState = merge(normalState, {
					stroke: '#68A',
					fill: {
						linearGradient: verticalGradient,
						stops: [
							[0, '#FFF'],
							[1, '#ACF']
						]
					}
				}, hoverState);
				hoverStyle = hoverState.style;
				delete hoverState.style;

				// Pressed state
				pressedState = merge(normalState, {
					stroke: '#68A',
					fill: {
						linearGradient: verticalGradient,
						stops: [
							[0, '#9BD'],
							[1, '#CDF']
						]
					}
				}, pressedState);
				pressedStyle = pressedState.style;
				delete pressedState.style;

				// Disabled state
				disabledState = merge(normalState, {
					style: {
						color: '#CCC'
					}
				}, disabledState);
				disabledStyle = disabledState.style;
				delete disabledState.style;

				// Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).
				addEvent(label.element, isIE ? 'mouseover' : 'mouseenter', function () {
					if (curState !== 3) {
						label.attr(hoverState)
							.css(hoverStyle);
					}
				});
				addEvent(label.element, isIE ? 'mouseout' : 'mouseleave', function () {
					if (curState !== 3) {
						stateOptions = [normalState, hoverState, pressedState][curState];
						stateStyle = [normalStyle, hoverStyle, pressedStyle][curState];
						label.attr(stateOptions)
							.css(stateStyle);
					}
				});

				label.setState = function (state) {
					label.state = curState = state;
					if (!state) {
						label.attr(normalState)
							.css(normalStyle);
					} else if (state === 2) {
						label.attr(pressedState)
							.css(pressedStyle);
					} else if (state === 3) {
						label.attr(disabledState)
							.css(disabledStyle);
					}
				};

				return label
					.on('click', function (e) {
						if (curState !== 3) {
							callback.call(label, e);
						}
					})
					.attr(normalState)
					.css(extend({ cursor: 'default' }, normalStyle));
			},

			/**
			 * Make a straight line crisper by not spilling out to neighbour pixels
			 * @param {Array} points
			 * @param {Number} width
			 */
			crispLine: function (points, width) {
				// points format: [M, 0, 0, L, 100, 0]
				// normalize to a crisp line
				if (points[1] === points[4]) {
					// Substract due to #1129. Now bottom and left axis gridlines behave the same.
					points[1] = points[4] = mathRound(points[1]) - (width % 2 / 2);
				}
				if (points[2] === points[5]) {
					points[2] = points[5] = mathRound(points[2]) + (width % 2 / 2);
				}
				return points;
			},


			/**
			 * Draw a path
			 * @param {Array} path An SVG path in array form
			 */
			path: function (path) {
				var attr = {
					fill: NONE
				};
				if (isArray(path)) {
					attr.d = path;
				} else if (isObject(path)) { // attributes
					extend(attr, path);
				}
				return this.createElement('path').attr(attr);
			},

			/**
			 * Draw and return an SVG circle
			 * @param {Number} x The x position
			 * @param {Number} y The y position
			 * @param {Number} r The radius
			 */
			circle: function (x, y, r) {
				var attr = isObject(x) ?
					x :
					{
						x: x,
						y: y,
						r: r
					},
					wrapper = this.createElement('circle');

				wrapper.xSetter = function (value) {
					this.element.setAttribute('cx', value);
				};
				wrapper.ySetter = function (value) {
					this.element.setAttribute('cy', value);
				};
				return wrapper.attr(attr);
			},

			/**
			 * Draw and return an arc
			 * @param {Number} x X position
			 * @param {Number} y Y position
			 * @param {Number} r Radius
			 * @param {Number} innerR Inner radius like used in donut charts
			 * @param {Number} start Starting angle
			 * @param {Number} end Ending angle
			 */
			arc: function (x, y, r, innerR, start, end) {
				var arc;

				if (isObject(x)) {
					y = x.y;
					r = x.r;
					innerR = x.innerR;
					start = x.start;
					end = x.end;
					x = x.x;
				}

				// Arcs are defined as symbols for the ability to set
				// attributes in attr and animate
				arc = this.symbol('arc', x || 0, y || 0, r || 0, r || 0, {
					innerR: innerR || 0,
					start: start || 0,
					end: end || 0
				});
				arc.r = r; // #959
				return arc;
			},

			/**
			 * Draw and return a rectangle
			 * @param {Number} x Left position
			 * @param {Number} y Top position
			 * @param {Number} width
			 * @param {Number} height
			 * @param {Number} r Border corner radius
			 * @param {Number} strokeWidth A stroke width can be supplied to allow crisp drawing
			 */
			rect: function (x, y, width, height, r, strokeWidth) {

				r = isObject(x) ? x.r : r;

				var wrapper = this.createElement('rect'),
					attribs = isObject(x) ? x : x === UNDEFINED ? {} : {
						x: x,
						y: y,
						width: mathMax(width, 0),
						height: mathMax(height, 0)
					};

				if (strokeWidth !== UNDEFINED) {
					attribs.strokeWidth = strokeWidth;
					attribs = wrapper.crisp(attribs);
				}

				if (r) {
					attribs.r = r;
				}

				wrapper.rSetter = function (value) {
					attr(this.element, {
						rx: value,
						ry: value
					});
				};
				
				return wrapper.attr(attribs);
			},

			/**
			 * Resize the box and re-align all aligned elements
			 * @param {Object} width
			 * @param {Object} height
			 * @param {Boolean} animate
			 *
			 */
			setSize: function (width, height, animate) {
				var renderer = this,
					alignedObjects = renderer.alignedObjects,
					i = alignedObjects.length;

				renderer.width = width;
				renderer.height = height;

				renderer.boxWrapper[pick(animate, true) ? 'animate' : 'attr']({
					width: width,
					height: height
				});

				while (i--) {
					alignedObjects[i].align();
				}
			},

			/**
			 * Create a group
			 * @param {String} name The group will be given a class name of 'highcharts-{name}'.
			 *	 This can be used for styling and scripting.
			 */
			g: function (name) {
				var elem = this.createElement('g');
				return defined(name) ? elem.attr({ 'class': PREFIX + name }) : elem;
			},

			/**
			 * Display an image
			 * @param {String} src
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			image: function (src, x, y, width, height) {
				var attribs = {
						preserveAspectRatio: NONE
					},
					elemWrapper;

				// optional properties
				if (arguments.length > 1) {
					extend(attribs, {
						x: x,
						y: y,
						width: width,
						height: height
					});
				}

				elemWrapper = this.createElement('image').attr(attribs);

				// set the href in the xlink namespace
				if (elemWrapper.element.setAttributeNS) {
					elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink',
						'href', src);
				} else {
					// could be exporting in IE
					// using href throws "not supported" in ie7 and under, requries regex shim to fix later
					elemWrapper.element.setAttribute('hc-svg-href', src);
				}
				return elemWrapper;
			},

			/**
			 * Draw a symbol out of pre-defined shape paths from the namespace 'symbol' object.
			 *
			 * @param {Object} symbol
			 * @param {Object} x
			 * @param {Object} y
			 * @param {Object} radius
			 * @param {Object} options
			 */
			symbol: function (symbol, x, y, width, height, options) {

				var obj,

					// get the symbol definition function
					symbolFn = this.symbols[symbol],

					// check if there's a path defined for this symbol
					path = symbolFn && symbolFn(
						mathRound(x),
						mathRound(y),
						width,
						height,
						options
					),

					imageElement,
					imageRegex = /^url\((.*?)\)$/,
					imageSrc,
					imageSize,
					centerImage;

				if (path) {

					obj = this.path(path);
					// expando properties for use in animate and attr
					extend(obj, {
						symbolName: symbol,
						x: x,
						y: y,
						width: width,
						height: height
					});
					if (options) {
						extend(obj, options);
					}


				// image symbols
				} else if (imageRegex.test(symbol)) {

					// On image load, set the size and position
					centerImage = function (img, size) {
						if (img.element) { // it may be destroyed in the meantime (#1390)
							img.attr({
								width: size[0],
								height: size[1]
							});

							if (!img.alignByTranslate) { // #185
								img.translate(
									mathRound((width - size[0]) / 2), // #1378
									mathRound((height - size[1]) / 2)
								);
							}
						}
					};

					imageSrc = symbol.match(imageRegex)[1];
					imageSize = symbolSizes[imageSrc] || (options && options.width && options.height && [options.width, options.height]);

					// Ireate the image synchronously, add attribs async
					obj = this.image(imageSrc)
						.attr({
							x: x,
							y: y
						});
					obj.isImg = true;

					if (imageSize) {
						centerImage(obj, imageSize);
					} else {
						// Initialize image to be 0 size so export will still function if there's no cached sizes.
						obj.attr({ width: 0, height: 0 });

						// Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
						// the created element must be assigned to a variable in order to load (#292).
						imageElement = createElement('img', {
							onload: function () {

								// Special case for SVGs on IE11, the width is not accessible until the image is 
								// part of the DOM (#2854).
								if (this.width === 0) { 
									css(this, {
										position: ABSOLUTE,
										top: '-999em'
									});
									document.body.appendChild(this);
								}

								// Center the image
								centerImage(obj, symbolSizes[imageSrc] = [this.width, this.height]);

								// Clean up after #2854 workaround.
								if (this.parentNode) {
									this.parentNode.removeChild(this);
								}
							},
							src: imageSrc
						});
					}
				}

				return obj;
			},

			/**
			 * An extendable collection of functions for defining symbol paths.
			 */
			symbols: {
				'circle': function (x, y, w, h) {
					var cpw = 0.166 * w;
					return [
						M, x + w / 2, y,
						'C', x + w + cpw, y, x + w + cpw, y + h, x + w / 2, y + h,
						'C', x - cpw, y + h, x - cpw, y, x + w / 2, y,
						'Z'
					];
				},

				'square': function (x, y, w, h) {
					return [
						M, x, y,
						L, x + w, y,
						x + w, y + h,
						x, y + h,
						'Z'
					];
				},

				'triangle': function (x, y, w, h) {
					return [
						M, x + w / 2, y,
						L, x + w, y + h,
						x, y + h,
						'Z'
					];
				},

				'triangle-down': function (x, y, w, h) {
					return [
						M, x, y,
						L, x + w, y,
						x + w / 2, y + h,
						'Z'
					];
				},
				'diamond': function (x, y, w, h) {
					return [
						M, x + w / 2, y,
						L, x + w, y + h / 2,
						x + w / 2, y + h,
						x, y + h / 2,
						'Z'
					];
				},
				'arc': function (x, y, w, h, options) {
					var start = options.start,
						radius = options.r || w || h,
						end = options.end - 0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
						innerRadius = options.innerR,
						open = options.open,
						cosStart = mathCos(start),
						sinStart = mathSin(start),
						cosEnd = mathCos(end),
						sinEnd = mathSin(end),
						longArc = options.end - start < mathPI ? 0 : 1;

					return [
						M,
						x + radius * cosStart,
						y + radius * sinStart,
						'A', // arcTo
						radius, // x radius
						radius, // y radius
						0, // slanting
						longArc, // long or short arc
						1, // clockwise
						x + radius * cosEnd,
						y + radius * sinEnd,
						open ? M : L,
						x + innerRadius * cosEnd,
						y + innerRadius * sinEnd,
						'A', // arcTo
						innerRadius, // x radius
						innerRadius, // y radius
						0, // slanting
						longArc, // long or short arc
						0, // clockwise
						x + innerRadius * cosStart,
						y + innerRadius * sinStart,

						open ? '' : 'Z' // close
					];
				},

				/**
				 * Callout shape used for default tooltips, also used for rounded rectangles in VML
				 */
				callout: function (x, y, w, h, options) {
					var arrowLength = 6,
						halfDistance = 6,
						r = mathMin((options && options.r) || 0, w, h),
						safeDistance = r + halfDistance,
						anchorX = options && options.anchorX,
						anchorY = options && options.anchorY,
						path;

					path = [
						'M', x + r, y, 
						'L', x + w - r, y, // top side
						'C', x + w, y, x + w, y, x + w, y + r, // top-right corner
						'L', x + w, y + h - r, // right side
						'C', x + w, y + h, x + w, y + h, x + w - r, y + h, // bottom-right corner
						'L', x + r, y + h, // bottom side
						'C', x, y + h, x, y + h, x, y + h - r, // bottom-left corner
						'L', x, y + r, // left side
						'C', x, y, x, y, x + r, y // top-right corner
					];
					
					if (anchorX && anchorX > w && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace right side
						path.splice(13, 3,
							'L', x + w, anchorY - halfDistance, 
							x + w + arrowLength, anchorY,
							x + w, anchorY + halfDistance,
							x + w, y + h - r
						);
					} else if (anchorX && anchorX < 0 && anchorY > y + safeDistance && anchorY < y + h - safeDistance) { // replace left side
						path.splice(33, 3, 
							'L', x, anchorY + halfDistance, 
							x - arrowLength, anchorY,
							x, anchorY - halfDistance,
							x, y + r
						);
					} else if (anchorY && anchorY > h && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace bottom
						path.splice(23, 3,
							'L', anchorX + halfDistance, y + h,
							anchorX, y + h + arrowLength,
							anchorX - halfDistance, y + h,
							x + r, y + h
						);
					} else if (anchorY && anchorY < 0 && anchorX > x + safeDistance && anchorX < x + w - safeDistance) { // replace top
						path.splice(3, 3,
							'L', anchorX - halfDistance, y,
							anchorX, y - arrowLength,
							anchorX + halfDistance, y,
							w - r, y
						);
					}
					return path;
				}
			},

			/**
			 * Define a clipping rectangle
			 * @param {String} id
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			clipRect: function (x, y, width, height) {
				var wrapper,
					id = PREFIX + idCounter++,

					clipPath = this.createElement('clipPath').attr({
						id: id
					}).add(this.defs);

				wrapper = this.rect(x, y, width, height, 0).add(clipPath);
				wrapper.id = id;
				wrapper.clipPath = clipPath;
				wrapper.count = 0;

				return wrapper;
			},


			


			/**
			 * Add text to the SVG object
			 * @param {String} str
			 * @param {Number} x Left position
			 * @param {Number} y Top position
			 * @param {Boolean} useHTML Use HTML to render the text
			 */
			text: function (str, x, y, useHTML) {

				// declare variables
				var renderer = this,
					fakeSVG = useCanVG || (!hasSVG && renderer.forExport),
					wrapper,
					attr = {};

				if (useHTML && !renderer.forExport) {
					return renderer.html(str, x, y);
				}

				attr.x = Math.round(x || 0); // X is always needed for line-wrap logic
				if (y) {
					attr.y = Math.round(y);
				}
				if (str || str === 0) {
					attr.text = str;
				}

				wrapper = renderer.createElement('text')
					.attr(attr);

				// Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)
				if (fakeSVG) {
					wrapper.css({
						position: ABSOLUTE
					});
				}

				if (!useHTML) {
					wrapper.xSetter = function (value, key, element) {
						var tspans = element.getElementsByTagName('tspan'),
							tspan,
							parentVal = element.getAttribute(key),
							i;
						for (i = 0; i < tspans.length; i++) {
							tspan = tspans[i];
							// If the x values are equal, the tspan represents a linebreak
							if (tspan.getAttribute(key) === parentVal) {
								tspan.setAttribute(key, value);
							}
						}
						element.setAttribute(key, value);
					};
				}
				
				return wrapper;
			},

			/**
			 * Utility to return the baseline offset and total line height from the font size
			 */
			fontMetrics: function (fontSize, elem) {
				var lineHeight,
					baseline,
					style;

				fontSize = fontSize || this.style.fontSize;
				if (elem && win.getComputedStyle) {
					elem = elem.element || elem; // SVGElement
					style = win.getComputedStyle(elem, "");
					fontSize = style && style.fontSize; // #4309, the style doesn't exist inside a hidden iframe in Firefox
				}
				fontSize = /px/.test(fontSize) ? pInt(fontSize) : /em/.test(fontSize) ? parseFloat(fontSize) * 12 : 12;

				// Empirical values found by comparing font size and bounding box height.
				// Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/
				lineHeight = fontSize < 24 ? fontSize + 3 : mathRound(fontSize * 1.2);
				baseline = mathRound(lineHeight * 0.8);

				return {
					h: lineHeight,
					b: baseline,
					f: fontSize
				};
			},

			/**
			 * Correct X and Y positioning of a label for rotation (#1764)
			 */
			rotCorr: function (baseline, rotation, alterY) {
				var y = baseline;
				if (rotation && alterY) {
					y = mathMax(y * mathCos(rotation * deg2rad), 4);
				}
				return {
					x: (-baseline / 3) * mathSin(rotation * deg2rad),
					y: y
				};
			},

			/**
			 * Add a label, a text item that can hold a colored or gradient background
			 * as well as a border and shadow.
			 * @param {string} str
			 * @param {Number} x
			 * @param {Number} y
			 * @param {String} shape
			 * @param {Number} anchorX In case the shape has a pointer, like a flag, this is the
			 *	coordinates it should be pinned to
			 * @param {Number} anchorY
			 * @param {Boolean} baseline Whether to position the label relative to the text baseline,
			 *	like renderer.text, or to the upper border of the rectangle.
			 * @param {String} className Class name for the group
			 */
			label: function (str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {

				var renderer = this,
					wrapper = renderer.g(className),
					text = renderer.text('', 0, 0, useHTML)
						.attr({
							zIndex: 1
						}),
						//.add(wrapper),
					box,
					bBox,
					alignFactor = 0,
					padding = 3,
					paddingLeft = 0,
					width,
					height,
					wrapperX,
					wrapperY,
					crispAdjust = 0,
					deferredAttr = {},
					baselineOffset,
					needsBox;

				/**
				 * This function runs after the label is added to the DOM (when the bounding box is
				 * available), and after the text of the label is updated to detect the new bounding
				 * box and reflect it in the border box.
				 */
				function updateBoxSize() {
					var boxX,
						boxY,
						style = text.element.style;

					bBox = (width === undefined || height === undefined || wrapper.styles.textAlign) && defined(text.textStr) && 
						text.getBBox(); //#3295 && 3514 box failure when string equals 0
					wrapper.width = (width || bBox.width || 0) + 2 * padding + paddingLeft;
					wrapper.height = (height || bBox.height || 0) + 2 * padding;

					// update the label-scoped y offset
					baselineOffset = padding + renderer.fontMetrics(style && style.fontSize, text).b;

					
					if (needsBox) {

						// create the border box if it is not already present
						if (!box) {
							boxX = mathRound(-alignFactor * padding) + crispAdjust;
							boxY = (baseline ? -baselineOffset : 0) + crispAdjust;

							wrapper.box = box = shape ?
								renderer.symbol(shape, boxX, boxY, wrapper.width, wrapper.height, deferredAttr) :
								renderer.rect(boxX, boxY, wrapper.width, wrapper.height, 0, deferredAttr[STROKE_WIDTH]);

							if (!box.isImg) { // #4324, fill "none" causes it to be ignored by mouse events in IE
								box.attr('fill', NONE);
							}
							box.add(wrapper);
						}

						// apply the box attributes
						if (!box.isImg) { // #1630
							box.attr(extend({
								width: mathRound(wrapper.width),
								height: mathRound(wrapper.height)
							}, deferredAttr));
						}
						deferredAttr = null;
					}
				}

				/**
				 * This function runs after setting text or padding, but only if padding is changed
				 */
				function updateTextPadding() {
					var styles = wrapper.styles,
						textAlign = styles && styles.textAlign,
						x = paddingLeft + padding * (1 - alignFactor),
						y;

					// determin y based on the baseline
					y = baseline ? 0 : baselineOffset;

					// compensate for alignment
					if (defined(width) && bBox && (textAlign === 'center' || textAlign === 'right')) {
						x += { center: 0.5, right: 1 }[textAlign] * (width - bBox.width);
					}

					// update if anything changed
					if (x !== text.x || y !== text.y) {
						text.attr('x', x);
						if (y !== UNDEFINED) {
							text.attr('y', y);
						}
					}

					// record current values
					text.x = x;
					text.y = y;
				}

				/**
				 * Set a box attribute, or defer it if the box is not yet created
				 * @param {Object} key
				 * @param {Object} value
				 */
				function boxAttr(key, value) {
					if (box) {
						box.attr(key, value);
					} else {
						deferredAttr[key] = value;
					}
				}

				/**
				 * After the text element is added, get the desired size of the border box
				 * and add it before the text in the DOM.
				 */
				wrapper.onAdd = function () {
					text.add(wrapper);
					wrapper.attr({
						text: (str || str === 0) ? str : '', // alignment is available now // #3295: 0 not rendered if given as a value
						x: x,
						y: y
					});

					if (box && defined(anchorX)) {
						wrapper.attr({
							anchorX: anchorX,
							anchorY: anchorY
						});
					}
				};

				/*
				 * Add specific attribute setters.
				 */

				// only change local variables
				wrapper.widthSetter = function (value) {
					width = value;
				};
				wrapper.heightSetter = function (value) {
					height = value;
				};
				wrapper.paddingSetter =  function (value) {
					if (defined(value) && value !== padding) {
						padding = wrapper.padding = value;
						updateTextPadding();
					}
				};
				wrapper.paddingLeftSetter =  function (value) {
					if (defined(value) && value !== paddingLeft) {
						paddingLeft = value;
						updateTextPadding();
					}
				};


				// change local variable and prevent setting attribute on the group
				wrapper.alignSetter = function (value) {
					alignFactor = { left: 0, center: 0.5, right: 1 }[value];
				};

				// apply these to the box and the text alike
				wrapper.textSetter = function (value) {
					if (value !== UNDEFINED) {
						text.textSetter(value);
					}
					updateBoxSize();
					updateTextPadding();
				};

				// apply these to the box but not to the text
				wrapper['stroke-widthSetter'] = function (value, key) {
					if (value) {
						needsBox = true;
					}
					crispAdjust = value % 2 / 2;
					boxAttr(key, value);
				};
				wrapper.strokeSetter = wrapper.fillSetter = wrapper.rSetter = function (value, key) {
					if (key === 'fill' && value) {
						needsBox = true;
					}
					boxAttr(key, value);
				};
				wrapper.anchorXSetter = function (value, key) {
					anchorX = value;
					boxAttr(key, mathRound(value) - crispAdjust - wrapperX);
				};
				wrapper.anchorYSetter = function (value, key) {
					anchorY = value;
					boxAttr(key, value - wrapperY);
				};

				// rename attributes
				wrapper.xSetter = function (value) {
					wrapper.x = value; // for animation getter
					if (alignFactor) {
						value -= alignFactor * ((width || bBox.width) + padding);
					}
					wrapperX = mathRound(value);
					wrapper.attr('translateX', wrapperX);
				};
				wrapper.ySetter = function (value) {
					wrapperY = wrapper.y = mathRound(value);
					wrapper.attr('translateY', wrapperY);
				};

				// Redirect certain methods to either the box or the text
				var baseCss = wrapper.css;
				return extend(wrapper, {
					/**
					 * Pick up some properties and apply them to the text instead of the wrapper
					 */
					css: function (styles) {
						if (styles) {
							var textStyles = {};
							styles = merge(styles); // create a copy to avoid altering the original object (#537)
							each(wrapper.textProps, function (prop) {
								if (styles[prop] !== UNDEFINED) {
									textStyles[prop] = styles[prop];
									delete styles[prop];
								}
							});
							text.css(textStyles);
						}
						return baseCss.call(wrapper, styles);
					},
					/**
					 * Return the bounding box of the box, not the group
					 */
					getBBox: function () {
						return {
							width: bBox.width + 2 * padding,
							height: bBox.height + 2 * padding,
							x: bBox.x - padding,
							y: bBox.y - padding
						};
					},
					/**
					 * Apply the shadow to the box
					 */
					shadow: function (b) {
						if (box) {
							box.shadow(b);
						}
						return wrapper;
					},
					/**
					 * Destroy and release memory.
					 */
					destroy: function () {

						// Added by button implementation
						removeEvent(wrapper.element, 'mouseenter');
						removeEvent(wrapper.element, 'mouseleave');

						if (text) {
							text = text.destroy();
						}
						if (box) {
							box = box.destroy();
						}
						// Call base implementation to destroy the rest
						SVGElement.prototype.destroy.call(wrapper);

						// Release local pointers (#1298)
						wrapper = renderer = updateBoxSize = updateTextPadding = boxAttr = null;
					}
				});
			}
		}; // end SVGRenderer


		// general renderer
		Renderer = SVGRenderer;
		// extend SvgElement for useHTML option
		extend(SVGElement.prototype, {
			/**
			 * Apply CSS to HTML elements. This is used in text within SVG rendering and
			 * by the VML renderer
			 */
			htmlCss: function (styles) {
				var wrapper = this,
					element = wrapper.element,
					textWidth = styles && element.tagName === 'SPAN' && styles.width;

				if (textWidth) {
					delete styles.width;
					wrapper.textWidth = textWidth;
					wrapper.updateTransform();
				}
				if (styles && styles.textOverflow === 'ellipsis') {
					styles.whiteSpace = 'nowrap';
					styles.overflow = 'hidden';
				}
				wrapper.styles = extend(wrapper.styles, styles);
				css(wrapper.element, styles);

				return wrapper;
			},

			/**
			 * VML and useHTML method for calculating the bounding box based on offsets
			 * @param {Boolean} refresh Whether to force a fresh value from the DOM or to
			 * use the cached value
			 *
			 * @return {Object} A hash containing values for x, y, width and height
			 */

			htmlGetBBox: function () {
				var wrapper = this,
					element = wrapper.element;

				// faking getBBox in exported SVG in legacy IE
				// faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)
				if (element.nodeName === 'text') {
					element.style.position = ABSOLUTE;
				}

				return {
					x: element.offsetLeft,
					y: element.offsetTop,
					width: element.offsetWidth,
					height: element.offsetHeight
				};
			},

			/**
			 * VML override private method to update elements based on internal
			 * properties based on SVG transform
			 */
			htmlUpdateTransform: function () {
				// aligning non added elements is expensive
				if (!this.added) {
					this.alignOnAdd = true;
					return;
				}

				var wrapper = this,
					renderer = wrapper.renderer,
					elem = wrapper.element,
					translateX = wrapper.translateX || 0,
					translateY = wrapper.translateY || 0,
					x = wrapper.x || 0,
					y = wrapper.y || 0,
					align = wrapper.textAlign || 'left',
					alignCorrection = { left: 0, center: 0.5, right: 1 }[align],
					shadows = wrapper.shadows,
					styles = wrapper.styles;

				// apply translate
				css(elem, {
					marginLeft: translateX,
					marginTop: translateY
				});
				if (shadows) { // used in labels/tooltip
					each(shadows, function (shadow) {
						css(shadow, {
							marginLeft: translateX + 1,
							marginTop: translateY + 1
						});
					});
				}

				// apply inversion
				if (wrapper.inverted) { // wrapper is a group
					each(elem.childNodes, function (child) {
						renderer.invertChild(child, elem);
					});
				}

				if (elem.tagName === 'SPAN') {

					var width,
						rotation = wrapper.rotation,
						baseline,
						textWidth = pInt(wrapper.textWidth),
						currentTextTransform = [rotation, align, elem.innerHTML, wrapper.textWidth, wrapper.textAlign].join(',');

					if (currentTextTransform !== wrapper.cTT) { // do the calculations and DOM access only if properties changed


						baseline = renderer.fontMetrics(elem.style.fontSize).b;

						// Renderer specific handling of span rotation
						if (defined(rotation)) {
							wrapper.setSpanRotation(rotation, alignCorrection, baseline);
						}

						width = pick(wrapper.elemWidth, elem.offsetWidth);

						// Update textWidth
						if (width > textWidth && /[ \-]/.test(elem.textContent || elem.innerText)) { // #983, #1254
							css(elem, {
								width: textWidth + PX,
								display: 'block',
								whiteSpace: (styles && styles.whiteSpace) || 'normal' // #3331
							});
							width = textWidth;
						}

						wrapper.getSpanCorrection(width, baseline, alignCorrection, rotation, align);
					}

					// apply position with correction
					css(elem, {
						left: (x + (wrapper.xCorr || 0)) + PX,
						top: (y + (wrapper.yCorr || 0)) + PX
					});

					// force reflow in webkit to apply the left and top on useHTML element (#1249)
					if (isWebKit) {
						baseline = elem.offsetHeight; // assigned to baseline for JSLint purpose
					}

					// record current text transform
					wrapper.cTT = currentTextTransform;
				}
			},

			/**
			 * Set the rotation of an individual HTML span
			 */
			setSpanRotation: function (rotation, alignCorrection, baseline) {
				var rotationStyle = {},
					cssTransformKey = isIE ? '-ms-transform' : isWebKit ? '-webkit-transform' : isFirefox ? 'MozTransform' : isOpera ? '-o-transform' : '';

				rotationStyle[cssTransformKey] = rotationStyle.transform = 'rotate(' + rotation + 'deg)';
				rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin = (alignCorrection * 100) + '% ' + baseline + 'px';
				css(this.element, rotationStyle);
			},

			/**
			 * Get the correction in X and Y positioning as the element is rotated.
			 */
			getSpanCorrection: function (width, baseline, alignCorrection) {
				this.xCorr = -width * alignCorrection;
				this.yCorr = -baseline;
			}
		});

		// Extend SvgRenderer for useHTML option.
		extend(SVGRenderer.prototype, {
			/**
			 * Create HTML text node. This is used by the VML renderer as well as the SVG
			 * renderer through the useHTML option.
			 *
			 * @param {String} str
			 * @param {Number} x
			 * @param {Number} y
			 */
			html: function (str, x, y) {
				var wrapper = this.createElement('span'),
					element = wrapper.element,
					renderer = wrapper.renderer;

				// Text setter
				wrapper.textSetter = function (value) {
					if (value !== element.innerHTML) {
						delete this.bBox;
					}
					element.innerHTML = this.textStr = value;
					wrapper.htmlUpdateTransform();
				};

				// Various setters which rely on update transform
				wrapper.xSetter = wrapper.ySetter = wrapper.alignSetter = wrapper.rotationSetter = function (value, key) {
					if (key === 'align') {
						key = 'textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.
					}
					wrapper[key] = value;
					wrapper.htmlUpdateTransform();
				};

				// Set the default attributes
				wrapper.attr({
						text: str,
						x: mathRound(x),
						y: mathRound(y)
					})
					.css({
						position: ABSOLUTE,
						fontFamily: this.style.fontFamily,
						fontSize: this.style.fontSize
					});

				// Keep the whiteSpace style outside the wrapper.styles collection
				element.style.whiteSpace = 'nowrap';

				// Use the HTML specific .css method
				wrapper.css = wrapper.htmlCss;

				// This is specific for HTML within SVG
				if (renderer.isSVG) {
					wrapper.add = function (svgGroupWrapper) {

						var htmlGroup,
							container = renderer.box.parentNode,
							parentGroup,
							parents = [];

						this.parentGroup = svgGroupWrapper;

						// Create a mock group to hold the HTML elements
						if (svgGroupWrapper) {
							htmlGroup = svgGroupWrapper.div;
							if (!htmlGroup) {

								// Read the parent chain into an array and read from top down
								parentGroup = svgGroupWrapper;
								while (parentGroup) {

									parents.push(parentGroup);

									// Move up to the next parent group
									parentGroup = parentGroup.parentGroup;
								}

								// Ensure dynamically updating position when any parent is translated
								each(parents.reverse(), function (parentGroup) {
									var htmlGroupStyle,
										cls = attr(parentGroup.element, 'class');

									if (cls) {
										cls = { className: cls };
									} // else null

									// Create a HTML div and append it to the parent div to emulate
									// the SVG group structure
									htmlGroup = parentGroup.div = parentGroup.div || createElement(DIV, cls, {
										position: ABSOLUTE,
										left: (parentGroup.translateX || 0) + PX,
										top: (parentGroup.translateY || 0) + PX
									}, htmlGroup || container); // the top group is appended to container

									// Shortcut
									htmlGroupStyle = htmlGroup.style;

									// Set listeners to update the HTML div's position whenever the SVG group
									// position is changed
									extend(parentGroup, {
										translateXSetter: function (value, key) {
											htmlGroupStyle.left = value + PX;
											parentGroup[key] = value;
											parentGroup.doTransform = true;
										},
										translateYSetter: function (value, key) {
											htmlGroupStyle.top = value + PX;
											parentGroup[key] = value;
											parentGroup.doTransform = true;
										}
									});
									wrap(parentGroup, 'visibilitySetter', function (proceed, value, key, elem) {
										proceed.call(this, value, key, elem);
										htmlGroupStyle[key] = value;
									});
								});

							}
						} else {
							htmlGroup = container;
						}

						htmlGroup.appendChild(element);

						// Shared with VML:
						wrapper.added = true;
						if (wrapper.alignOnAdd) {
							wrapper.htmlUpdateTransform();
						}

						return wrapper;
					};
				}
				return wrapper;
			}
		});

		/* ****************************************************************************
		 *                                                                            *
		 * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *
		 *                                                                            *
		 * For applications and websites that don't need IE support, like platform    *
		 * targeted mobile apps and web apps, this code can be removed.               *
		 *                                                                            *
		 *****************************************************************************/

		/**
		 * @constructor
		 */
		var VMLRenderer, VMLElement;
		if (!hasSVG && !useCanVG) {

		/**
		 * The VML element wrapper.
		 */
		VMLElement = {

			/**
			 * Initialize a new VML element wrapper. It builds the markup as a string
			 * to minimize DOM traffic.
			 * @param {Object} renderer
			 * @param {Object} nodeName
			 */
			init: function (renderer, nodeName) {
				var wrapper = this,
					markup =  ['<', nodeName, ' filled="f" stroked="f"'],
					style = ['position: ', ABSOLUTE, ';'],
					isDiv = nodeName === DIV;

				// divs and shapes need size
				if (nodeName === 'shape' || isDiv) {
					style.push('left:0;top:0;width:1px;height:1px;');
				}
				style.push('visibility: ', isDiv ? HIDDEN : VISIBLE);

				markup.push(' style="', style.join(''), '"/>');

				// create element with default attributes and style
				if (nodeName) {
					markup = isDiv || nodeName === 'span' || nodeName === 'img' ?
						markup.join('')
						: renderer.prepVML(markup);
					wrapper.element = createElement(markup);
				}

				wrapper.renderer = renderer;
			},

			/**
			 * Add the node to the given parent
			 * @param {Object} parent
			 */
			add: function (parent) {
				var wrapper = this,
					renderer = wrapper.renderer,
					element = wrapper.element,
					box = renderer.box,
					inverted = parent && parent.inverted,

					// get the parent node
					parentNode = parent ?
						parent.element || parent :
						box;


				// if the parent group is inverted, apply inversion on all children
				if (inverted) { // only on groups
					renderer.invertChild(element, parentNode);
				}

				// append it
				parentNode.appendChild(element);

				// align text after adding to be able to read offset
				wrapper.added = true;
				if (wrapper.alignOnAdd && !wrapper.deferUpdateTransform) {
					wrapper.updateTransform();
				}

				// fire an event for internal hooks
				if (wrapper.onAdd) {
					wrapper.onAdd();
				}

				return wrapper;
			},

			/**
			 * VML always uses htmlUpdateTransform
			 */
			updateTransform: SVGElement.prototype.htmlUpdateTransform,

			/**
			 * Set the rotation of a span with oldIE's filter
			 */
			setSpanRotation: function () {
				// Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented
				// but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+
				// has support for CSS3 transform. The getBBox method also needs to be updated
				// to compensate for the rotation, like it currently does for SVG.
				// Test case: http://jsfiddle.net/highcharts/Ybt44/

				var rotation = this.rotation,
					costheta = mathCos(rotation * deg2rad),
					sintheta = mathSin(rotation * deg2rad);
							
				css(this.element, {
					filter: rotation ? ['progid:DXImageTransform.Microsoft.Matrix(M11=', costheta,
						', M12=', -sintheta, ', M21=', sintheta, ', M22=', costheta,
						', sizingMethod=\'auto expand\')'].join('') : NONE
				});
			},

			/**
			 * Get the positioning correction for the span after rotating. 
			 */
			getSpanCorrection: function (width, baseline, alignCorrection, rotation, align) {

				var costheta = rotation ? mathCos(rotation * deg2rad) : 1,
					sintheta = rotation ? mathSin(rotation * deg2rad) : 0,
					height = pick(this.elemHeight, this.element.offsetHeight),
					quad,
					nonLeft = align && align !== 'left';

				// correct x and y
				this.xCorr = costheta < 0 && -width;
				this.yCorr = sintheta < 0 && -height;

				// correct for baseline and corners spilling out after rotation
				quad = costheta * sintheta < 0;
				this.xCorr += sintheta * baseline * (quad ? 1 - alignCorrection : alignCorrection);
				this.yCorr -= costheta * baseline * (rotation ? (quad ? alignCorrection : 1 - alignCorrection) : 1);
				// correct for the length/height of the text
				if (nonLeft) {
					this.xCorr -= width * alignCorrection * (costheta < 0 ? -1 : 1);
					if (rotation) {
						this.yCorr -= height * alignCorrection * (sintheta < 0 ? -1 : 1);
					}
					css(this.element, {
						textAlign: align
					});
				}
			},

			/**
			 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array
			 * as the parameter and returns a string.
			 */
			pathToVML: function (value) {
				// convert paths
				var i = value.length,
					path = [];

				while (i--) {

					// Multiply by 10 to allow subpixel precision.
					// Substracting half a pixel seems to make the coordinates
					// align with SVG, but this hasn't been tested thoroughly
					if (isNumber(value[i])) {
						path[i] = mathRound(value[i] * 10) - 5;
					} else if (value[i] === 'Z') { // close the path
						path[i] = 'x';
					} else {
						path[i] = value[i];

						// When the start X and end X coordinates of an arc are too close,
						// they are rounded to the same value above. In this case, substract or 
						// add 1 from the end X and Y positions. #186, #760, #1371, #1410.
						if (value.isArc && (value[i] === 'wa' || value[i] === 'at')) {
							// Start and end X
							if (path[i + 5] === path[i + 7]) {
								path[i + 7] += value[i + 7] > value[i + 5] ? 1 : -1;
							}
							// Start and end Y
							if (path[i + 6] === path[i + 8]) {
								path[i + 8] += value[i + 8] > value[i + 6] ? 1 : -1;
							}
						}
					}
				}

				
				// Loop up again to handle path shortcuts (#2132)
				/*while (i++ < path.length) {
					if (path[i] === 'H') { // horizontal line to
						path[i] = 'L';
						path.splice(i + 2, 0, path[i - 1]);
					} else if (path[i] === 'V') { // vertical line to
						path[i] = 'L';
						path.splice(i + 1, 0, path[i - 2]);
					}
				}*/
				return path.join(' ') || 'x';
			},

			/**
			 * Set the element's clipping to a predefined rectangle
			 *
			 * @param {String} id The id of the clip rectangle
			 */
			clip: function (clipRect) {
				var wrapper = this,
					clipMembers,
					cssRet;

				if (clipRect) {
					clipMembers = clipRect.members;
					erase(clipMembers, wrapper); // Ensure unique list of elements (#1258)
					clipMembers.push(wrapper);
					wrapper.destroyClip = function () {
						erase(clipMembers, wrapper);
					};
					cssRet = clipRect.getCSS(wrapper);

				} else {
					if (wrapper.destroyClip) {
						wrapper.destroyClip();
					}
					cssRet = { clip: docMode8 ? 'inherit' : 'rect(auto)' }; // #1214
				}

				return wrapper.css(cssRet);

			},

			/**
			 * Set styles for the element
			 * @param {Object} styles
			 */
			css: SVGElement.prototype.htmlCss,

			/**
			 * Removes a child either by removeChild or move to garbageBin.
			 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
			 */
			safeRemoveChild: function (element) {
				// discardElement will detach the node from its parent before attaching it
				// to the garbage bin. Therefore it is important that the node is attached and have parent.
				if (element.parentNode) {
					discardElement(element);
				}
			},

			/**
			 * Extend element.destroy by removing it from the clip members array
			 */
			destroy: function () {
				if (this.destroyClip) {
					this.destroyClip();
				}

				return SVGElement.prototype.destroy.apply(this);
			},

			/**
			 * Add an event listener. VML override for normalizing event parameters.
			 * @param {String} eventType
			 * @param {Function} handler
			 */
			on: function (eventType, handler) {
				// simplest possible event model for internal use
				this.element['on' + eventType] = function () {
					var evt = win.event;
					evt.target = evt.srcElement;
					handler(evt);
				};
				return this;
			},

			/**
			 * In stacked columns, cut off the shadows so that they don't overlap
			 */
			cutOffPath: function (path, length) {

				var len;

				path = path.split(/[ ,]/);
				len = path.length;

				if (len === 9 || len === 11) {
					path[len - 4] = path[len - 2] = pInt(path[len - 2]) - 10 * length;
				}
				return path.join(' ');
			},

			/**
			 * Apply a drop shadow by copying elements and giving them different strokes
			 * @param {Boolean|Object} shadowOptions
			 */
			shadow: function (shadowOptions, group, cutOff) {
				var shadows = [],
					i,
					element = this.element,
					renderer = this.renderer,
					shadow,
					elemStyle = element.style,
					markup,
					path = element.path,
					strokeWidth,
					modifiedPath,
					shadowWidth,
					shadowElementOpacity;

				// some times empty paths are not strings
				if (path && typeof path.value !== 'string') {
					path = 'x';
				}
				modifiedPath = path;

				if (shadowOptions) {
					shadowWidth = pick(shadowOptions.width, 3);
					shadowElementOpacity = (shadowOptions.opacity || 0.15) / shadowWidth;
					for (i = 1; i <= 3; i++) {

						strokeWidth = (shadowWidth * 2) + 1 - (2 * i);

						// Cut off shadows for stacked column items
						if (cutOff) {
							modifiedPath = this.cutOffPath(path.value, strokeWidth + 0.5);
						}

						markup = ['<shape isShadow="true" strokeweight="', strokeWidth,
							'" filled="false" path="', modifiedPath,
							'" coordsize="10 10" style="', element.style.cssText, '" />'];

						shadow = createElement(renderer.prepVML(markup),
							null, {
								left: pInt(elemStyle.left) + pick(shadowOptions.offsetX, 1),
								top: pInt(elemStyle.top) + pick(shadowOptions.offsetY, 1)
							}
						);
						if (cutOff) {
							shadow.cutOff = strokeWidth + 1;
						}

						// apply the opacity
						markup = ['<stroke color="', shadowOptions.color || 'black', '" opacity="', shadowElementOpacity * i, '"/>'];
						createElement(renderer.prepVML(markup), null, null, shadow);


						// insert it
						if (group) {
							group.element.appendChild(shadow);
						} else {
							element.parentNode.insertBefore(shadow, element);
						}

						// record it
						shadows.push(shadow);

					}

					this.shadows = shadows;
				}
				return this;
			},
			updateShadows: noop, // Used in SVG only

			setAttr: function (key, value) {
				if (docMode8) { // IE8 setAttribute bug
					this.element[key] = value;
				} else {
					this.element.setAttribute(key, value);
				}
			},
			classSetter: function (value) {
				// IE8 Standards mode has problems retrieving the className unless set like this
				this.element.className = value;
			},
			dashstyleSetter: function (value, key, element) {
				var strokeElem = element.getElementsByTagName('stroke')[0] ||
					createElement(this.renderer.prepVML(['<stroke/>']), null, null, element);
				strokeElem[key] = value || 'solid';
				this[key] = value; /* because changing stroke-width will change the dash length
					and cause an epileptic effect */
			},
			dSetter: function (value, key, element) {
				var i,
					shadows = this.shadows;
				value = value || [];
				this.d = value.join && value.join(' '); // used in getter for animation

				element.path = value = this.pathToVML(value);

				// update shadows
				if (shadows) {
					i = shadows.length;
					while (i--) {
						shadows[i].path = shadows[i].cutOff ? this.cutOffPath(value, shadows[i].cutOff) : value;
					}
				}
				this.setAttr(key, value);
			},
			fillSetter: function (value, key, element) {
				var nodeName = element.nodeName;
				if (nodeName === 'SPAN') { // text color
					element.style.color = value;
				} else if (nodeName !== 'IMG') { // #1336
					element.filled = value !== NONE;
					this.setAttr('fillcolor', this.renderer.color(value, element, key, this));
				}
			},
			opacitySetter: noop, // Don't bother - animation is too slow and filters introduce artifacts
			rotationSetter: function (value, key, element) {
				var style = element.style;
				this[key] = style[key] = value; // style is for #1873

				// Correction for the 1x1 size of the shape container. Used in gauge needles.
				style.left = -mathRound(mathSin(value * deg2rad) + 1) + PX;
				style.top = mathRound(mathCos(value * deg2rad)) + PX;
			},
			strokeSetter: function (value, key, element) {
				this.setAttr('strokecolor', this.renderer.color(value, element, key));
			},
			'stroke-widthSetter': function (value, key, element) {
				element.stroked = !!value; // VML "stroked" attribute
				this[key] = value; // used in getter, issue #113
				if (isNumber(value)) {
					value += PX;
				}
				this.setAttr('strokeweight', value);
			},
			titleSetter: function (value, key) {
				this.setAttr(key, value);
			},
			visibilitySetter: function (value, key, element) {

				// Handle inherited visibility
				if (value === 'inherit') {
					value = VISIBLE;
				}
				
				// Let the shadow follow the main element
				if (this.shadows) {
					each(this.shadows, function (shadow) {
						shadow.style[key] = value;
					});
				}

				// Instead of toggling the visibility CSS property, move the div out of the viewport.
				// This works around #61 and #586
				if (element.nodeName === 'DIV') {
					value = value === HIDDEN ? '-999em' : 0;

					// In order to redraw, IE7 needs the div to be visible when tucked away
					// outside the viewport. So the visibility is actually opposite of
					// the expected value. This applies to the tooltip only.
					if (!docMode8) {
						element.style[key] = value ? VISIBLE : HIDDEN;
					}
					key = 'top';
				}
				element.style[key] = value;
			},
			xSetter: function (value, key, element) {
				this[key] = value; // used in getter

				if (key === 'x') {
					key = 'left';
				} else if (key === 'y') {
					key = 'top';
				}/* else {
					value = mathMax(0, value); // don't set width or height below zero (#311)
				}*/

				// clipping rectangle special
				if (this.updateClipping) {
					this[key] = value; // the key is now 'left' or 'top' for 'x' and 'y'
					this.updateClipping();
				} else {
					// normal
					element.style[key] = value;
				}
			},
			zIndexSetter: function (value, key, element) {
				element.style[key] = value;
			}
		};
		Highcharts.VMLElement = VMLElement = extendClass(SVGElement, VMLElement);

		// Some shared setters
		VMLElement.prototype.ySetter =
			VMLElement.prototype.widthSetter = 
			VMLElement.prototype.heightSetter = 
			VMLElement.prototype.xSetter;


		/**
		 * The VML renderer
		 */
		var VMLRendererExtension = { // inherit SVGRenderer

			Element: VMLElement,
			isIE8: userAgent.indexOf('MSIE 8.0') > -1,


			/**
			 * Initialize the VMLRenderer
			 * @param {Object} container
			 * @param {Number} width
			 * @param {Number} height
			 */
			init: function (container, width, height, style) {
				var renderer = this,
					boxWrapper,
					box,
					css;

				renderer.alignedObjects = [];

				boxWrapper = renderer.createElement(DIV)
					.css(extend(this.getStyle(style), { position: RELATIVE}));
				box = boxWrapper.element;
				container.appendChild(boxWrapper.element);


				// generate the containing box
				renderer.isVML = true;
				renderer.box = box;
				renderer.boxWrapper = boxWrapper;
				renderer.cache = {};


				renderer.setSize(width, height, false);

				// The only way to make IE6 and IE7 print is to use a global namespace. However,
				// with IE8 the only way to make the dynamic shapes visible in screen and print mode
				// seems to be to add the xmlns attribute and the behaviour style inline.
				if (!doc.namespaces.hcv) {

					doc.namespaces.add('hcv', 'urn:schemas-microsoft-com:vml');

					// Setup default CSS (#2153, #2368, #2384)
					css = 'hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke' +
						'{ behavior:url(#default#VML); display: inline-block; } ';
					try {
						doc.createStyleSheet().cssText = css;
					} catch (e) {
						doc.styleSheets[0].cssText += css;
					}

				}
			},


			/**
			 * Detect whether the renderer is hidden. This happens when one of the parent elements
			 * has display: none
			 */
			isHidden: function () {
				return !this.box.offsetWidth;
			},

			/**
			 * Define a clipping rectangle. In VML it is accomplished by storing the values
			 * for setting the CSS style to all associated members.
			 *
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			clipRect: function (x, y, width, height) {

				// create a dummy element
				var clipRect = this.createElement(),
					isObj = isObject(x);

				// mimic a rectangle with its style object for automatic updating in attr
				return extend(clipRect, {
					members: [],
					count: 0,
					left: (isObj ? x.x : x) + 1,
					top: (isObj ? x.y : y) + 1,
					width: (isObj ? x.width : width) - 1,
					height: (isObj ? x.height : height) - 1,
					getCSS: function (wrapper) {
						var element = wrapper.element,
							nodeName = element.nodeName,
							isShape = nodeName === 'shape',
							inverted = wrapper.inverted,
							rect = this,
							top = rect.top - (isShape ? element.offsetTop : 0),
							left = rect.left,
							right = left + rect.width,
							bottom = top + rect.height,
							ret = {
								clip: 'rect(' +
									mathRound(inverted ? left : top) + 'px,' +
									mathRound(inverted ? bottom : right) + 'px,' +
									mathRound(inverted ? right : bottom) + 'px,' +
									mathRound(inverted ? top : left) + 'px)'
							};

						// issue 74 workaround
						if (!inverted && docMode8 && nodeName === 'DIV') {
							extend(ret, {
								width: right + PX,
								height: bottom + PX
							});
						}
						return ret;
					},

					// used in attr and animation to update the clipping of all members
					updateClipping: function () {
						each(clipRect.members, function (member) {
							if (member.element) { // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.
								member.css(clipRect.getCSS(member));
							}
						});
					}
				});

			},


			/**
			 * Take a color and return it if it's a string, make it a gradient if it's a
			 * gradient configuration object, and apply opacity.
			 *
			 * @param {Object} color The color or config object
			 */
			color: function (color, elem, prop, wrapper) {
				var renderer = this,
					colorObject,
					regexRgba = /^rgba/,
					markup,
					fillType,
					ret = NONE;

				// Check for linear or radial gradient
				if (color && color.linearGradient) {
					fillType = 'gradient';
				} else if (color && color.radialGradient) {
					fillType = 'pattern';
				}


				if (fillType) {

					var stopColor,
						stopOpacity,
						gradient = color.linearGradient || color.radialGradient,
						x1,
						y1,
						x2,
						y2,
						opacity1,
						opacity2,
						color1,
						color2,
						fillAttr = '',
						stops = color.stops,
						firstStop,
						lastStop,
						colors = [],
						addFillNode = function () {
							// Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2
							// are reversed.
							markup = ['<fill colors="' + colors.join(',') + '" opacity="', opacity2, '" o:opacity2="', opacity1,
								'" type="', fillType, '" ', fillAttr, 'focus="100%" method="any" />'];
							createElement(renderer.prepVML(markup), null, null, elem);
						};

					// Extend from 0 to 1
					firstStop = stops[0];
					lastStop = stops[stops.length - 1];
					if (firstStop[0] > 0) {
						stops.unshift([
							0,
							firstStop[1]
						]);
					}
					if (lastStop[0] < 1) {
						stops.push([
							1,
							lastStop[1]
						]);
					}

					// Compute the stops
					each(stops, function (stop, i) {
						if (regexRgba.test(stop[1])) {
							colorObject = Color(stop[1]);
							stopColor = colorObject.get('rgb');
							stopOpacity = colorObject.get('a');
						} else {
							stopColor = stop[1];
							stopOpacity = 1;
						}

						// Build the color attribute
						colors.push((stop[0] * 100) + '% ' + stopColor);

						// Only start and end opacities are allowed, so we use the first and the last
						if (!i) {
							opacity1 = stopOpacity;
							color2 = stopColor;
						} else {
							opacity2 = stopOpacity;
							color1 = stopColor;
						}
					});

					// Apply the gradient to fills only.
					if (prop === 'fill') {

						// Handle linear gradient angle
						if (fillType === 'gradient') {
							x1 = gradient.x1 || gradient[0] || 0;
							y1 = gradient.y1 || gradient[1] || 0;
							x2 = gradient.x2 || gradient[2] || 0;
							y2 = gradient.y2 || gradient[3] || 0;
							fillAttr = 'angle="' + (90  - math.atan(
								(y2 - y1) / // y vector
								(x2 - x1) // x vector
								) * 180 / mathPI) + '"';

							addFillNode();

						// Radial (circular) gradient
						} else {

							var r = gradient.r,
								sizex = r * 2,
								sizey = r * 2,
								cx = gradient.cx,
								cy = gradient.cy,
								radialReference = elem.radialReference,
								bBox,
								applyRadialGradient = function () {
									if (radialReference) {
										bBox = wrapper.getBBox();
										cx += (radialReference[0] - bBox.x) / bBox.width - 0.5;
										cy += (radialReference[1] - bBox.y) / bBox.height - 0.5;
										sizex *= radialReference[2] / bBox.width;
										sizey *= radialReference[2] / bBox.height;
									}
									fillAttr = 'src="' + defaultOptions.global.VMLRadialGradientURL + '" ' +
										'size="' + sizex + ',' + sizey + '" ' +
										'origin="0.5,0.5" ' +
										'position="' + cx + ',' + cy + '" ' +
										'color2="' + color2 + '" ';

									addFillNode();
								};

							// Apply radial gradient
							if (wrapper.added) {
								applyRadialGradient();
							} else {
								// We need to know the bounding box to get the size and position right
								wrapper.onAdd = applyRadialGradient;
							}

							// The fill element's color attribute is broken in IE8 standards mode, so we
							// need to set the parent shape's fillcolor attribute instead.
							ret = color1;
						}

					// Gradients are not supported for VML stroke, return the first color. #722.
					} else {
						ret = stopColor;
					}

				// if the color is an rgba color, split it and add a fill node
				// to hold the opacity component
				} else if (regexRgba.test(color) && elem.tagName !== 'IMG') {

					colorObject = Color(color);

					markup = ['<', prop, ' opacity="', colorObject.get('a'), '"/>'];
					createElement(this.prepVML(markup), null, null, elem);

					ret = colorObject.get('rgb');


				} else {
					var propNodes = elem.getElementsByTagName(prop); // 'stroke' or 'fill' node
					if (propNodes.length) {
						propNodes[0].opacity = 1;
						propNodes[0].type = 'solid';
					}
					ret = color;
				}

				return ret;
			},

			/**
			 * Take a VML string and prepare it for either IE8 or IE6/IE7.
			 * @param {Array} markup A string array of the VML markup to prepare
			 */
			prepVML: function (markup) {
				var vmlStyle = 'display:inline-block;behavior:url(#default#VML);',
					isIE8 = this.isIE8;

				markup = markup.join('');

				if (isIE8) { // add xmlns and style inline
					markup = markup.replace('/>', ' xmlns="urn:schemas-microsoft-com:vml" />');
					if (markup.indexOf('style="') === -1) {
						markup = markup.replace('/>', ' style="' + vmlStyle + '" />');
					} else {
						markup = markup.replace('style="', 'style="' + vmlStyle);
					}

				} else { // add namespace
					markup = markup.replace('<', '<hcv:');
				}

				return markup;
			},

			/**
			 * Create rotated and aligned text
			 * @param {String} str
			 * @param {Number} x
			 * @param {Number} y
			 */
			text: SVGRenderer.prototype.html,

			/**
			 * Create and return a path element
			 * @param {Array} path
			 */
			path: function (path) {
				var attr = {
					// subpixel precision down to 0.1 (width and height = 1px)
					coordsize: '10 10'
				};
				if (isArray(path)) {
					attr.d = path;
				} else if (isObject(path)) { // attributes
					extend(attr, path);
				}
				// create the shape
				return this.createElement('shape').attr(attr);
			},

			/**
			 * Create and return a circle element. In VML circles are implemented as
			 * shapes, which is faster than v:oval
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} r
			 */
			circle: function (x, y, r) {
				var circle = this.symbol('circle');
				if (isObject(x)) {
					r = x.r;
					y = x.y;
					x = x.x;
				}
				circle.isCircle = true; // Causes x and y to mean center (#1682)
				circle.r = r;
				return circle.attr({ x: x, y: y });
			},

			/**
			 * Create a group using an outer div and an inner v:group to allow rotating
			 * and flipping. A simple v:group would have problems with positioning
			 * child HTML elements and CSS clip.
			 *
			 * @param {String} name The name of the group
			 */
			g: function (name) {
				var wrapper,
					attribs;

				// set the class name
				if (name) {
					attribs = { 'className': PREFIX + name, 'class': PREFIX + name };
				}

				// the div to hold HTML and clipping
				wrapper = this.createElement(DIV).attr(attribs);

				return wrapper;
			},

			/**
			 * VML override to create a regular HTML image
			 * @param {String} src
			 * @param {Number} x
			 * @param {Number} y
			 * @param {Number} width
			 * @param {Number} height
			 */
			image: function (src, x, y, width, height) {
				var obj = this.createElement('img')
					.attr({ src: src });

				if (arguments.length > 1) {
					obj.attr({
						x: x,
						y: y,
						width: width,
						height: height
					});
				}
				return obj;
			},

			/**
			 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems
			 */
			createElement: function (nodeName) {
				return nodeName === 'rect' ? this.symbol(nodeName) : SVGRenderer.prototype.createElement.call(this, nodeName);	
			},

			/**
			 * In the VML renderer, each child of an inverted div (group) is inverted
			 * @param {Object} element
			 * @param {Object} parentNode
			 */
			invertChild: function (element, parentNode) {
				var ren = this,
					parentStyle = parentNode.style,
					imgStyle = element.tagName === 'IMG' && element.style; // #1111

				css(element, {
					flip: 'x',
					left: pInt(parentStyle.width) - (imgStyle ? pInt(imgStyle.top) : 1),
					top: pInt(parentStyle.height) - (imgStyle ? pInt(imgStyle.left) : 1),
					rotation: -90
				});

				// Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.
				each(element.childNodes, function (child) {
					ren.invertChild(child, element);
				});
			},

			/**
			 * Symbol definitions that override the parent SVG renderer's symbols
			 *
			 */
			symbols: {
				// VML specific arc function
				arc: function (x, y, w, h, options) {
					var start = options.start,
						end = options.end,
						radius = options.r || w || h,
						innerRadius = options.innerR,
						cosStart = mathCos(start),
						sinStart = mathSin(start),
						cosEnd = mathCos(end),
						sinEnd = mathSin(end),
						ret;

					if (end - start === 0) { // no angle, don't show it.
						return ['x'];
					}

					ret = [
						'wa', // clockwise arc to
						x - radius, // left
						y - radius, // top
						x + radius, // right
						y + radius, // bottom
						x + radius * cosStart, // start x
						y + radius * sinStart, // start y
						x + radius * cosEnd, // end x
						y + radius * sinEnd  // end y
					];

					if (options.open && !innerRadius) {
						ret.push(
							'e',
							M,
							x,// - innerRadius,
							y// - innerRadius
						);
					}

					ret.push(
						'at', // anti clockwise arc to
						x - innerRadius, // left
						y - innerRadius, // top
						x + innerRadius, // right
						y + innerRadius, // bottom
						x + innerRadius * cosEnd, // start x
						y + innerRadius * sinEnd, // start y
						x + innerRadius * cosStart, // end x
						y + innerRadius * sinStart, // end y
						'x', // finish path
						'e' // close
					);

					ret.isArc = true;
					return ret;

				},
				// Add circle symbol path. This performs significantly faster than v:oval.
				circle: function (x, y, w, h, wrapper) {

					if (wrapper) {
						w = h = 2 * wrapper.r;
					}

					// Center correction, #1682
					if (wrapper && wrapper.isCircle) {
						x -= w / 2;
						y -= h / 2;
					}

					// Return the path
					return [
						'wa', // clockwisearcto
						x, // left
						y, // top
						x + w, // right
						y + h, // bottom
						x + w, // start x
						y + h / 2,     // start y
						x + w, // end x
						y + h / 2,     // end y
						//'x', // finish path
						'e' // close
					];
				},
				/**
				 * Add rectangle symbol path which eases rotation and omits arcsize problems
				 * compared to the built-in VML roundrect shape. When borders are not rounded,
				 * use the simpler square path, else use the callout path without the arrow.
				 */
				rect: function (x, y, w, h, options) {
					return SVGRenderer.prototype.symbols[
						!defined(options) || !options.r ? 'square' : 'callout'
					].call(0, x, y, w, h, options);
				}
			}
		};
		Highcharts.VMLRenderer = VMLRenderer = function () {
			this.init.apply(this, arguments);
		};
		VMLRenderer.prototype = merge(SVGRenderer.prototype, VMLRendererExtension);

			// general renderer
			Renderer = VMLRenderer;
		}

		// This method is used with exporting in old IE, when emulating SVG (see #2314)
		SVGRenderer.prototype.measureSpanWidth = function (text, styles) {
			var measuringSpan = doc.createElement('span'),
				offsetWidth,
			textNode = doc.createTextNode(text);

			measuringSpan.appendChild(textNode);
			css(measuringSpan, styles);
			this.box.appendChild(measuringSpan);
			offsetWidth = measuringSpan.offsetWidth;
			discardElement(measuringSpan); // #2463
			return offsetWidth;
		};


		/* ****************************************************************************
		 *                                                                            *
		 * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *
		 *                                                                            *
		 *****************************************************************************/
		/* ****************************************************************************
		 *                                                                            *
		 * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *
		 * TARGETING THAT SYSTEM.                                                     *
		 *                                                                            *
		 *****************************************************************************/
		var CanVGRenderer,
			CanVGController;

		if (useCanVG) {
			/**
			 * The CanVGRenderer is empty from start to keep the source footprint small.
			 * When requested, the CanVGController downloads the rest of the source packaged
			 * together with the canvg library.
			 */
			Highcharts.CanVGRenderer = CanVGRenderer = function () {
				// Override the global SVG namespace to fake SVG/HTML that accepts CSS
				SVG_NS = 'http://www.w3.org/1999/xhtml';
			};

			/**
			 * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but 
			 * the implementation from SvgRenderer will not be merged in until first render.
			 */
			CanVGRenderer.prototype.symbols = {};

			/**
			 * Handles on demand download of canvg rendering support.
			 */
			CanVGController = (function () {
				// List of renderering calls
				var deferredRenderCalls = [];

				/**
				 * When downloaded, we are ready to draw deferred charts.
				 */
				function drawDeferred() {
					var callLength = deferredRenderCalls.length,
						callIndex;

					// Draw all pending render calls
					for (callIndex = 0; callIndex < callLength; callIndex++) {
						deferredRenderCalls[callIndex]();
					}
					// Clear the list
					deferredRenderCalls = [];
				}

				return {
					push: function (func, scriptLocation) {
						// Only get the script once
						if (deferredRenderCalls.length === 0) {
							getScript(scriptLocation, drawDeferred);
						}
						// Register render call
						deferredRenderCalls.push(func);
					}
				};
			}());

			Renderer = CanVGRenderer;
		} // end CanVGRenderer

		/* ****************************************************************************
		 *                                                                            *
		 * END OF ANDROID < 3 SPECIFIC CODE                                           *
		 *                                                                            *
		 *****************************************************************************/

		/**
		 * The Tick class
		 */
		function Tick(axis, pos, type, noLabel) {
			this.axis = axis;
			this.pos = pos;
			this.type = type || '';
			this.isNew = true;

			if (!type && !noLabel) {
				this.addLabel();
			}
		}

		Tick.prototype = {
			/**
			 * Write the tick label
			 */
			addLabel: function () {
				var tick = this,
					axis = tick.axis,
					options = axis.options,
					chart = axis.chart,
					categories = axis.categories,
					names = axis.names,
					pos = tick.pos,
					labelOptions = options.labels,
					str,
					tickPositions = axis.tickPositions,
					isFirst = pos === tickPositions[0],
					isLast = pos === tickPositions[tickPositions.length - 1],
					value = categories ?
						pick(categories[pos], names[pos], pos) :
						pos,
					label = tick.label,
					tickPositionInfo = tickPositions.info,
					dateTimeLabelFormat;

				// Set the datetime label format. If a higher rank is set for this position, use that. If not,
				// use the general format.
				if (axis.isDatetimeAxis && tickPositionInfo) {
					dateTimeLabelFormat = options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos] || tickPositionInfo.unitName];
				}
				// set properties for access in render method
				tick.isFirst = isFirst;
				tick.isLast = isLast;

				// get the string
				str = axis.labelFormatter.call({
					axis: axis,
					chart: chart,
					isFirst: isFirst,
					isLast: isLast,
					dateTimeLabelFormat: dateTimeLabelFormat,
					value: axis.isLog ? correctFloat(lin2log(value)) : value
				});

				// prepare CSS
				//css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };
				
				// first call
				if (!defined(label)) {

					tick.label = label =
						defined(str) && labelOptions.enabled ?
							chart.renderer.text(
									str,
									0,
									0,
									labelOptions.useHTML
								)
								//.attr(attr)
								// without position absolute, IE export sometimes is wrong
								.css(merge(labelOptions.style))
								.add(axis.labelGroup) :
							null;
					tick.labelLength = label && label.getBBox().width; // Un-rotated length
					tick.rotation = 0; // Base value to detect change for new calls to getBBox

				// update
				} else if (label) {
					label.attr({ text: str });
				}
			},

			/**
			 * Get the offset height or width of the label
			 */
			getLabelSize: function () {
				return this.label ?
					this.label.getBBox()[this.axis.horiz ? 'height' : 'width'] :
					0;
			},

			/**
			 * Handle the label overflow by adjusting the labels to the left and right edge, or
			 * hide them if they collide into the neighbour label.
			 */
			handleOverflow: function (xy) {
				var axis = this.axis,
					pxPos = xy.x,
					chartWidth = axis.chart.chartWidth,
					spacing = axis.chart.spacing,
					leftBound = pick(axis.labelLeft, mathMin(axis.pos, spacing[3])),
					rightBound = pick(axis.labelRight, mathMax(axis.pos + axis.len, chartWidth - spacing[1])),
					label = this.label,
					rotation = this.rotation,
					factor = { left: 0, center: 0.5, right: 1 }[axis.labelAlign],
					labelWidth = label.getBBox().width,
					slotWidth = axis.slotWidth,
					xCorrection = factor,
					goRight = 1,
					leftPos,
					rightPos,
					textWidth,
					css = {};

				// Check if the label overshoots the chart spacing box. If it does, move it.
				// If it now overshoots the slotWidth, add ellipsis.
				if (!rotation) {
					leftPos = pxPos - factor * labelWidth;
					rightPos = pxPos + (1 - factor) * labelWidth;

					if (leftPos < leftBound) {
						slotWidth = xy.x + slotWidth * (1 - factor) - leftBound;
					} else if (rightPos > rightBound) {
						slotWidth = rightBound - xy.x + slotWidth * factor;
						goRight = -1;
					}

					slotWidth = mathMin(axis.slotWidth, slotWidth); // #4177
					if (slotWidth < axis.slotWidth && axis.labelAlign === 'center') {
						xy.x += goRight * (axis.slotWidth - slotWidth - xCorrection * (axis.slotWidth - mathMin(labelWidth, slotWidth)));				
					}
					// If the label width exceeds the available space, set a text width to be 
					// picked up below. Also, if a width has been set before, we need to set a new
					// one because the reported labelWidth will be limited by the box (#3938).
					if (labelWidth > slotWidth || (axis.autoRotation && label.styles.width)) {
						textWidth = slotWidth;
					}

				// Add ellipsis to prevent rotated labels to be clipped against the edge of the chart
				} else if (rotation < 0 && pxPos - factor * labelWidth < leftBound) {
					textWidth = mathRound(pxPos / mathCos(rotation * deg2rad) - leftBound);
				} else if (rotation > 0 && pxPos + factor * labelWidth > rightBound) {
					textWidth = mathRound((chartWidth - pxPos) / mathCos(rotation * deg2rad));
				}

				if (textWidth) {
					css.width = textWidth;
					if (!axis.options.labels.style.textOverflow) {
						css.textOverflow = 'ellipsis';
					}
					label.css(css);
				}
			},

			/**
			 * Get the x and y position for ticks and labels
			 */
			getPosition: function (horiz, pos, tickmarkOffset, old) {
				var axis = this.axis,
					chart = axis.chart,
					cHeight = (old && chart.oldChartHeight) || chart.chartHeight;

				return {
					x: horiz ?
						axis.translate(pos + tickmarkOffset, null, null, old) + axis.transB :
						axis.left + axis.offset + (axis.opposite ? ((old && chart.oldChartWidth) || chart.chartWidth) - axis.right - axis.left : 0),

					y: horiz ?
						cHeight - axis.bottom + axis.offset - (axis.opposite ? axis.height : 0) :
						cHeight - axis.translate(pos + tickmarkOffset, null, null, old) - axis.transB
				};

			},

			/**
			 * Get the x, y position of the tick label
			 */
			getLabelPosition: function (x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {
				var axis = this.axis,
					transA = axis.transA,
					reversed = axis.reversed,
					staggerLines = axis.staggerLines,
					rotCorr = axis.tickRotCorr || { x: 0, y: 0 },
					yOffset = pick(labelOptions.y, rotCorr.y + (axis.side === 2 ? 8 : -(label.getBBox().height / 2))),
					line;

				x = x + labelOptions.x + rotCorr.x - (tickmarkOffset && horiz ?
					tickmarkOffset * transA * (reversed ? -1 : 1) : 0);
				y = y + yOffset - (tickmarkOffset && !horiz ?
					tickmarkOffset * transA * (reversed ? 1 : -1) : 0);

				// Correct for staggered labels
				if (staggerLines) {
					line = (index / (step || 1) % staggerLines);
					y += line * (axis.labelOffset / staggerLines);
				}

				return {
					x: x,
					y: mathRound(y)
				};
			},

			/**
			 * Extendible method to return the path of the marker
			 */
			getMarkPath: function (x, y, tickLength, tickWidth, horiz, renderer) {
				return renderer.crispLine([
						M,
						x,
						y,
						L,
						x + (horiz ? 0 : -tickLength),
						y + (horiz ? tickLength : 0)
					], tickWidth);
			},

			/**
			 * Put everything in place
			 *
			 * @param index {Number}
			 * @param old {Boolean} Use old coordinates to prepare an animation into new position
			 */
			render: function (index, old, opacity) {
				var tick = this,
					axis = tick.axis,
					options = axis.options,
					chart = axis.chart,
					renderer = chart.renderer,
					horiz = axis.horiz,
					type = tick.type,
					label = tick.label,
					pos = tick.pos,
					labelOptions = options.labels,
					gridLine = tick.gridLine,
					gridPrefix = type ? type + 'Grid' : 'grid',
					tickPrefix = type ? type + 'Tick' : 'tick',
					gridLineWidth = options[gridPrefix + 'LineWidth'],
					gridLineColor = options[gridPrefix + 'LineColor'],
					dashStyle = options[gridPrefix + 'LineDashStyle'],
					tickLength = options[tickPrefix + 'Length'],
					tickWidth = pick(options[tickPrefix + 'Width'], !type && axis.isXAxis ? 1 : 0), // X axis defaults to 1
					tickColor = options[tickPrefix + 'Color'],
					tickPosition = options[tickPrefix + 'Position'],
					gridLinePath,
					mark = tick.mark,
					markPath,
					step = /*axis.labelStep || */labelOptions.step,
					attribs,
					show = true,
					tickmarkOffset = axis.tickmarkOffset,
					xy = tick.getPosition(horiz, pos, tickmarkOffset, old),
					x = xy.x,
					y = xy.y,
					reverseCrisp = ((horiz && x === axis.pos + axis.len) || (!horiz && y === axis.pos)) ? -1 : 1; // #1480, #1687

				opacity = pick(opacity, 1);
				this.isActive = true;

				// create the grid line
				if (gridLineWidth) {
					gridLinePath = axis.getPlotLinePath(pos + tickmarkOffset, gridLineWidth * reverseCrisp, old, true);

					if (gridLine === UNDEFINED) {
						attribs = {
							stroke: gridLineColor,
							'stroke-width': gridLineWidth
						};
						if (dashStyle) {
							attribs.dashstyle = dashStyle;
						}
						if (!type) {
							attribs.zIndex = 1;
						}
						if (old) {
							attribs.opacity = 0;
						}
						tick.gridLine = gridLine =
							gridLineWidth ?
								renderer.path(gridLinePath)
									.attr(attribs).add(axis.gridGroup) :
								null;
					}

					// If the parameter 'old' is set, the current call will be followed
					// by another call, therefore do not do any animations this time
					if (!old && gridLine && gridLinePath) {
						gridLine[tick.isNew ? 'attr' : 'animate']({
							d: gridLinePath,
							opacity: opacity
						});
					}
				}

				// create the tick mark
				if (tickWidth && tickLength) {

					// negate the length
					if (tickPosition === 'inside') {
						tickLength = -tickLength;
					}
					if (axis.opposite) {
						tickLength = -tickLength;
					}

					markPath = tick.getMarkPath(x, y, tickLength, tickWidth * reverseCrisp, horiz, renderer);
					if (mark) { // updating
						mark.animate({
							d: markPath,
							opacity: opacity
						});
					} else { // first time
						tick.mark = renderer.path(
							markPath
						).attr({
							stroke: tickColor,
							'stroke-width': tickWidth,
							opacity: opacity
						}).add(axis.axisGroup);
					}
				}

				// the label is created on init - now move it into place
				if (label && !isNaN(x)) {
					label.xy = xy = tick.getLabelPosition(x, y, label, horiz, labelOptions, tickmarkOffset, index, step);

					// Apply show first and show last. If the tick is both first and last, it is
					// a single centered tick, in which case we show the label anyway (#2100).
					if ((tick.isFirst && !tick.isLast && !pick(options.showFirstLabel, 1)) ||
							(tick.isLast && !tick.isFirst && !pick(options.showLastLabel, 1))) {
						show = false;

					// Handle label overflow and show or hide accordingly
					} else if (horiz && !axis.isRadial && !labelOptions.step && !labelOptions.rotation && !old && opacity !== 0) {
						tick.handleOverflow(xy);
					}

					// apply step
					if (step && index % step) {
						// show those indices dividable by step
						show = false;
					}

					// Set the new position, and show or hide
					if (show && !isNaN(xy.y)) {
						xy.opacity = opacity;
						label[tick.isNew ? 'attr' : 'animate'](xy);
						tick.isNew = false;
					} else {
						label.attr('y', -9999); // #1338
					}
				}
			},

			/**
			 * Destructor for the tick prototype
			 */
			destroy: function () {
				destroyObjectProperties(this, this.axis);
			}
		};

		/**
		 * The object wrapper for plot lines and plot bands
		 * @param {Object} options
		 */
		Highcharts.PlotLineOrBand = function (axis, options) {
			this.axis = axis;

			if (options) {
				this.options = options;
				this.id = options.id;
			}
		};

		Highcharts.PlotLineOrBand.prototype = {
			
			/**
			 * Render the plot line or plot band. If it is already existing,
			 * move it.
			 */
			render: function () {
				var plotLine = this,
					axis = plotLine.axis,
					horiz = axis.horiz,
					options = plotLine.options,
					optionsLabel = options.label,
					label = plotLine.label,
					width = options.width,
					to = options.to,
					from = options.from,
					isBand = defined(from) && defined(to),
					value = options.value,
					dashStyle = options.dashStyle,
					svgElem = plotLine.svgElem,
					path = [],
					addEvent,
					eventType,
					xs,
					ys,
					x,
					y,
					color = options.color,
					zIndex = options.zIndex,
					events = options.events,
					attribs = {},
					renderer = axis.chart.renderer;

				// logarithmic conversion
				if (axis.isLog) {
					from = log2lin(from);
					to = log2lin(to);
					value = log2lin(value);
				}

				// plot line
				if (width) {
					path = axis.getPlotLinePath(value, width);
					attribs = {
						stroke: color,
						'stroke-width': width
					};
					if (dashStyle) {
						attribs.dashstyle = dashStyle;
					}
				} else if (isBand) { // plot band

					path = axis.getPlotBandPath(from, to, options);
					if (color) {
						attribs.fill = color;
					}
					if (options.borderWidth) {
						attribs.stroke = options.borderColor;
						attribs['stroke-width'] = options.borderWidth;
					}
				} else {
					return;
				}
				// zIndex
				if (defined(zIndex)) {
					attribs.zIndex = zIndex;
				}

				// common for lines and bands
				if (svgElem) {
					if (path) {
						svgElem.animate({
							d: path
						}, null, svgElem.onGetPath);
					} else {
						svgElem.hide();
						svgElem.onGetPath = function () {
							svgElem.show();
						};
						if (label) {
							plotLine.label = label = label.destroy();
						}
					}
				} else if (path && path.length) {
					plotLine.svgElem = svgElem = renderer.path(path)
						.attr(attribs).add();

					// events
					if (events) {
						addEvent = function (eventType) {
							svgElem.on(eventType, function (e) {
								events[eventType].apply(plotLine, [e]);
							});
						};
						for (eventType in events) {
							addEvent(eventType);
						}
					}
				}

				// the plot band/line label
				if (optionsLabel && defined(optionsLabel.text) && path && path.length && axis.width > 0 && axis.height > 0) {
					// apply defaults
					optionsLabel = merge({
						align: horiz && isBand && 'center',
						x: horiz ? !isBand && 4 : 10,
						verticalAlign : !horiz && isBand && 'middle',
						y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,
						rotation: horiz && !isBand && 90
					}, optionsLabel);

					// add the SVG element
					if (!label) {
						attribs = {
							align: optionsLabel.textAlign || optionsLabel.align,
							rotation: optionsLabel.rotation
						};
						if (defined(zIndex)) {
							attribs.zIndex = zIndex;
						}
						plotLine.label = label = renderer.text(
								optionsLabel.text,
								0,
								0,
								optionsLabel.useHTML
							)
							.attr(attribs)
							.css(optionsLabel.style)
							.add();
					}

					// get the bounding box and align the label
					// #3000 changed to better handle choice between plotband or plotline
					xs = [path[1], path[4], (isBand ? path[6] : path[1])];
					ys = [path[2], path[5], (isBand ? path[7] : path[2])];
					x = arrayMin(xs);
					y = arrayMin(ys);

					label.align(optionsLabel, false, {
						x: x,
						y: y,
						width: arrayMax(xs) - x,
						height: arrayMax(ys) - y
					});
					label.show();

				} else if (label) { // move out of sight
					label.hide();
				}

				// chainable
				return plotLine;
			},

			/**
			 * Remove the plot line or band
			 */
			destroy: function () {
				// remove it from the lookup
				erase(this.axis.plotLinesAndBands, this);
				
				delete this.axis;
				destroyObjectProperties(this);
			}
		};

		/**
		 * Object with members for extending the Axis prototype
		 */

		AxisPlotLineOrBandExtension = {

			/**
			 * Create the path for a plot band
			 */ 
			getPlotBandPath: function (from, to) {
				var toPath = this.getPlotLinePath(to, null, null, true),
					path = this.getPlotLinePath(from, null, null, true);

				if (path && toPath && path.toString() !== toPath.toString()) { // #3836
					path.push(
						toPath[4],
						toPath[5],
						toPath[1],
						toPath[2]
					);
				} else { // outside the axis area
					path = null;
				}
				
				return path;
			},

			addPlotBand: function (options) {
				return this.addPlotBandOrLine(options, 'plotBands');
			},
			
			addPlotLine: function (options) {
				return this.addPlotBandOrLine(options, 'plotLines');
			},

			/**
			 * Add a plot band or plot line after render time
			 *
			 * @param options {Object} The plotBand or plotLine configuration object
			 */
			addPlotBandOrLine: function (options, coll) {
				var obj = new Highcharts.PlotLineOrBand(this, options).render(),
					userOptions = this.userOptions;

				if (obj) { // #2189
					// Add it to the user options for exporting and Axis.update
					if (coll) {
						userOptions[coll] = userOptions[coll] || [];
						userOptions[coll].push(options); 
					}
					this.plotLinesAndBands.push(obj); 
				}
				
				return obj;
			},

			/**
			 * Remove a plot band or plot line from the chart by id
			 * @param {Object} id
			 */
			removePlotBandOrLine: function (id) {
				var plotLinesAndBands = this.plotLinesAndBands,
					options = this.options,
					userOptions = this.userOptions,
					i = plotLinesAndBands.length;
				while (i--) {
					if (plotLinesAndBands[i].id === id) {
						plotLinesAndBands[i].destroy();
					}
				}
				each([options.plotLines || [], userOptions.plotLines || [], options.plotBands || [], userOptions.plotBands || []], function (arr) {
					i = arr.length;
					while (i--) {
						if (arr[i].id === id) {
							erase(arr, arr[i]);
						}
					}
				});
			}
		};

		/**
		 * Create a new axis object
		 * @param {Object} chart
		 * @param {Object} options
		 */
		var Axis = Highcharts.Axis = function () {
			this.init.apply(this, arguments);
		};

		Axis.prototype = {

			/**
			 * Default options for the X axis - the Y axis has extended defaults
			 */
			defaultOptions: {
				// allowDecimals: null,
				// alternateGridColor: null,
				// categories: [],
				dateTimeLabelFormats: {
					millisecond: '%H:%M:%S.%L',
					second: '%H:%M:%S',
					minute: '%H:%M',
					hour: '%H:%M',
					day: '%e. %b',
					week: '%e. %b',
					month: '%b \'%y',
					year: '%Y'
				},
				endOnTick: false,
				gridLineColor: '#D8D8D8',
				// gridLineDashStyle: 'solid',
				// gridLineWidth: 0,
				// reversed: false,

				labels: {
					enabled: true,
					// rotation: 0,
					// align: 'center',
					// step: null,
					style: {
						color: '#606060',
						cursor: 'default',
						fontSize: '11px'
					},
					x: 0,
					y: 15
					/*formatter: function () {
						return this.value;
					},*/
				},
				lineColor: '#C0D0E0',
				lineWidth: 1,
				//linkedTo: null,
				//max: undefined,
				//min: undefined,
				minPadding: 0.01,
				maxPadding: 0.01,
				//minRange: null,
				minorGridLineColor: '#E0E0E0',
				// minorGridLineDashStyle: null,
				minorGridLineWidth: 1,
				minorTickColor: '#A0A0A0',
				//minorTickInterval: null,
				minorTickLength: 2,
				minorTickPosition: 'outside', // inside or outside
				//minorTickWidth: 0,
				//opposite: false,
				//offset: 0,
				//plotBands: [{
				//	events: {},
				//	zIndex: 1,
				//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
				//}],
				//plotLines: [{
				//	events: {}
				//  dashStyle: {}
				//	zIndex:
				//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
				//}],
				//reversed: false,
				// showFirstLabel: true,
				// showLastLabel: true,
				startOfWeek: 1,
				startOnTick: false,
				tickColor: '#C0D0E0',
				//tickInterval: null,
				tickLength: 10,
				tickmarkPlacement: 'between', // on or between
				tickPixelInterval: 100,
				tickPosition: 'outside',
				//tickWidth: 1,
				title: {
					//text: null,
					align: 'middle', // low, middle or high
					//margin: 0 for horizontal, 10 for vertical axes,
					//rotation: 0,
					//side: 'outside',
					style: {
						color: '#707070'
					}
					//x: 0,
					//y: 0
				},
				type: 'linear' // linear, logarithmic or datetime
			},

			/**
			 * This options set extends the defaultOptions for Y axes
			 */
			defaultYAxisOptions: {
				endOnTick: true,
				gridLineWidth: 1,
				tickPixelInterval: 72,
				showLastLabel: true,
				labels: {
					x: -8,
					y: 3
				},
				lineWidth: 0,
				maxPadding: 0.05,
				minPadding: 0.05,
				startOnTick: true,
				//tickWidth: 0,
				title: {
					rotation: 270,
					text: 'Values'
				},
				stackLabels: {
					enabled: false,
					//align: dynamic,
					//y: dynamic,
					//x: dynamic,
					//verticalAlign: dynamic,
					//textAlign: dynamic,
					//rotation: 0,
					formatter: function () {
						return Highcharts.numberFormat(this.total, -1);
					},
					style: merge(defaultPlotOptions.line.dataLabels.style, { color: '#000000' })
				}
			},

			/**
			 * These options extend the defaultOptions for left axes
			 */
			defaultLeftAxisOptions: {
				labels: {
					x: -15,
					y: null
				},
				title: {
					rotation: 270
				}
			},

			/**
			 * These options extend the defaultOptions for right axes
			 */
			defaultRightAxisOptions: {
				labels: {
					x: 15,
					y: null
				},
				title: {
					rotation: 90
				}
			},

			/**
			 * These options extend the defaultOptions for bottom axes
			 */
			defaultBottomAxisOptions: {
				labels: {
					autoRotation: [-45],
					x: 0,
					y: null // based on font size
					// overflow: undefined,
					// staggerLines: null
				},
				title: {
					rotation: 0
				}
			},
			/**
			 * These options extend the defaultOptions for top axes
			 */
			defaultTopAxisOptions: {
				labels: {
					autoRotation: [-45],
					x: 0,
					y: -15
					// overflow: undefined
					// staggerLines: null
				},
				title: {
					rotation: 0
				}
			},

			/**
			 * Initialize the axis
			 */
			init: function (chart, userOptions) {


				var isXAxis = userOptions.isX,
					axis = this;

				axis.chart = chart;

				// Flag, is the axis horizontal
				axis.horiz = chart.inverted ? !isXAxis : isXAxis;

				// Flag, isXAxis
				axis.isXAxis = isXAxis;
				axis.coll = isXAxis ? 'xAxis' : 'yAxis';

				axis.opposite = userOptions.opposite; // needed in setOptions
				axis.side = userOptions.side || (axis.horiz ?
						(axis.opposite ? 0 : 2) : // top : bottom
						(axis.opposite ? 1 : 3));  // right : left

				axis.setOptions(userOptions);


				var options = this.options,
					type = options.type,
					isDatetimeAxis = type === 'datetime';

				axis.labelFormatter = options.labels.formatter || axis.defaultLabelFormatter; // can be overwritten by dynamic format


				// Flag, stagger lines or not
				axis.userOptions = userOptions;

				//axis.axisTitleMargin = UNDEFINED,// = options.title.margin,
				axis.minPixelPadding = 0;
				//axis.ignoreMinPadding = UNDEFINED; // can be set to true by a column or bar series
				//axis.ignoreMaxPadding = UNDEFINED;

				axis.reversed = options.reversed;
				axis.zoomEnabled = options.zoomEnabled !== false;

				// Initial categories
				axis.categories = options.categories || type === 'category';
				axis.names = axis.names || []; // Preserve on update (#3830)

				// Elements
				//axis.axisGroup = UNDEFINED;
				//axis.gridGroup = UNDEFINED;
				//axis.axisTitle = UNDEFINED;
				//axis.axisLine = UNDEFINED;

				// Shorthand types
				axis.isLog = type === 'logarithmic';
				axis.isDatetimeAxis = isDatetimeAxis;

				// Flag, if axis is linked to another axis
				axis.isLinked = defined(options.linkedTo);
				// Linked axis.
				//axis.linkedParent = UNDEFINED;

				// Tick positions
				//axis.tickPositions = UNDEFINED; // array containing predefined positions
				// Tick intervals
				//axis.tickInterval = UNDEFINED;
				//axis.minorTickInterval = UNDEFINED;

				
				// Major ticks
				axis.ticks = {};
				axis.labelEdge = [];
				// Minor ticks
				axis.minorTicks = {};

				// List of plotLines/Bands
				axis.plotLinesAndBands = [];

				// Alternate bands
				axis.alternateBands = {};

				// Axis metrics
				//axis.left = UNDEFINED;
				//axis.top = UNDEFINED;
				//axis.width = UNDEFINED;
				//axis.height = UNDEFINED;
				//axis.bottom = UNDEFINED;
				//axis.right = UNDEFINED;
				//axis.transA = UNDEFINED;
				//axis.transB = UNDEFINED;
				//axis.oldTransA = UNDEFINED;
				axis.len = 0;
				//axis.oldMin = UNDEFINED;
				//axis.oldMax = UNDEFINED;
				//axis.oldUserMin = UNDEFINED;
				//axis.oldUserMax = UNDEFINED;
				//axis.oldAxisLength = UNDEFINED;
				axis.minRange = axis.userMinRange = options.minRange || options.maxZoom;
				axis.range = options.range;
				axis.offset = options.offset || 0;


				// Dictionary for stacks
				axis.stacks = {};
				axis.oldStacks = {};
				axis.stacksTouched = 0;

				// Min and max in the data
				//axis.dataMin = UNDEFINED,
				//axis.dataMax = UNDEFINED,

				// The axis range
				axis.max = null;
				axis.min = null;

				// User set min and max
				//axis.userMin = UNDEFINED,
				//axis.userMax = UNDEFINED,

				// Crosshair options
				axis.crosshair = pick(options.crosshair, splat(chart.options.tooltip.crosshairs)[isXAxis ? 0 : 1], false);
				// Run Axis

				var eventType,
					events = axis.options.events;

				// Register
				if (inArray(axis, chart.axes) === -1) { // don't add it again on Axis.update()
					if (isXAxis && !this.isColorAxis) { // #2713
						chart.axes.splice(chart.xAxis.length, 0, axis);
					} else {
						chart.axes.push(axis);
					}

					chart[axis.coll].push(axis);
				}

				axis.series = axis.series || []; // populated by Series

				// inverted charts have reversed xAxes as default
				if (chart.inverted && isXAxis && axis.reversed === UNDEFINED) {
					axis.reversed = true;
				}

				axis.removePlotBand = axis.removePlotBandOrLine;
				axis.removePlotLine = axis.removePlotBandOrLine;


				// register event listeners
				for (eventType in events) {
					addEvent(axis, eventType, events[eventType]);
				}

				// extend logarithmic axis
				if (axis.isLog) {
					axis.val2lin = log2lin;
					axis.lin2val = lin2log;
				}
			},

			/**
			 * Merge and set options
			 */
			setOptions: function (userOptions) {
				this.options = merge(
					this.defaultOptions,
					this.isXAxis ? {} : this.defaultYAxisOptions,
					[this.defaultTopAxisOptions, this.defaultRightAxisOptions,
						this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side],
					merge(
						defaultOptions[this.coll], // if set in setOptions (#1053)
						userOptions
					)
				);
			},

			/**
			 * The default label formatter. The context is a special config object for the label.
			 */
			defaultLabelFormatter: function () {
				var axis = this.axis,
					value = this.value,
					categories = axis.categories,
					dateTimeLabelFormat = this.dateTimeLabelFormat,
					numericSymbols = defaultOptions.lang.numericSymbols,
					i = numericSymbols && numericSymbols.length,
					multi,
					ret,
					formatOption = axis.options.labels.format,

					// make sure the same symbol is added for all labels on a linear axis
					numericSymbolDetector = axis.isLog ? value : axis.tickInterval;

				if (formatOption) {
					ret = format(formatOption, this);

				} else if (categories) {
					ret = value;

				} else if (dateTimeLabelFormat) { // datetime axis
					ret = dateFormat(dateTimeLabelFormat, value);

				} else if (i && numericSymbolDetector >= 1000) {
					// Decide whether we should add a numeric symbol like k (thousands) or M (millions).
					// If we are to enable this in tooltip or other places as well, we can move this
					// logic to the numberFormatter and enable it by a parameter.
					while (i-- && ret === UNDEFINED) {
						multi = Math.pow(1000, i + 1);
						if (numericSymbolDetector >= multi && (value * 10) % multi === 0 && numericSymbols[i] !== null) {
							ret = Highcharts.numberFormat(value / multi, -1) + numericSymbols[i];
						}
					}
				}

				if (ret === UNDEFINED) {
					if (mathAbs(value) >= 10000) { // add thousands separators
						ret = Highcharts.numberFormat(value, -1);

					} else { // small numbers
						ret = Highcharts.numberFormat(value, -1, UNDEFINED, ''); // #2466
					}
				}

				return ret;
			},

			/**
			 * Get the minimum and maximum for the series of each axis
			 */
			getSeriesExtremes: function () {
				var axis = this,
					chart = axis.chart;

				axis.hasVisibleSeries = false;

				// Reset properties in case we're redrawing (#3353)
				axis.dataMin = axis.dataMax = axis.ignoreMinPadding = axis.ignoreMaxPadding = null;
				
				if (axis.buildStacks) {
					axis.buildStacks();
				}

				// loop through this axis' series
				each(axis.series, function (series) {

					if (series.visible || !chart.options.chart.ignoreHiddenSeries) {

						var seriesOptions = series.options,
							xData,
							threshold = seriesOptions.threshold,
							seriesDataMin,
							seriesDataMax;

						axis.hasVisibleSeries = true;

						// Validate threshold in logarithmic axes
						if (axis.isLog && threshold <= 0) {
							threshold = null;
						}

						// Get dataMin and dataMax for X axes
						if (axis.isXAxis) {
							xData = series.xData;
							if (xData.length) {
								axis.dataMin = mathMin(pick(axis.dataMin, xData[0]), arrayMin(xData));
								axis.dataMax = mathMax(pick(axis.dataMax, xData[0]), arrayMax(xData));
							}

						// Get dataMin and dataMax for Y axes, as well as handle stacking and processed data
						} else {

							// Get this particular series extremes
							series.getExtremes();
							seriesDataMax = series.dataMax;
							seriesDataMin = series.dataMin;

							// Get the dataMin and dataMax so far. If percentage is used, the min and max are
							// always 0 and 100. If seriesDataMin and seriesDataMax is null, then series
							// doesn't have active y data, we continue with nulls
							if (defined(seriesDataMin) && defined(seriesDataMax)) {
								axis.dataMin = mathMin(pick(axis.dataMin, seriesDataMin), seriesDataMin);
								axis.dataMax = mathMax(pick(axis.dataMax, seriesDataMax), seriesDataMax);
							}

							// Adjust to threshold
							if (defined(threshold)) {
								if (axis.dataMin >= threshold) {
									axis.dataMin = threshold;
									axis.ignoreMinPadding = true;
								} else if (axis.dataMax < threshold) {
									axis.dataMax = threshold;
									axis.ignoreMaxPadding = true;
								}
							}
						}
					}
				});
			},

			/**
			 * Translate from axis value to pixel position on the chart, or back
			 *
			 */
			translate: function (val, backwards, cvsCoord, old, handleLog, pointPlacement) {
				var axis = this.linkedParent || this, // #1417
					sign = 1,
					cvsOffset = 0,
					localA = old ? axis.oldTransA : axis.transA,
					localMin = old ? axis.oldMin : axis.min,
					returnValue,
					minPixelPadding = axis.minPixelPadding,
					doPostTranslate = (axis.doPostTranslate || (axis.isLog && handleLog)) && axis.lin2val;

				if (!localA) {
					localA = axis.transA;
				}

				// In vertical axes, the canvas coordinates start from 0 at the top like in
				// SVG.
				if (cvsCoord) {
					sign *= -1; // canvas coordinates inverts the value
					cvsOffset = axis.len;
				}

				// Handle reversed axis
				if (axis.reversed) {
					sign *= -1;
					cvsOffset -= sign * (axis.sector || axis.len);
				}

				// From pixels to value
				if (backwards) { // reverse translation

					val = val * sign + cvsOffset;
					val -= minPixelPadding;
					returnValue = val / localA + localMin; // from chart pixel to value
					if (doPostTranslate) { // log and ordinal axes
						returnValue = axis.lin2val(returnValue);
					}

				// From value to pixels
				} else {
					if (doPostTranslate) { // log and ordinal axes
						val = axis.val2lin(val);
					}
					if (pointPlacement === 'between') {
						pointPlacement = 0.5;
					}
					returnValue = sign * (val - localMin) * localA + cvsOffset + (sign * minPixelPadding) +
						(isNumber(pointPlacement) ? localA * pointPlacement * axis.pointRange : 0);
				}

				return returnValue;
			},

			/**
			 * Utility method to translate an axis value to pixel position.
			 * @param {Number} value A value in terms of axis units
			 * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart
			 *        or just the axis/pane itself.
			 */
			toPixels: function (value, paneCoordinates) {
				return this.translate(value, false, !this.horiz, null, true) + (paneCoordinates ? 0 : this.pos);
			},

			/*
			 * Utility method to translate a pixel position in to an axis value
			 * @param {Number} pixel The pixel value coordinate
			 * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the
			 *        axis/pane itself.
			 */
			toValue: function (pixel, paneCoordinates) {
				return this.translate(pixel - (paneCoordinates ? 0 : this.pos), true, !this.horiz, null, true);
			},

			/**
			 * Create the path for a plot line that goes from the given value on
			 * this axis, across the plot to the opposite side
			 * @param {Number} value
			 * @param {Number} lineWidth Used for calculation crisp line
			 * @param {Number] old Use old coordinates (for resizing and rescaling)
			 */
			getPlotLinePath: function (value, lineWidth, old, force, translatedValue) {
				var axis = this,
					chart = axis.chart,
					axisLeft = axis.left,
					axisTop = axis.top,
					x1,
					y1,
					x2,
					y2,
					cHeight = (old && chart.oldChartHeight) || chart.chartHeight,
					cWidth = (old && chart.oldChartWidth) || chart.chartWidth,
					skip,
					transB = axis.transB,
					/**
					 * Check if x is between a and b. If not, either move to a/b or skip, 
					 * depending on the force parameter.
					 */
					between = function (x, a, b) {
						if (x < a || x > b) {
							if (force) {
								x = mathMin(mathMax(a, x), b);
							} else {
								skip = true;
							}
						}
						return x;
					};

				translatedValue = pick(translatedValue, axis.translate(value, null, null, old));
				x1 = x2 = mathRound(translatedValue + transB);
				y1 = y2 = mathRound(cHeight - translatedValue - transB);

				if (isNaN(translatedValue)) { // no min or max
					skip = true;

				} else if (axis.horiz) {
					y1 = axisTop;
					y2 = cHeight - axis.bottom;
					x1 = x2 = between(x1, axisLeft, axisLeft + axis.width);
				} else {
					x1 = axisLeft;
					x2 = cWidth - axis.right;
					y1 = y2 = between(y1, axisTop, axisTop + axis.height);
				}
				return skip && !force ?
					null :
					chart.renderer.crispLine([M, x1, y1, L, x2, y2], lineWidth || 1);
			},

			/**
			 * Set the tick positions of a linear axis to round values like whole tens or every five.
			 */
			getLinearTickPositions: function (tickInterval, min, max) {
				var pos,
					lastPos,
					roundedMin = correctFloat(mathFloor(min / tickInterval) * tickInterval),
					roundedMax = correctFloat(mathCeil(max / tickInterval) * tickInterval),
					tickPositions = [];

				// For single points, add a tick regardless of the relative position (#2662)
				if (min === max && isNumber(min)) {
					return [min];
				}

				// Populate the intermediate values
				pos = roundedMin;
				while (pos <= roundedMax) {

					// Place the tick on the rounded value
					tickPositions.push(pos);

					// Always add the raw tickInterval, not the corrected one.
					pos = correctFloat(pos + tickInterval);

					// If the interval is not big enough in the current min - max range to actually increase
					// the loop variable, we need to break out to prevent endless loop. Issue #619
					if (pos === lastPos) {
						break;
					}

					// Record the last value
					lastPos = pos;
				}
				return tickPositions;
			},

			/**
			 * Return the minor tick positions. For logarithmic axes, reuse the same logic
			 * as for major ticks.
			 */
			getMinorTickPositions: function () {
				var axis = this,
					options = axis.options,
					tickPositions = axis.tickPositions,
					minorTickInterval = axis.minorTickInterval,
					minorTickPositions = [],
					pos,
					i,
					pointRangePadding = axis.pointRangePadding || 0, 
					min = axis.min - pointRangePadding, // #1498
					max = axis.max + pointRangePadding, // #1498
					range = max - min,
					len;

				// If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.
				if (range && range / minorTickInterval < axis.len / 3) { // #3875

					if (axis.isLog) {
						len = tickPositions.length;
						for (i = 1; i < len; i++) {
							minorTickPositions = minorTickPositions.concat(
								axis.getLogTickPositions(minorTickInterval, tickPositions[i - 1], tickPositions[i], true)
							);
						}
					} else if (axis.isDatetimeAxis && options.minorTickInterval === 'auto') { // #1314
						minorTickPositions = minorTickPositions.concat(
							axis.getTimeTicks(
								axis.normalizeTimeTickInterval(minorTickInterval),
								min,
								max,
								options.startOfWeek
							)
						);
					} else {
						for (pos = min + (tickPositions[0] - min) % minorTickInterval; pos <= max; pos += minorTickInterval) {
							minorTickPositions.push(pos);
						}
					}
				}

				if(minorTickPositions.length !== 0) { // don't change the extremes, when there is no minor ticks
					axis.trimTicks(minorTickPositions, options.startOnTick, options.endOnTick); // #3652 #3743 #1498
				}
				return minorTickPositions;
			},

			/**
			 * Adjust the min and max for the minimum range. Keep in mind that the series data is
			 * not yet processed, so we don't have information on data cropping and grouping, or
			 * updated axis.pointRange or series.pointRange. The data can't be processed until
			 * we have finally established min and max.
			 */
			adjustForMinRange: function () {
				var axis = this,
					options = axis.options,
					min = axis.min,
					max = axis.max,
					zoomOffset,
					spaceAvailable = axis.dataMax - axis.dataMin >= axis.minRange,
					closestDataRange,
					i,
					distance,
					xData,
					loopLength,
					minArgs,
					maxArgs;

				// Set the automatic minimum range based on the closest point distance
				if (axis.isXAxis && axis.minRange === UNDEFINED && !axis.isLog) {

					if (defined(options.min) || defined(options.max)) {
						axis.minRange = null; // don't do this again

					} else {

						// Find the closest distance between raw data points, as opposed to
						// closestPointRange that applies to processed points (cropped and grouped)
						each(axis.series, function (series) {
							xData = series.xData;
							loopLength = series.xIncrement ? 1 : xData.length - 1;
							for (i = loopLength; i > 0; i--) {
								distance = xData[i] - xData[i - 1];
								if (closestDataRange === UNDEFINED || distance < closestDataRange) {
									closestDataRange = distance;
								}
							}
						});
						axis.minRange = mathMin(closestDataRange * 5, axis.dataMax - axis.dataMin);
					}
				}

				// if minRange is exceeded, adjust
				if (max - min < axis.minRange) {
					var minRange = axis.minRange;
					zoomOffset = (minRange - max + min) / 2;

					// if min and max options have been set, don't go beyond it
					minArgs = [min - zoomOffset, pick(options.min, min - zoomOffset)];
					if (spaceAvailable) { // if space is available, stay within the data range
						minArgs[2] = axis.dataMin;
					}
					min = arrayMax(minArgs);

					maxArgs = [min + minRange, pick(options.max, min + minRange)];
					if (spaceAvailable) { // if space is availabe, stay within the data range
						maxArgs[2] = axis.dataMax;
					}

					max = arrayMin(maxArgs);

					// now if the max is adjusted, adjust the min back
					if (max - min < minRange) {
						minArgs[0] = max - minRange;
						minArgs[1] = pick(options.min, max - minRange);
						min = arrayMax(minArgs);
					}
				}

				// Record modified extremes
				axis.min = min;
				axis.max = max;
			},

			/**
			 * Update translation information
			 */
			setAxisTranslation: function (saveOld) {
				var axis = this,
					range = axis.max - axis.min,
					pointRange = axis.axisPointRange || 0,
					closestPointRange,
					minPointOffset = 0,
					pointRangePadding = 0,
					linkedParent = axis.linkedParent,
					ordinalCorrection,
					hasCategories = !!axis.categories,
					transA = axis.transA,
					isXAxis = axis.isXAxis;

				// Adjust translation for padding. Y axis with categories need to go through the same (#1784).
				if (isXAxis || hasCategories || pointRange) {
					if (linkedParent) {
						minPointOffset = linkedParent.minPointOffset;
						pointRangePadding = linkedParent.pointRangePadding;

					} else {
						each(axis.series, function (series) {
							var seriesPointRange = hasCategories ? 1 : (isXAxis ? series.pointRange : (axis.axisPointRange || 0)), // #2806
								pointPlacement = series.options.pointPlacement,
								seriesClosestPointRange = series.closestPointRange;

							if (seriesPointRange > range) { // #1446
								seriesPointRange = 0;
							}
							pointRange = mathMax(pointRange, seriesPointRange);

							if (!axis.single) {
								// minPointOffset is the value padding to the left of the axis in order to make
								// room for points with a pointRange, typically columns. When the pointPlacement option
								// is 'between' or 'on', this padding does not apply.
								minPointOffset = mathMax(
									minPointOffset,
									isString(pointPlacement) ? 0 : seriesPointRange / 2
								);

								// Determine the total padding needed to the length of the axis to make room for the
								// pointRange. If the series' pointPlacement is 'on', no padding is added.
								pointRangePadding = mathMax(
									pointRangePadding,
									pointPlacement === 'on' ? 0 : seriesPointRange
								);
							}

							// Set the closestPointRange
							if (!series.noSharedTooltip && defined(seriesClosestPointRange)) {
								closestPointRange = defined(closestPointRange) ?
									mathMin(closestPointRange, seriesClosestPointRange) :
									seriesClosestPointRange;
							}
						});
					}

					// Record minPointOffset and pointRangePadding
					ordinalCorrection = axis.ordinalSlope && closestPointRange ? axis.ordinalSlope / closestPointRange : 1; // #988, #1853
					axis.minPointOffset = minPointOffset = minPointOffset * ordinalCorrection;
					axis.pointRangePadding = pointRangePadding = pointRangePadding * ordinalCorrection;

					// pointRange means the width reserved for each point, like in a column chart
					axis.pointRange = mathMin(pointRange, range);

					// closestPointRange means the closest distance between points. In columns
					// it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange
					// is some other value
					if (isXAxis) {
						axis.closestPointRange = closestPointRange;
					}
				}

				// Secondary values
				if (saveOld) {
					axis.oldTransA = transA;
				}
				axis.translationSlope = axis.transA = transA = axis.len / ((range + pointRangePadding) || 1);
				axis.transB = axis.horiz ? axis.left : axis.bottom; // translation addend
				axis.minPixelPadding = transA * minPointOffset;
			},

			minFromRange: function () {
				return this.max - this.range;
			},

			/**
			 * Set the tick positions to round values and optionally extend the extremes
			 * to the nearest tick
			 */
			setTickInterval: function (secondPass) {
				var axis = this,
					chart = axis.chart,
					options = axis.options,
					isLog = axis.isLog,
					isDatetimeAxis = axis.isDatetimeAxis,
					isXAxis = axis.isXAxis,
					isLinked = axis.isLinked,
					maxPadding = options.maxPadding,
					minPadding = options.minPadding,
					length,
					linkedParentExtremes,
					tickIntervalOption = options.tickInterval,
					minTickInterval,
					tickPixelIntervalOption = options.tickPixelInterval,
					categories = axis.categories;

				if (!isDatetimeAxis && !categories && !isLinked) {
					this.getTickAmount();
				}

				// linked axis gets the extremes from the parent axis
				if (isLinked) {
					axis.linkedParent = chart[axis.coll][options.linkedTo];
					linkedParentExtremes = axis.linkedParent.getExtremes();
					axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);
					axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);
					if (options.type !== axis.linkedParent.options.type) {
						error(11, 1); // Can't link axes of different type
					}
				} else { // initial min and max from the extreme data values
					axis.min = pick(axis.userMin, options.min, axis.dataMin);
					axis.max = pick(axis.userMax, options.max, axis.dataMax);
				}

				if (isLog) {
					if (!secondPass && mathMin(axis.min, pick(axis.dataMin, axis.min)) <= 0) { // #978
						error(10, 1); // Can't plot negative values on log axis
					}
					// The correctFloat cures #934, float errors on full tens. But it
					// was too aggressive for #4360 because of conversion back to lin,
					// therefore use precision 15.
					axis.min = correctFloat(log2lin(axis.min), 15);
					axis.max = correctFloat(log2lin(axis.max), 15);
				}

				// handle zoomed range
				if (axis.range && defined(axis.max)) {
					axis.userMin = axis.min = mathMax(axis.min, axis.minFromRange()); // #618
					axis.userMax = axis.max;

					axis.range = null;  // don't use it when running setExtremes
				}

				// Hook for adjusting this.min and this.max. Used by bubble series.
				if (axis.beforePadding) {
					axis.beforePadding();
				}

				// adjust min and max for the minimum range
				axis.adjustForMinRange();

				// Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding
				// into account, we do this after computing tick interval (#1337).
				if (!categories && !axis.axisPointRange && !axis.usePercentage && !isLinked && defined(axis.min) && defined(axis.max)) {
					length = axis.max - axis.min;
					if (length) {
						if (!defined(options.min) && !defined(axis.userMin) && minPadding && (axis.dataMin < 0 || !axis.ignoreMinPadding)) {
							axis.min -= length * minPadding;
						}
						if (!defined(options.max) && !defined(axis.userMax)  && maxPadding && (axis.dataMax > 0 || !axis.ignoreMaxPadding)) {
							axis.max += length * maxPadding;
						}
					}
				}

				// Stay within floor and ceiling
				if (isNumber(options.floor)) {
					axis.min = mathMax(axis.min, options.floor);
				}
				if (isNumber(options.ceiling)) {
					axis.max = mathMin(axis.max, options.ceiling);
				}

				// get tickInterval
				if (axis.min === axis.max || axis.min === undefined || axis.max === undefined) {
					axis.tickInterval = 1;
				} else if (isLinked && !tickIntervalOption &&
						tickPixelIntervalOption === axis.linkedParent.options.tickPixelInterval) {
					axis.tickInterval = tickIntervalOption = axis.linkedParent.tickInterval;
				} else {
					axis.tickInterval = pick(
						tickIntervalOption,
						this.tickAmount ? ((axis.max - axis.min) / mathMax(this.tickAmount - 1, 1)) : undefined,
						categories ? // for categoried axis, 1 is default, for linear axis use tickPix
							1 :
							// don't let it be more than the data range
							(axis.max - axis.min) * tickPixelIntervalOption / mathMax(axis.len, tickPixelIntervalOption)
					);
				}

				// Now we're finished detecting min and max, crop and group series data. This
				// is in turn needed in order to find tick positions in ordinal axes.
				if (isXAxis && !secondPass) {
					each(axis.series, function (series) {
						series.processData(axis.min !== axis.oldMin || axis.max !== axis.oldMax);
					});
				}

				// set the translation factor used in translate function
				axis.setAxisTranslation(true);

				// hook for ordinal axes and radial axes
				if (axis.beforeSetTickPositions) {
					axis.beforeSetTickPositions();
				}

				// hook for extensions, used in Highstock ordinal axes
				if (axis.postProcessTickInterval) {
					axis.tickInterval = axis.postProcessTickInterval(axis.tickInterval);
				}

				// In column-like charts, don't cramp in more ticks than there are points (#1943)
				if (axis.pointRange) {
					axis.tickInterval = mathMax(axis.pointRange, axis.tickInterval);
				}

				// Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
				minTickInterval = pick(options.minTickInterval, axis.isDatetimeAxis && axis.closestPointRange);
				if (!tickIntervalOption && axis.tickInterval < minTickInterval) {
					axis.tickInterval = minTickInterval;
				}

				// for linear axes, get magnitude and normalize the interval
				if (!isDatetimeAxis && !isLog && !tickIntervalOption) {
					axis.tickInterval = normalizeTickInterval(
						axis.tickInterval, 
						null, 
						getMagnitude(axis.tickInterval), 
						// If the tick interval is between 0.5 and 5 and the axis max is in the order of
						// thousands, chances are we are dealing with years. Don't allow decimals. #3363.
						pick(options.allowDecimals, !(axis.tickInterval > 0.5 && axis.tickInterval < 5 && axis.max > 1000 && axis.max < 9999)),
						!!this.tickAmount
					);
				}
				
				// Prevent ticks from getting so close that we can't draw the labels
				if (!this.tickAmount && this.len) { // Color axis with disabled legend has no length
					axis.tickInterval = axis.unsquish();
				}

				this.setTickPositions();
			},

			/**
			 * Now we have computed the normalized tickInterval, get the tick positions
			 */
			setTickPositions: function () {

				var options = this.options,
					tickPositions,
					tickPositionsOption = options.tickPositions,
					tickPositioner = options.tickPositioner,
					startOnTick = options.startOnTick,
					endOnTick = options.endOnTick,
					single;

				// Set the tickmarkOffset
				this.tickmarkOffset = (this.categories && options.tickmarkPlacement === 'between' && 
					this.tickInterval === 1) ? 0.5 : 0; // #3202


				// get minorTickInterval
				this.minorTickInterval = options.minorTickInterval === 'auto' && this.tickInterval ?
					this.tickInterval / 5 : options.minorTickInterval;

				// Find the tick positions
				this.tickPositions = tickPositions = tickPositionsOption && tickPositionsOption.slice(); // Work on a copy (#1565)
				if (!tickPositions) {

					if (this.isDatetimeAxis) {
						tickPositions = this.getTimeTicks(
							this.normalizeTimeTickInterval(this.tickInterval, options.units),
							this.min,
							this.max,
							options.startOfWeek,
							this.ordinalPositions,
							this.closestPointRange,
							true
						);
					} else if (this.isLog) {
						tickPositions = this.getLogTickPositions(this.tickInterval, this.min, this.max);
					} else {
						tickPositions = this.getLinearTickPositions(this.tickInterval, this.min, this.max);
					}

					// Too dense ticks, keep only the first and last (#4477)
					if (tickPositions.length > this.len) {
						tickPositions = [tickPositions[0], tickPositions.pop()];
					}

					this.tickPositions = tickPositions;

					// Run the tick positioner callback, that allows modifying auto tick positions.
					if (tickPositioner) {
						tickPositioner = tickPositioner.apply(this, [this.min, this.max]);
						if (tickPositioner) {
							this.tickPositions = tickPositions = tickPositioner;
						}
					}

				}

				if (!this.isLinked) {

					// reset min/max or remove extremes based on start/end on tick
					this.trimTicks(tickPositions, startOnTick, endOnTick);

					// When there is only one point, or all points have the same value on this axis, then min
					// and max are equal and tickPositions.length is 0 or 1. In this case, add some padding
					// in order to center the point, but leave it with one tick. #1337.
					if (this.min === this.max && defined(this.min) && !this.tickAmount) {
						// Substract half a unit (#2619, #2846, #2515, #3390)
						single = true;
						this.min -= 0.5;
						this.max += 0.5;
					}
					this.single = single;

					if (!tickPositionsOption && !tickPositioner) {
						this.adjustTickAmount();
					}
				}
			},

			/**
			 * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max
			 */
			trimTicks: function (tickPositions, startOnTick, endOnTick) {
				var roundedMin = tickPositions[0],
					roundedMax = tickPositions[tickPositions.length - 1],
					minPointOffset = this.minPointOffset || 0;
					
				if (startOnTick) {
					this.min = roundedMin;
				} else if (this.min - minPointOffset > roundedMin) {
					tickPositions.shift();
				}

				if (endOnTick) {
					this.max = roundedMax;
				} else if (this.max + minPointOffset < roundedMax) {
					tickPositions.pop();
				}

				// If no tick are left, set one tick in the middle (#3195) 
				if (tickPositions.length === 0 && defined(roundedMin)) {
					tickPositions.push((roundedMax + roundedMin) / 2);
				}		
			},

			/**
			 * Set the max ticks of either the x and y axis collection
			 */
			getTickAmount: function () {
				var others = {}, // Whether there is another axis to pair with this one
					hasOther,
					options = this.options,
					tickAmount = options.tickAmount,
					tickPixelInterval = options.tickPixelInterval;

				if (!defined(options.tickInterval) && this.len < tickPixelInterval && !this.isRadial &&
						!this.isLog && options.startOnTick && options.endOnTick) {
					tickAmount = 2;
				}

				if (!tickAmount && this.chart.options.chart.alignTicks !== false && options.alignTicks !== false) {
					// Check if there are multiple axes in the same pane
					each(this.chart[this.coll], function (axis) {
						var options = axis.options,
							horiz = axis.horiz,
							key = [horiz ? options.left : options.top, horiz ? options.width : options.height, options.pane].join(',');
						
						if (others[key]) {
							if (axis.series.length) {
								hasOther = true; // #4201
							}
						} else {
							others[key] = 1;
						}
					});

					if (hasOther) {
						// Add 1 because 4 tick intervals require 5 ticks (including first and last)
						tickAmount = mathCeil(this.len / tickPixelInterval) + 1;
					}
				}

				// For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This
				// prevents the axis from adding ticks that are too far away from the data extremes.
				if (tickAmount < 4) {
					this.finalTickAmt = tickAmount;
					tickAmount = 5;
				}
				
				this.tickAmount = tickAmount;
			},

			/**
			 * When using multiple axes, adjust the number of ticks to match the highest
			 * number of ticks in that group
			 */
			adjustTickAmount: function () {
				var tickInterval = this.tickInterval,
					tickPositions = this.tickPositions,
					tickAmount = this.tickAmount,
					finalTickAmt = this.finalTickAmt,
					currentTickAmount = tickPositions && tickPositions.length,
					i,
					len;

				if (currentTickAmount < tickAmount) { // TODO: Check #3411
					while (tickPositions.length < tickAmount) {
						tickPositions.push(correctFloat(
							tickPositions[tickPositions.length - 1] + tickInterval
						));
					}
					this.transA *= (currentTickAmount - 1) / (tickAmount - 1);
					this.max = tickPositions[tickPositions.length - 1];

				// We have too many ticks, run second pass to try to reduce ticks
				} else if (currentTickAmount > tickAmount) {
					this.tickInterval *= 2;
					this.setTickPositions();
				}

				// The finalTickAmt property is set in getTickAmount
				if (defined(finalTickAmt)) {
					i = len = tickPositions.length;
					while (i--) {
						if (
							(finalTickAmt === 3 && i % 2 === 1) || // Remove every other tick
							(finalTickAmt <= 2 && i > 0 && i < len - 1) // Remove all but first and last
						) {
							tickPositions.splice(i, 1);
						}	
					}
					this.finalTickAmt = UNDEFINED;
				}
			},

			/**
			 * Set the scale based on data min and max, user set min and max or options
			 *
			 */
			setScale: function () {
				var axis = this,
					isDirtyData,
					isDirtyAxisLength;

				axis.oldMin = axis.min;
				axis.oldMax = axis.max;
				axis.oldAxisLength = axis.len;

				// set the new axisLength
				axis.setAxisSize();
				//axisLength = horiz ? axisWidth : axisHeight;
				isDirtyAxisLength = axis.len !== axis.oldAxisLength;

				// is there new data?
				each(axis.series, function (series) {
					if (series.isDirtyData || series.isDirty ||
							series.xAxis.isDirty) { // when x axis is dirty, we need new data extremes for y as well
						isDirtyData = true;
					}
				});

				// do we really need to go through all this?
				if (isDirtyAxisLength || isDirtyData || axis.isLinked || axis.forceRedraw ||
					axis.userMin !== axis.oldUserMin || axis.userMax !== axis.oldUserMax) {

					if (axis.resetStacks) {
						axis.resetStacks();
					}

					axis.forceRedraw = false;

					// get data extremes if needed
					axis.getSeriesExtremes();

					// get fixed positions based on tickInterval
					axis.setTickInterval();

					// record old values to decide whether a rescale is necessary later on (#540)
					axis.oldUserMin = axis.userMin;
					axis.oldUserMax = axis.userMax;

					// Mark as dirty if it is not already set to dirty and extremes have changed. #595.
					if (!axis.isDirty) {
						axis.isDirty = isDirtyAxisLength || axis.min !== axis.oldMin || axis.max !== axis.oldMax;
					}
				} else if (axis.cleanStacks) {
					axis.cleanStacks();
				}
			},

			/**
			 * Set the extremes and optionally redraw
			 * @param {Number} newMin
			 * @param {Number} newMax
			 * @param {Boolean} redraw
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 * @param {Object} eventArguments
			 *
			 */
			setExtremes: function (newMin, newMax, redraw, animation, eventArguments) {
				var axis = this,
					chart = axis.chart;

				redraw = pick(redraw, true); // defaults to true

				each(axis.series, function (serie) {
					delete serie.kdTree;
				});

				// Extend the arguments with min and max
				eventArguments = extend(eventArguments, {
					min: newMin,
					max: newMax
				});

				// Fire the event
				fireEvent(axis, 'setExtremes', eventArguments, function () { // the default event handler

					axis.userMin = newMin;
					axis.userMax = newMax;
					axis.eventArgs = eventArguments;

					if (redraw) {
						chart.redraw(animation);
					}
				});
			},

			/**
			 * Overridable method for zooming chart. Pulled out in a separate method to allow overriding
			 * in stock charts.
			 */
			zoom: function (newMin, newMax) {
				var dataMin = this.dataMin,
					dataMax = this.dataMax,
					options = this.options,
					min = mathMin(dataMin, pick(options.min, dataMin)),
					max = mathMax(dataMax, pick(options.max, dataMax));

				// Prevent pinch zooming out of range. Check for defined is for #1946. #1734.
				if (!this.allowZoomOutside) {
					if (defined(dataMin) && newMin <= min) {
						newMin = min;
					}
					if (defined(dataMax) && newMax >= max) {
						newMax = max;
					}
				}

				// In full view, displaying the reset zoom button is not required
				this.displayBtn = newMin !== UNDEFINED || newMax !== UNDEFINED;

				// Do it
				this.setExtremes(
					newMin,
					newMax,
					false,
					UNDEFINED,
					{ trigger: 'zoom' }
				);
				return true;
			},

			/**
			 * Update the axis metrics
			 */
			setAxisSize: function () {
				var chart = this.chart,
					options = this.options,
					offsetLeft = options.offsetLeft || 0,
					offsetRight = options.offsetRight || 0,
					horiz = this.horiz,
					width = pick(options.width, chart.plotWidth - offsetLeft + offsetRight),
					height = pick(options.height, chart.plotHeight),
					top = pick(options.top, chart.plotTop),
					left = pick(options.left, chart.plotLeft + offsetLeft),
					percentRegex = /%$/;

				// Check for percentage based input values
				if (percentRegex.test(height)) {
					height = parseFloat(height) / 100 * chart.plotHeight;
				}
				if (percentRegex.test(top)) {
					top = parseFloat(top) / 100 * chart.plotHeight + chart.plotTop;
				}

				// Expose basic values to use in Series object and navigator
				this.left = left;
				this.top = top;
				this.width = width;
				this.height = height;
				this.bottom = chart.chartHeight - height - top;
				this.right = chart.chartWidth - width - left;

				// Direction agnostic properties
				this.len = mathMax(horiz ? width : height, 0); // mathMax fixes #905
				this.pos = horiz ? left : top; // distance from SVG origin
			},

			/**
			 * Get the actual axis extremes
			 */
			getExtremes: function () {
				var axis = this,
					isLog = axis.isLog;

				return {
					min: isLog ? correctFloat(lin2log(axis.min)) : axis.min,
					max: isLog ? correctFloat(lin2log(axis.max)) : axis.max,
					dataMin: axis.dataMin,
					dataMax: axis.dataMax,
					userMin: axis.userMin,
					userMax: axis.userMax
				};
			},

			/**
			 * Get the zero plane either based on zero or on the min or max value.
			 * Used in bar and area plots
			 */
			getThreshold: function (threshold) {
				var axis = this,
					isLog = axis.isLog,
					realMin = isLog ? lin2log(axis.min) : axis.min,
					realMax = isLog ? lin2log(axis.max) : axis.max;

				// With a threshold of null, make the columns/areas rise from the top or bottom 
				// depending on the value, assuming an actual threshold of 0 (#4233).
				if (threshold === null) {
					threshold = realMax < 0 ? realMax : realMin;
				} else if (realMin > threshold) {
					threshold = realMin;
				} else if (realMax < threshold) {
					threshold = realMax;
				}

				return axis.translate(threshold, 0, 1, 0, 1);
			},

			/**
			 * Compute auto alignment for the axis label based on which side the axis is on
			 * and the given rotation for the label
			 */
			autoLabelAlign: function (rotation) {
				var ret,
					angle = (pick(rotation, 0) - (this.side * 90) + 720) % 360;

				if (angle > 15 && angle < 165) {
					ret = 'right';
				} else if (angle > 195 && angle < 345) {
					ret = 'left';
				} else {
					ret = 'center';
				}
				return ret;
			},

			/**
			 * Prevent the ticks from getting so close we can't draw the labels. On a horizontal
			 * axis, this is handled by rotating the labels, removing ticks and adding ellipsis. 
			 * On a vertical axis remove ticks and add ellipsis.
			 */
			unsquish: function () {
				var chart = this.chart,
					ticks = this.ticks,
					labelOptions = this.options.labels,
					horiz = this.horiz,
					tickInterval = this.tickInterval,
					newTickInterval = tickInterval,
					slotSize = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / tickInterval),
					rotation,
					rotationOption = labelOptions.rotation,
					labelMetrics = chart.renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),
					step,
					bestScore = Number.MAX_VALUE,
					autoRotation,
					// Return the multiple of tickInterval that is needed to avoid collision
					getStep = function (spaceNeeded) {
						var step = spaceNeeded / (slotSize || 1);
						step = step > 1 ? mathCeil(step) : 1;
						return step * tickInterval;
					};
				
				if (horiz) {
					autoRotation = defined(rotationOption) ? 
						[rotationOption] :
						slotSize < pick(labelOptions.autoRotationLimit, 80) && !labelOptions.staggerLines && !labelOptions.step && labelOptions.autoRotation;

					if (autoRotation) {

						// Loop over the given autoRotation options, and determine which gives the best score. The 
						// best score is that with the lowest number of steps and a rotation closest to horizontal.
						each(autoRotation, function (rot) {
							var score;

							if (rot === rotationOption || (rot && rot >= -90 && rot <= 90)) { // #3891
							
								step = getStep(mathAbs(labelMetrics.h / mathSin(deg2rad * rot)));

								score = step + mathAbs(rot / 360);

								if (score < bestScore) {
									bestScore = score;
									rotation = rot;
									newTickInterval = step;
								}
							}
						});
					}

				} else if (!labelOptions.step) { // #4411
					newTickInterval = getStep(labelMetrics.h);
				}

				this.autoRotation = autoRotation;
				this.labelRotation = rotation;

				return newTickInterval;
			},

			renderUnsquish: function () {
				var chart = this.chart,
					renderer = chart.renderer,
					tickPositions = this.tickPositions,
					ticks = this.ticks,
					labelOptions = this.options.labels,
					horiz = this.horiz,
					margin = chart.margin,
					slotCount = this.categories ? tickPositions.length : tickPositions.length - 1,
					slotWidth = this.slotWidth = (horiz && !labelOptions.step && !labelOptions.rotation &&
						((this.staggerLines || 1) * chart.plotWidth) / slotCount) ||
						(!horiz && ((margin[3] && (margin[3] - chart.spacing[3])) || chart.chartWidth * 0.33)), // #1580, #1931,
					innerWidth = mathMax(1, mathRound(slotWidth - 2 * (labelOptions.padding || 5))),
					attr = {},
					labelMetrics = renderer.fontMetrics(labelOptions.style.fontSize, ticks[0] && ticks[0].label),
					textOverflowOption = labelOptions.style.textOverflow,
					css,
					labelLength = 0,
					label,
					i,
					pos;

				// Set rotation option unless it is "auto", like in gauges
				if (!isString(labelOptions.rotation)) {
					attr.rotation = labelOptions.rotation || 0; // #4443
				}
				
				// Handle auto rotation on horizontal axis
				if (this.autoRotation) {

					// Get the longest label length
					each(tickPositions, function (tick) {
						tick = ticks[tick];
						if (tick && tick.labelLength > labelLength) {
							labelLength = tick.labelLength;
						}
					});
					
					// Apply rotation only if the label is too wide for the slot, and
					// the label is wider than its height.
					if (labelLength > innerWidth && labelLength > labelMetrics.h) {
						attr.rotation = this.labelRotation;
					} else {
						this.labelRotation = 0;
					}

				// Handle word-wrap or ellipsis on vertical axis
				} else if (slotWidth) {
					// For word-wrap or ellipsis
					css = { width: innerWidth + PX };

					if (!textOverflowOption) {
						css.textOverflow = 'clip';

						// On vertical axis, only allow word wrap if there is room for more lines.
						i = tickPositions.length;
						while (!horiz && i--) {
							pos = tickPositions[i];
							label = ticks[pos].label;
							if (label) {
								// Reset ellipsis in order to get the correct bounding box (#4070)
								if (label.styles.textOverflow === 'ellipsis') {
									label.css({ textOverflow: 'clip' });
								}
								if (label.getBBox().height > this.len / tickPositions.length - (labelMetrics.h - labelMetrics.f)) {
									label.specCss = { textOverflow: 'ellipsis' };
								}
							}
						}
					}
				}


				// Add ellipsis if the label length is significantly longer than ideal
				if (attr.rotation) {
					css = { 
						width: (labelLength > chart.chartHeight * 0.5 ? chart.chartHeight * 0.33 : chart.chartHeight) + PX
					};
					if (!textOverflowOption) {
						css.textOverflow = 'ellipsis';
					}
				}

				// Set the explicit or automatic label alignment
				this.labelAlign = attr.align = labelOptions.align || this.autoLabelAlign(this.labelRotation);

				// Apply general and specific CSS
				each(tickPositions, function (pos) {
					var tick = ticks[pos],
						label = tick && tick.label;
					if (label) {
						if (css) {
							label.css(merge(css, label.specCss));
						}
						delete label.specCss;
						label.attr(attr);
						tick.rotation = attr.rotation;
					}
				});

				// TODO: Why not part of getLabelPosition?
				this.tickRotCorr = renderer.rotCorr(labelMetrics.b, this.labelRotation || 0, this.side === 2);
			},

			/**
			 * Return true if the axis has associated data
			 */
			hasData: function () {
				return this.hasVisibleSeries || (defined(this.min) && defined(this.max) && !!this.tickPositions);
			},

			/**
			 * Render the tick labels to a preliminary position to get their sizes
			 */
			getOffset: function () {
				var axis = this,
					chart = axis.chart,
					renderer = chart.renderer,
					options = axis.options,
					tickPositions = axis.tickPositions,
					ticks = axis.ticks,
					horiz = axis.horiz,
					side = axis.side,
					invertedSide = chart.inverted ? [1, 0, 3, 2][side] : side,
					hasData,
					showAxis,
					titleOffset = 0,
					titleOffsetOption,
					titleMargin = 0,
					axisTitleOptions = options.title,
					labelOptions = options.labels,
					labelOffset = 0, // reset
					labelOffsetPadded,
					axisOffset = chart.axisOffset,
					clipOffset = chart.clipOffset,
					clip,
					directionFactor = [-1, 1, 1, -1][side],
					n,
					lineHeightCorrection;

				// For reuse in Axis.render
				hasData = axis.hasData();
				axis.showAxis = showAxis = hasData || pick(options.showEmpty, true);

				// Set/reset staggerLines
				axis.staggerLines = axis.horiz && labelOptions.staggerLines;

				// Create the axisGroup and gridGroup elements on first iteration
				if (!axis.axisGroup) {
					axis.gridGroup = renderer.g('grid')
						.attr({ zIndex: options.gridZIndex || 1 })
						.add();
					axis.axisGroup = renderer.g('axis')
						.attr({ zIndex: options.zIndex || 2 })
						.add();
					axis.labelGroup = renderer.g('axis-labels')
						.attr({ zIndex: labelOptions.zIndex || 7 })
						.addClass(PREFIX + axis.coll.toLowerCase() + '-labels')
						.add();
				}

				if (hasData || axis.isLinked) {
					
					// Generate ticks
					each(tickPositions, function (pos) {
						if (!ticks[pos]) {
							ticks[pos] = new Tick(axis, pos);
						} else {
							ticks[pos].addLabel(); // update labels depending on tick interval
						}
					});

					axis.renderUnsquish();

					each(tickPositions, function (pos) {
						// left side must be align: right and right side must have align: left for labels
						if (side === 0 || side === 2 || { 1: 'left', 3: 'right' }[side] === axis.labelAlign) {

							// get the highest offset
							labelOffset = mathMax(
								ticks[pos].getLabelSize(),
								labelOffset
							);
						}
					});

					if (axis.staggerLines) {
						labelOffset *= axis.staggerLines;
						axis.labelOffset = labelOffset;
					}


				} else { // doesn't have data
					for (n in ticks) {
						ticks[n].destroy();
						delete ticks[n];
					}
				}

				if (axisTitleOptions && axisTitleOptions.text && axisTitleOptions.enabled !== false) {
					if (!axis.axisTitle) {
						axis.axisTitle = renderer.text(
							axisTitleOptions.text,
							0,
							0,
							axisTitleOptions.useHTML
						)
						.attr({
							zIndex: 7,
							rotation: axisTitleOptions.rotation || 0,
							align:
								axisTitleOptions.textAlign ||
								{ low: 'left', middle: 'center', high: 'right' }[axisTitleOptions.align]
						})
						.addClass(PREFIX + this.coll.toLowerCase() + '-title')
						.css(axisTitleOptions.style)
						.add(axis.axisGroup);
						axis.axisTitle.isNew = true;
					}

					if (showAxis) {
						titleOffset = axis.axisTitle.getBBox()[horiz ? 'height' : 'width'];
						titleOffsetOption = axisTitleOptions.offset;
						titleMargin = defined(titleOffsetOption) ? 0 : pick(axisTitleOptions.margin, horiz ? 5 : 10);
					}

					// hide or show the title depending on whether showEmpty is set
					axis.axisTitle[showAxis ? 'show' : 'hide']();
				}

				// handle automatic or user set offset
				axis.offset = directionFactor * pick(options.offset, axisOffset[side]);

				axis.tickRotCorr = axis.tickRotCorr || { x: 0, y: 0 }; // polar
				lineHeightCorrection = side === 2 ? axis.tickRotCorr.y : 0;
				labelOffsetPadded = labelOffset + titleMargin +
					(labelOffset && (directionFactor * (horiz ? pick(labelOptions.y, axis.tickRotCorr.y + 8) : labelOptions.x) - lineHeightCorrection));
				axis.axisTitleMargin = pick(titleOffsetOption, labelOffsetPadded);

				axisOffset[side] = mathMax(
					axisOffset[side],
					axis.axisTitleMargin + titleOffset + directionFactor * axis.offset,
					labelOffsetPadded // #3027
				);

				// Decide the clipping needed to keep the graph inside the plot area and axis lines
				clip = options.offset ? 0 : mathFloor(options.lineWidth / 2) * 2; // #4308, #4371
				clipOffset[invertedSide] = mathMax(clipOffset[invertedSide], clip);
			},

			/**
			 * Get the path for the axis line
			 */
			getLinePath: function (lineWidth) {
				var chart = this.chart,
					opposite = this.opposite,
					offset = this.offset,
					horiz = this.horiz,
					lineLeft = this.left + (opposite ? this.width : 0) + offset,
					lineTop = chart.chartHeight - this.bottom - (opposite ? this.height : 0) + offset;

				if (opposite) {
					lineWidth *= -1; // crispify the other way - #1480, #1687
				}

				return chart.renderer.crispLine([
						M,
						horiz ?
							this.left :
							lineLeft,
						horiz ?
							lineTop :
							this.top,
						L,
						horiz ?
							chart.chartWidth - this.right :
							lineLeft,
						horiz ?
							lineTop :
							chart.chartHeight - this.bottom
					], lineWidth);
			},

			/**
			 * Position the title
			 */
			getTitlePosition: function () {
				// compute anchor points for each of the title align options
				var horiz = this.horiz,
					axisLeft = this.left,
					axisTop = this.top,
					axisLength = this.len,
					axisTitleOptions = this.options.title,
					margin = horiz ? axisLeft : axisTop,
					opposite = this.opposite,
					offset = this.offset,
					xOption = axisTitleOptions.x || 0,
					yOption = axisTitleOptions.y || 0,
					fontSize = pInt(axisTitleOptions.style.fontSize || 12),

					// the position in the length direction of the axis
					alongAxis = {
						low: margin + (horiz ? 0 : axisLength),
						middle: margin + axisLength / 2,
						high: margin + (horiz ? axisLength : 0)
					}[axisTitleOptions.align],

					// the position in the perpendicular direction of the axis
					offAxis = (horiz ? axisTop + this.height : axisLeft) +
						(horiz ? 1 : -1) * // horizontal axis reverses the margin
						(opposite ? -1 : 1) * // so does opposite axes
						this.axisTitleMargin +
						(this.side === 2 ? fontSize : 0);

				return {
					x: horiz ?
						alongAxis + xOption :
						offAxis + (opposite ? this.width : 0) + offset + xOption,
					y: horiz ?
						offAxis + yOption - (opposite ? this.height : 0) + offset :
						alongAxis + yOption
				};
			},

			/**
			 * Render the axis
			 */
			render: function () {
				var axis = this,
					chart = axis.chart,
					renderer = chart.renderer,
					options = axis.options,
					isLog = axis.isLog,
					isLinked = axis.isLinked,
					tickPositions = axis.tickPositions,
					axisTitle = axis.axisTitle,			
					ticks = axis.ticks,
					minorTicks = axis.minorTicks,
					alternateBands = axis.alternateBands,
					stackLabelOptions = options.stackLabels,
					alternateGridColor = options.alternateGridColor,
					tickmarkOffset = axis.tickmarkOffset,
					lineWidth = options.lineWidth,
					linePath,
					hasRendered = chart.hasRendered,
					slideInTicks = hasRendered && defined(axis.oldMin) && !isNaN(axis.oldMin),
					showAxis = axis.showAxis,
					globalAnimation = renderer.globalAnimation,
					from,
					to;

				// Reset
				axis.labelEdge.length = 0;
				//axis.justifyToPlot = overflow === 'justify';
				axis.overlap = false;

				// Mark all elements inActive before we go over and mark the active ones
				each([ticks, minorTicks, alternateBands], function (coll) {
					var pos;
					for (pos in coll) {
						coll[pos].isActive = false;
					}
				});

				// If the series has data draw the ticks. Else only the line and title
				if (axis.hasData() || isLinked) {

					// minor ticks
					if (axis.minorTickInterval && !axis.categories) {
						each(axis.getMinorTickPositions(), function (pos) {
							if (!minorTicks[pos]) {
								minorTicks[pos] = new Tick(axis, pos, 'minor');
							}

							// render new ticks in old position
							if (slideInTicks && minorTicks[pos].isNew) {
								minorTicks[pos].render(null, true);
							}

							minorTicks[pos].render(null, false, 1);
						});
					}

					// Major ticks. Pull out the first item and render it last so that
					// we can get the position of the neighbour label. #808.
					if (tickPositions.length) { // #1300
						each(tickPositions, function (pos, i) {

							// linked axes need an extra check to find out if
							if (!isLinked || (pos >= axis.min && pos <= axis.max)) {

								if (!ticks[pos]) {
									ticks[pos] = new Tick(axis, pos);
								}

								// render new ticks in old position
								if (slideInTicks && ticks[pos].isNew) {
									ticks[pos].render(i, true, 0.1);
								}

								ticks[pos].render(i);
							}

						});
						// In a categorized axis, the tick marks are displayed between labels. So
						// we need to add a tick mark and grid line at the left edge of the X axis.
						if (tickmarkOffset && (axis.min === 0 || axis.single)) {
							if (!ticks[-1]) {
								ticks[-1] = new Tick(axis, -1, null, true);
							}
							ticks[-1].render(-1);
						}

					}

					// alternate grid color
					if (alternateGridColor) {
						each(tickPositions, function (pos, i) {
							if (i % 2 === 0 && pos < axis.max) {
								if (!alternateBands[pos]) {
									alternateBands[pos] = new Highcharts.PlotLineOrBand(axis);
								}
								from = pos + tickmarkOffset; // #949
								to = tickPositions[i + 1] !== UNDEFINED ? tickPositions[i + 1] + tickmarkOffset : axis.max;
								alternateBands[pos].options = {
									from: isLog ? lin2log(from) : from,
									to: isLog ? lin2log(to) : to,
									color: alternateGridColor
								};
								alternateBands[pos].render();
								alternateBands[pos].isActive = true;
							}
						});
					}

					// custom plot lines and bands
					if (!axis._addedPlotLB) { // only first time
						each((options.plotLines || []).concat(options.plotBands || []), function (plotLineOptions) {
							axis.addPlotBandOrLine(plotLineOptions);
						});
						axis._addedPlotLB = true;
					}

				} // end if hasData

				// Remove inactive ticks
				each([ticks, minorTicks, alternateBands], function (coll) {
					var pos,
						i,
						forDestruction = [],
						delay = globalAnimation ? globalAnimation.duration || 500 : 0,
						destroyInactiveItems = function () {
							i = forDestruction.length;
							while (i--) {
								// When resizing rapidly, the same items may be destroyed in different timeouts,
								// or the may be reactivated
								if (coll[forDestruction[i]] && !coll[forDestruction[i]].isActive) {
									coll[forDestruction[i]].destroy();
									delete coll[forDestruction[i]];
								}
							}

						};

					for (pos in coll) {

						if (!coll[pos].isActive) {
							// Render to zero opacity
							coll[pos].render(pos, false, 0);
							coll[pos].isActive = false;
							forDestruction.push(pos);
						}
					}

					// When the objects are finished fading out, destroy them
					if (coll === alternateBands || !chart.hasRendered || !delay) {
						destroyInactiveItems();
					} else if (delay) {
						setTimeout(destroyInactiveItems, delay);
					}
				});

				// Static items. As the axis group is cleared on subsequent calls
				// to render, these items are added outside the group.
				// axis line
				if (lineWidth) {
					linePath = axis.getLinePath(lineWidth);
					if (!axis.axisLine) {
						axis.axisLine = renderer.path(linePath)
							.attr({
								stroke: options.lineColor,
								'stroke-width': lineWidth,
								zIndex: 7
							})
							.add(axis.axisGroup);
					} else {
						axis.axisLine.animate({ d: linePath });
					}

					// show or hide the line depending on options.showEmpty
					axis.axisLine[showAxis ? 'show' : 'hide']();
				}

				if (axisTitle && showAxis) {

					axisTitle[axisTitle.isNew ? 'attr' : 'animate'](
						axis.getTitlePosition()
					);
					axisTitle.isNew = false;
				}

				// Stacked totals:
				if (stackLabelOptions && stackLabelOptions.enabled) {
					axis.renderStackTotals();
				}
				// End stacked totals

				axis.isDirty = false;
			},

			/**
			 * Redraw the axis to reflect changes in the data or axis extremes
			 */
			redraw: function () {
				
				// render the axis
				this.render();

				// move plot lines and bands
				each(this.plotLinesAndBands, function (plotLine) {
					plotLine.render();
				});

				// mark associated series as dirty and ready for redraw
				each(this.series, function (series) {
					series.isDirty = true;
				});

			},

			/**
			 * Destroys an Axis instance.
			 */
			destroy: function (keepEvents) {
				var axis = this,
					stacks = axis.stacks,
					stackKey,
					plotLinesAndBands = axis.plotLinesAndBands,
					i;

				// Remove the events
				if (!keepEvents) {
					removeEvent(axis);
				}

				// Destroy each stack total
				for (stackKey in stacks) {
					destroyObjectProperties(stacks[stackKey]);

					stacks[stackKey] = null;
				}

				// Destroy collections
				each([axis.ticks, axis.minorTicks, axis.alternateBands], function (coll) {
					destroyObjectProperties(coll);
				});
				i = plotLinesAndBands.length;
				while (i--) { // #1975
					plotLinesAndBands[i].destroy();
				}

				// Destroy local variables
				each(['stackTotalGroup', 'axisLine', 'axisTitle', 'axisGroup', 'cross', 'gridGroup', 'labelGroup'], function (prop) {
					if (axis[prop]) {
						axis[prop] = axis[prop].destroy();
					}
				});

				// Destroy crosshair
				if (this.cross) {
					this.cross.destroy();
				}
			},

			/**
			 * Draw the crosshair
			 */
			drawCrosshair: function (e, point) { // docs: Missing docs for Axis.crosshair. Also for properties.

				var path,
					options = this.crosshair,
					animation = options.animation,
					pos,
					attribs,
					categorized;
				
				if (
					// Disabled in options
					!this.crosshair || 
					// Snap
					((defined(point) || !pick(this.crosshair.snap, true)) === false) || 
					// Not on this axis (#4095, #2888)
					(point && point.series && point.series[this.coll] !== this)
				) {
					this.hideCrosshair();
				
				} else {			

					// Get the path
					if (!pick(options.snap, true)) {
						pos = (this.horiz ? e.chartX - this.pos : this.len - e.chartY + this.pos);
					} else if (defined(point)) {
						/*jslint eqeq: true*/
						pos = this.isXAxis ? point.plotX : this.len - point.plotY; // #3834
						/*jslint eqeq: false*/
					}

					if (this.isRadial) {
						path = this.getPlotLinePath(this.isXAxis ? point.x : pick(point.stackY, point.y)) || null; // #3189
					} else {
						path = this.getPlotLinePath(null, null, null, null, pos) || null; // #3189
					}

					if (path === null) {
						this.hideCrosshair();
						return;
					}

					// Draw the cross
					if (this.cross) {
						this.cross
							.attr({ visibility: VISIBLE })[animation ? 'animate' : 'attr']({ d: path }, animation);
					} else {
						categorized = this.categories && !this.isRadial;
						attribs = {
							'stroke-width': options.width || (categorized ? this.transA : 1),
							stroke: options.color || (categorized ? 'rgba(155,200,255,0.2)' : '#C0C0C0'),
							zIndex: options.zIndex || 2
						};
						if (options.dashStyle) {
							attribs.dashstyle = options.dashStyle;
						}
						this.cross = this.chart.renderer.path(path).attr(attribs).add();
					}

				}

			},

			/**
			 *	Hide the crosshair.
			 */
			hideCrosshair: function () {
				if (this.cross) {
					this.cross.hide();
				}
			}
		}; // end Axis

		extend(Axis.prototype, AxisPlotLineOrBandExtension);

		/**
		 * Set the tick positions to a time unit that makes sense, for example
		 * on the first of each month or on every Monday. Return an array
		 * with the time positions. Used in datetime axes as well as for grouping
		 * data on a datetime axis.
		 *
		 * @param {Object} normalizedInterval The interval in axis values (ms) and the count
		 * @param {Number} min The minimum in axis values
		 * @param {Number} max The maximum in axis values
		 * @param {Number} startOfWeek
		 */
		Axis.prototype.getTimeTicks = function (normalizedInterval, min, max, startOfWeek) {
			var tickPositions = [],
				i,
				higherRanks = {},
				useUTC = defaultOptions.global.useUTC,
				minYear, // used in months and years as a basis for Date.UTC()
				minDate = new Date(min - getTZOffset(min)),
				interval = normalizedInterval.unitRange,
				count = normalizedInterval.count;

			if (defined(min)) { // #1300
				minDate[setMilliseconds](interval >= timeUnits.second ? 0 : // #3935
					count * mathFloor(minDate.getMilliseconds() / count)); // #3652, #3654

				if (interval >= timeUnits.second) { // second
					minDate[setSeconds](interval >= timeUnits.minute ? 0 : // #3935
						count * mathFloor(minDate.getSeconds() / count));
				}
			
				if (interval >= timeUnits.minute) { // minute
					minDate[setMinutes](interval >= timeUnits.hour ? 0 :
						count * mathFloor(minDate[getMinutes]() / count));
				}
			
				if (interval >= timeUnits.hour) { // hour
					minDate[setHours](interval >= timeUnits.day ? 0 :
						count * mathFloor(minDate[getHours]() / count));
				}
			
				if (interval >= timeUnits.day) { // day
					minDate[setDate](interval >= timeUnits.month ? 1 :
						count * mathFloor(minDate[getDate]() / count));
				}
			
				if (interval >= timeUnits.month) { // month
					minDate[setMonth](interval >= timeUnits.year ? 0 :
						count * mathFloor(minDate[getMonth]() / count));
					minYear = minDate[getFullYear]();
				}
			
				if (interval >= timeUnits.year) { // year
					minYear -= minYear % count;
					minDate[setFullYear](minYear);
				}
			
				// week is a special case that runs outside the hierarchy
				if (interval === timeUnits.week) {
					// get start of current week, independent of count
					minDate[setDate](minDate[getDate]() - minDate[getDay]() +
						pick(startOfWeek, 1));
				}
			
			
				// get tick positions
				i = 1;
				if (timezoneOffset || getTimezoneOffset) {
					minDate = minDate.getTime();
					minDate = new Date(minDate + getTZOffset(minDate));
				}
				minYear = minDate[getFullYear]();
				var time = minDate.getTime(),
					minMonth = minDate[getMonth](),
					minDateDate = minDate[getDate](),
					localTimezoneOffset = (timeUnits.day + 
							(useUTC ? getTZOffset(minDate) : minDate.getTimezoneOffset() * 60 * 1000)
						) % timeUnits.day; // #950, #3359
			
				// iterate and add tick positions at appropriate values
				while (time < max) {
					tickPositions.push(time);
			
					// if the interval is years, use Date.UTC to increase years
					if (interval === timeUnits.year) {
						time = makeTime(minYear + i * count, 0);
			
					// if the interval is months, use Date.UTC to increase months
					} else if (interval === timeUnits.month) {
						time = makeTime(minYear, minMonth + i * count);
			
					// if we're using global time, the interval is not fixed as it jumps
					// one hour at the DST crossover
					} else if (!useUTC && (interval === timeUnits.day || interval === timeUnits.week)) {
						time = makeTime(minYear, minMonth, minDateDate +
							i * count * (interval === timeUnits.day ? 1 : 7));
			
					// else, the interval is fixed and we use simple addition
					} else {
						time += interval * count;
					}
			
					i++;
				}
			
				// push the last time
				tickPositions.push(time);


				// mark new days if the time is dividible by day (#1649, #1760)
				each(grep(tickPositions, function (time) {
					return interval <= timeUnits.hour && time % timeUnits.day === localTimezoneOffset;
				}), function (time) {
					higherRanks[time] = 'day';
				});
			}


			// record information on the chosen unit - for dynamic label formatter
			tickPositions.info = extend(normalizedInterval, {
				higherRanks: higherRanks,
				totalRange: interval * count
			});

			return tickPositions;
		};

		/**
		 * Get a normalized tick interval for dates. Returns a configuration object with
		 * unit range (interval), count and name. Used to prepare data for getTimeTicks. 
		 * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs
		 * of segments in stock charts, the normalizing logic was extracted in order to 
		 * prevent it for running over again for each segment having the same interval. 
		 * #662, #697.
		 */
		Axis.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {
			var units = unitsOption || [[
						'millisecond', // unit name
						[1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples
					], [
						'second',
						[1, 2, 5, 10, 15, 30]
					], [
						'minute',
						[1, 2, 5, 10, 15, 30]
					], [
						'hour',
						[1, 2, 3, 4, 6, 8, 12]
					], [
						'day',
						[1, 2]
					], [
						'week',
						[1, 2]
					], [
						'month',
						[1, 2, 3, 4, 6]
					], [
						'year',
						null
					]],
				unit = units[units.length - 1], // default unit is years
				interval = timeUnits[unit[0]],
				multiples = unit[1],
				count,
				i;
				
			// loop through the units to find the one that best fits the tickInterval
			for (i = 0; i < units.length; i++) {
				unit = units[i];
				interval = timeUnits[unit[0]];
				multiples = unit[1];


				if (units[i + 1]) {
					// lessThan is in the middle between the highest multiple and the next unit.
					var lessThan = (interval * multiples[multiples.length - 1] +
								timeUnits[units[i + 1][0]]) / 2;

					// break and keep the current unit
					if (tickInterval <= lessThan) {
						break;
					}
				}
			}

			// prevent 2.5 years intervals, though 25, 250 etc. are allowed
			if (interval === timeUnits.year && tickInterval < 5 * interval) {
				multiples = [1, 2, 5];
			}

			// get the count
			count = normalizeTickInterval(
				tickInterval / interval, 
				multiples,
				unit[0] === 'year' ? mathMax(getMagnitude(tickInterval / interval), 1) : 1 // #1913, #2360
			);
			
			return {
				unitRange: interval,
				count: count,
				unitName: unit[0]
			};
		};/**
		 * Methods defined on the Axis prototype
		 */

		/**
		 * Set the tick positions of a logarithmic axis
		 */
		Axis.prototype.getLogTickPositions = function (interval, min, max, minor) {
			var axis = this,
				options = axis.options,
				axisLength = axis.len,
				// Since we use this method for both major and minor ticks,
				// use a local variable and return the result
				positions = []; 
			
			// Reset
			if (!minor) {
				axis._minorAutoInterval = null;
			}
			
			// First case: All ticks fall on whole logarithms: 1, 10, 100 etc.
			if (interval >= 0.5) {
				interval = mathRound(interval);
				positions = axis.getLinearTickPositions(interval, min, max);
				
			// Second case: We need intermediary ticks. For example 
			// 1, 2, 4, 6, 8, 10, 20, 40 etc. 
			} else if (interval >= 0.08) {
				var roundedMin = mathFloor(min),
					intermediate,
					i,
					j,
					len,
					pos,
					lastPos,
					break2;
					
				if (interval > 0.3) {
					intermediate = [1, 2, 4];
				} else if (interval > 0.15) { // 0.2 equals five minor ticks per 1, 10, 100 etc
					intermediate = [1, 2, 4, 6, 8];
				} else { // 0.1 equals ten minor ticks per 1, 10, 100 etc
					intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];
				}
				
				for (i = roundedMin; i < max + 1 && !break2; i++) {
					len = intermediate.length;
					for (j = 0; j < len && !break2; j++) {
						pos = log2lin(lin2log(i) * intermediate[j]);
						if (pos > min && (!minor || lastPos <= max) && lastPos !== UNDEFINED) { // #1670, lastPos is #3113
							positions.push(lastPos);
						}
						
						if (lastPos > max) {
							break2 = true;
						}
						lastPos = pos;
					}
				}
				
			// Third case: We are so deep in between whole logarithmic values that
			// we might as well handle the tick positions like a linear axis. For
			// example 1.01, 1.02, 1.03, 1.04.
			} else {
				var realMin = lin2log(min),
					realMax = lin2log(max),
					tickIntervalOption = options[minor ? 'minorTickInterval' : 'tickInterval'],
					filteredTickIntervalOption = tickIntervalOption === 'auto' ? null : tickIntervalOption,
					tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1),
					totalPixelLength = minor ? axisLength / axis.tickPositions.length : axisLength;
				
				interval = pick(
					filteredTickIntervalOption,
					axis._minorAutoInterval,
					(realMax - realMin) * tickPixelIntervalOption / (totalPixelLength || 1)
				);
				
				interval = normalizeTickInterval(
					interval, 
					null, 
					getMagnitude(interval)
				);
				
				positions = map(axis.getLinearTickPositions(
					interval, 
					realMin,
					realMax	
				), log2lin);
				
				if (!minor) {
					axis._minorAutoInterval = interval / 5;
				}
			}
			
			// Set the axis-level tickInterval variable 
			if (!minor) {
				axis.tickInterval = interval;
			}
			return positions;
		};/**
		 * The tooltip object
		 * @param {Object} chart The chart instance
		 * @param {Object} options Tooltip options
		 */
		var Tooltip = Highcharts.Tooltip = function () {
			this.init.apply(this, arguments);
		};

		Tooltip.prototype = {

			init: function (chart, options) {

				var borderWidth = options.borderWidth,
					style = options.style,
					padding = pInt(style.padding);

				// Save the chart and options
				this.chart = chart;
				this.options = options;

				// Keep track of the current series
				//this.currentSeries = UNDEFINED;

				// List of crosshairs
				this.crosshairs = [];

				// Current values of x and y when animating
				this.now = { x: 0, y: 0 };

				// The tooltip is initially hidden
				this.isHidden = true;


				// create the label		
				this.label = chart.renderer.label('', 0, 0, options.shape || 'callout', null, null, options.useHTML, null, 'tooltip')
					.attr({
						padding: padding,
						fill: options.backgroundColor,
						'stroke-width': borderWidth,
						r: options.borderRadius,
						zIndex: 8
					})
					.css(style)
					.css({ padding: 0 }) // Remove it from VML, the padding is applied as an attribute instead (#1117)
					.add()
					.attr({ y: -9999 }); // #2301, #2657

				// When using canVG the shadow shows up as a gray circle
				// even if the tooltip is hidden.
				if (!useCanVG) {
					this.label.shadow(options.shadow);
				}

				// Public property for getting the shared state.
				this.shared = options.shared;
			},

			/**
			 * Destroy the tooltip and its elements.
			 */
			destroy: function () {
				// Destroy and clear local variables
				if (this.label) {
					this.label = this.label.destroy();
				}
				clearTimeout(this.hideTimer);
				clearTimeout(this.tooltipTimeout);
			},

			/**
			 * Provide a soft movement for the tooltip
			 *
			 * @param {Number} x
			 * @param {Number} y
			 * @private
			 */
			move: function (x, y, anchorX, anchorY) {
				var tooltip = this,
					now = tooltip.now,
					animate = tooltip.options.animation !== false && !tooltip.isHidden && 
						// When we get close to the target position, abort animation and land on the right place (#3056)
						(mathAbs(x - now.x) > 1 || mathAbs(y - now.y) > 1),
					skipAnchor = tooltip.followPointer || tooltip.len > 1;

				// Get intermediate values for animation
				extend(now, {
					x: animate ? (2 * now.x + x) / 3 : x,
					y: animate ? (now.y + y) / 2 : y,
					anchorX: skipAnchor ? UNDEFINED : animate ? (2 * now.anchorX + anchorX) / 3 : anchorX,
					anchorY: skipAnchor ? UNDEFINED : animate ? (now.anchorY + anchorY) / 2 : anchorY
				});

				// Move to the intermediate value
				tooltip.label.attr(now);

				
				// Run on next tick of the mouse tracker
				if (animate) {
				
					// Never allow two timeouts
					clearTimeout(this.tooltipTimeout);
					
					// Set the fixed interval ticking for the smooth tooltip
					this.tooltipTimeout = setTimeout(function () {
						// The interval function may still be running during destroy, so check that the chart is really there before calling.
						if (tooltip) {
							tooltip.move(x, y, anchorX, anchorY);
						}
					}, 32);
					
				}
			},

			/**
			 * Hide the tooltip
			 */
			hide: function (delay) {
				var tooltip = this,
					hoverPoints;
				
				clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)
				if (!this.isHidden) {
					hoverPoints = this.chart.hoverPoints;

					this.hideTimer = setTimeout(function () {
						tooltip.label.fadeOut();
						tooltip.isHidden = true;
					}, pick(delay, this.options.hideDelay, 500));
				}
			},
			
			/** 
			 * Extendable method to get the anchor position of the tooltip
			 * from a point or set of points
			 */
			getAnchor: function (points, mouseEvent) {
				var ret,
					chart = this.chart,
					inverted = chart.inverted,
					plotTop = chart.plotTop,
					plotLeft = chart.plotLeft,
					plotX = 0,
					plotY = 0,
					yAxis,
					xAxis;
				
				points = splat(points);
				
				// Pie uses a special tooltipPos
				ret = points[0].tooltipPos;
				
				// When tooltip follows mouse, relate the position to the mouse
				if (this.followPointer && mouseEvent) {
					if (mouseEvent.chartX === UNDEFINED) {
						mouseEvent = chart.pointer.normalize(mouseEvent);
					}
					ret = [
						mouseEvent.chartX - chart.plotLeft,
						mouseEvent.chartY - plotTop
					];
				}
				// When shared, use the average position
				if (!ret) {
					each(points, function (point) {
						yAxis = point.series.yAxis;
						xAxis = point.series.xAxis;
						plotX += point.plotX  + (!inverted && xAxis ? xAxis.left - plotLeft : 0); 
						plotY += (point.plotLow ? (point.plotLow + point.plotHigh) / 2 : point.plotY) +
							(!inverted && yAxis ? yAxis.top - plotTop : 0); // #1151
					});
					
					plotX /= points.length;
					plotY /= points.length;
					
					ret = [
						inverted ? chart.plotWidth - plotY : plotX,
						this.shared && !inverted && points.length > 1 && mouseEvent ? 
							mouseEvent.chartY - plotTop : // place shared tooltip next to the mouse (#424)
							inverted ? chart.plotHeight - plotX : plotY
					];
				}

				return map(ret, mathRound);
			},
			
			/**
			 * Place the tooltip in a chart without spilling over
			 * and not covering the point it self.
			 */
			getPosition: function (boxWidth, boxHeight, point) {
				
				var chart = this.chart,
					distance = this.distance,
					ret = {},
					h = point.h || 0, // #4117
					swapped,
					first = ['y', chart.chartHeight, boxHeight, point.plotY + chart.plotTop, chart.plotTop, chart.plotTop + chart.plotHeight],
					second = ['x', chart.chartWidth, boxWidth, point.plotX + chart.plotLeft, chart.plotLeft, chart.plotLeft + chart.plotWidth],
					// The far side is right or bottom
					preferFarSide = pick(point.ttBelow, (chart.inverted && !point.negative) || (!chart.inverted && point.negative)),
					/**
					 * Handle the preferred dimension. When the preferred dimension is tooltip
					 * on top or bottom of the point, it will look for space there.
					 */
					firstDimension = function (dim, outerSize, innerSize, point, min, max) {
						var roomLeft = innerSize < point - distance,
							roomRight = point + distance + innerSize < outerSize,
							alignedLeft = point - distance - innerSize,
							alignedRight = point + distance;

						if (preferFarSide && roomRight) {
							ret[dim] = alignedRight;
						} else if (!preferFarSide && roomLeft) {
							ret[dim] = alignedLeft;
						} else if (roomLeft) {
							ret[dim] = mathMin(max - innerSize, alignedLeft - h < 0 ? alignedLeft : alignedLeft - h);
						} else if (roomRight) {
							ret[dim] = mathMax(min, alignedRight + h + innerSize > outerSize ? alignedRight : alignedRight + h);
						} else {
							return false;
						}
					},
					/**
					 * Handle the secondary dimension. If the preferred dimension is tooltip
					 * on top or bottom of the point, the second dimension is to align the tooltip
					 * above the point, trying to align center but allowing left or right
					 * align within the chart box.
					 */
					secondDimension = function (dim, outerSize, innerSize, point) {
						// Too close to the edge, return false and swap dimensions
						if (point < distance || point > outerSize - distance) {
							return false;
						
						// Align left/top
						} else if (point < innerSize / 2) {
							ret[dim] = 1;
						// Align right/bottom
						} else if (point > outerSize - innerSize / 2) {
							ret[dim] = outerSize - innerSize - 2;
						// Align center
						} else {
							ret[dim] = point - innerSize / 2;
						}
					},
					/**
					 * Swap the dimensions 
					 */
					swap = function (count) {
						var temp = first;
						first = second;
						second = temp;
						swapped = count;
					},
					run = function () {
						if (firstDimension.apply(0, first) !== false) {
							if (secondDimension.apply(0, second) === false && !swapped) {
								swap(true);
								run();
							}
						} else if (!swapped) {
							swap(true);
							run();
						} else {
							ret.x = ret.y = 0;
						}
					};

				// Under these conditions, prefer the tooltip on the side of the point
				if (chart.inverted || this.len > 1) {
					swap();
				}
				run();

				return ret;
			
			},

			/**
			 * In case no user defined formatter is given, this will be used. Note that the context
			 * here is an object holding point, series, x, y etc.
			 */
			defaultFormatter: function (tooltip) {
				var items = this.points || splat(this),
					s;

				// build the header
				s = [tooltip.tooltipFooterHeaderFormatter(items[0])]; //#3397: abstraction to enable formatting of footer and header

				// build the values
				s = s.concat(tooltip.bodyFormatter(items));

				// footer
				s.push(tooltip.tooltipFooterHeaderFormatter(items[0], true)); //#3397: abstraction to enable formatting of footer and header

				return s.join('');
			},

			/**
			 * Refresh the tooltip's text and position.
			 * @param {Object} point
			 */
			refresh: function (point, mouseEvent) {
				var tooltip = this,
					chart = tooltip.chart,
					label = tooltip.label,
					options = tooltip.options,
					x,
					y,
					anchor,
					textConfig = {},
					text,
					pointConfig = [],
					formatter = options.formatter || tooltip.defaultFormatter,
					hoverPoints = chart.hoverPoints,
					borderColor,
					shared = tooltip.shared,
					currentSeries;
					
				clearTimeout(this.hideTimer);
				
				// get the reference point coordinates (pie charts use tooltipPos)
				tooltip.followPointer = splat(point)[0].series.tooltipOptions.followPointer;
				anchor = tooltip.getAnchor(point, mouseEvent);
				x = anchor[0];
				y = anchor[1];

				// shared tooltip, array is sent over
				if (shared && !(point.series && point.series.noSharedTooltip)) {
					
					// hide previous hoverPoints and set new
					
					chart.hoverPoints = point;
					if (hoverPoints) {
						each(hoverPoints, function (point) {
							point.setState();
						});
					}

					each(point, function (item) {
						item.setState(HOVER_STATE);

						pointConfig.push(item.getLabelConfig());
					});

					textConfig = {
						x: point[0].category,
						y: point[0].y
					};
					textConfig.points = pointConfig;
					this.len = pointConfig.length;
					point = point[0];

				// single point tooltip
				} else {
					textConfig = point.getLabelConfig();
				}
				text = formatter.call(textConfig, tooltip);

				// register the current series
				currentSeries = point.series;
				this.distance = pick(currentSeries.tooltipOptions.distance, 16);

				// update the inner HTML
				if (text === false) {
					this.hide();
				} else {

					// show it
					if (tooltip.isHidden) {
						stop(label);
						label.attr('opacity', 1).show();
					}

					// update text
					label.attr({
						text: text
					});

					// set the stroke color of the box
					borderColor = options.borderColor || point.color || currentSeries.color || '#606060';
					label.attr({
						stroke: borderColor
					});
					tooltip.updatePosition({ 
						plotX: x, 
						plotY: y, 
						negative: point.negative, 
						ttBelow: point.ttBelow, 
						h: anchor[2] || 0
					});
				
					this.isHidden = false;
				}
				fireEvent(chart, 'tooltipRefresh', {
						text: text,
						x: x + chart.plotLeft,
						y: y + chart.plotTop,
						borderColor: borderColor
					});
			},
			
			/**
			 * Find the new position and perform the move
			 */
			updatePosition: function (point) {
				var chart = this.chart,
					label = this.label, 
					pos = (this.options.positioner || this.getPosition).call(
						this,
						label.width,
						label.height,
						point
					);

				// do the move
				this.move(
					mathRound(pos.x), 
					mathRound(pos.y || 0), // can be undefined (#3977) 
					point.plotX + chart.plotLeft, 
					point.plotY + chart.plotTop
				);
			},

			/** 
			 * Get the best X date format based on the closest point range on the axis.
			 */
			getXDateFormat: function (point, options, xAxis) {
				var xDateFormat,
					dateTimeLabelFormats = options.dateTimeLabelFormats,
					closestPointRange = xAxis && xAxis.closestPointRange,
					n,
					blank = '01-01 00:00:00.000',
					strpos = {
						millisecond: 15,
						second: 12,
						minute: 9,
						hour: 6,
						day: 3
					},
					date,
					lastN = 'millisecond'; // for sub-millisecond data, #4223

				if (closestPointRange) {
					date = dateFormat('%m-%d %H:%M:%S.%L', point.x);
					for (n in timeUnits) {

						// If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format
						if (closestPointRange === timeUnits.week && +dateFormat('%w', point.x) === xAxis.options.startOfWeek && 
								date.substr(6) === blank.substr(6)) {
							n = 'week';
							break;

						// The first format that is too great for the range
						} else if (timeUnits[n] > closestPointRange) {
							n = lastN;
							break;
						
						// If the point is placed every day at 23:59, we need to show
						// the minutes as well. #2637.
						} else if (strpos[n] && date.substr(strpos[n]) !== blank.substr(strpos[n])) {
							break;
						}

						// Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition
						if (n !== 'week') {
							lastN = n;
						}
					}
					
					if (n) {
						xDateFormat = dateTimeLabelFormats[n];
					}
				} else {
					xDateFormat = dateTimeLabelFormats.day;
				}

				return xDateFormat || dateTimeLabelFormats.year; // #2546, 2581
			},

			/**
			 * Format the footer/header of the tooltip
			 * #3397: abstraction to enable formatting of footer and header
			 */
			tooltipFooterHeaderFormatter: function (point, isFooter) {
				var footOrHead = isFooter ? 'footer' : 'header',
					series = point.series,
					tooltipOptions = series.tooltipOptions,
					xDateFormat = tooltipOptions.xDateFormat,
					xAxis = series.xAxis,
					isDateTime = xAxis && xAxis.options.type === 'datetime' && isNumber(point.key),
					formatString = tooltipOptions[footOrHead+'Format'];

				// Guess the best date format based on the closest point distance (#568, #3418)
				if (isDateTime && !xDateFormat) {
					xDateFormat = this.getXDateFormat(point, tooltipOptions, xAxis);
				}

				// Insert the footer date format if any
				if (isDateTime && xDateFormat) {
					formatString = formatString.replace('{point.key}', '{point.key:' + xDateFormat + '}');
				}

				return format(formatString, {
					point: point,
					series: series
				});
			},

			/**
		     * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,
		     * abstracting this functionality allows to easily overwrite and extend it. 
			 */
			bodyFormatter: function (items) {
		        return map(items, function (item) {
		            var tooltipOptions = item.series.tooltipOptions;
		            return (tooltipOptions.pointFormatter || item.point.tooltipFormatter).call(item.point, tooltipOptions.pointFormat);
		        });
		    }
		    
		};

		var hoverChartIndex;

		// Global flag for touch support
		hasTouch = doc.documentElement.ontouchstart !== UNDEFINED;

		/**
		 * The mouse tracker object. All methods starting with "on" are primary DOM event handlers. 
		 * Subsequent methods should be named differently from what they are doing.
		 * @param {Object} chart The Chart instance
		 * @param {Object} options The root options object
		 */
		var Pointer = Highcharts.Pointer = function (chart, options) {
			this.init(chart, options);
		};

		Pointer.prototype = {
			/**
			 * Initialize Pointer
			 */
			init: function (chart, options) {
				
				var chartOptions = options.chart,
					chartEvents = chartOptions.events,
					zoomType = useCanVG ? '' : chartOptions.zoomType,
					inverted = chart.inverted,
					zoomX,
					zoomY;

				// Store references
				this.options = options;
				this.chart = chart;
				
				// Zoom status
				this.zoomX = zoomX = /x/.test(zoomType);
				this.zoomY = zoomY = /y/.test(zoomType);
				this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);
				this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);
				this.hasZoom = zoomX || zoomY;

				// Do we need to handle click on a touch device?
				this.runChartClick = chartEvents && !!chartEvents.click;

				this.pinchDown = [];
				this.lastValidTouch = {};

				if (Highcharts.Tooltip && options.tooltip.enabled) {
					chart.tooltip = new Tooltip(chart, options.tooltip);
					this.followTouchMove = pick(options.tooltip.followTouchMove, true);
				}

				this.setDOMEvents();
			}, 

			/**
			 * Add crossbrowser support for chartX and chartY
			 * @param {Object} e The event object in standard browsers
			 */
			normalize: function (e, chartPosition) {
				var chartX,
					chartY,
					ePos;

				// common IE normalizing
				e = e || window.event;

				// Framework specific normalizing (#1165)
				e = washMouseEvent(e);

				// More IE normalizing, needs to go after washMouseEvent
				if (!e.target) {
					e.target = e.srcElement;
				}
				
				// iOS (#2757)
				ePos = e.touches ?  (e.touches.length ? e.touches.item(0) : e.changedTouches[0]) : e;

				// Get mouse position
				if (!chartPosition) {
					this.chartPosition = chartPosition = offset(this.chart.container);
				}

				// chartX and chartY
				if (ePos.pageX === UNDEFINED) { // IE < 9. #886.
					chartX = mathMax(e.x, e.clientX - chartPosition.left); // #2005, #2129: the second case is 
						// for IE10 quirks mode within framesets
					chartY = e.y;
				} else {
					chartX = ePos.pageX - chartPosition.left;
					chartY = ePos.pageY - chartPosition.top;
				}

				return extend(e, {
					chartX: mathRound(chartX),
					chartY: mathRound(chartY)
				});
			},

			/**
			 * Get the click position in terms of axis values.
			 *
			 * @param {Object} e A pointer event
			 */
			getCoordinates: function (e) {
				var coordinates = {
						xAxis: [],
						yAxis: []
					};

				each(this.chart.axes, function (axis) {
					coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({
						axis: axis,
						value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])
					});
				});
				return coordinates;
			},
			
			/**
			 * With line type charts with a single tracker, get the point closest to the mouse.
			 * Run Point.onMouseOver and display tooltip for the point or points.
			 */
			runPointActions: function (e) {

				var pointer = this,
					chart = pointer.chart,
					series = chart.series,
					tooltip = chart.tooltip,
					shared = tooltip ? tooltip.shared : false,
					followPointer,
					hoverPoint = chart.hoverPoint,
					hoverSeries = chart.hoverSeries,
					i,
					distance = chart.chartWidth,
					anchor,
					noSharedTooltip,
					directTouch,
					kdpoints = [],
					kdpoint,
					kdpointT;

				// For hovering over the empty parts of the plot area (hoverSeries is undefined). 
				// If there is one series with point tracking (combo chart), don't go to nearest neighbour.
				if (!shared && !hoverSeries) {
					for (i = 0; i < series.length; i++) {
						if (series[i].directTouch || !series[i].options.stickyTracking) {
							series = [];
						}
					}
				}

				// If it has a hoverPoint and that series requires direct touch (like columns), 
				// use the hoverPoint (#3899). Otherwise, search the k-d tree.
				if (!shared && hoverSeries && hoverSeries.directTouch && hoverPoint) {
					kdpoint = hoverPoint;

				// Handle shared tooltip or cases where a series is not yet hovered
				} else {
					// Find nearest points on all series
					each(series, function (s) {
						// Skip hidden series
						noSharedTooltip = s.noSharedTooltip && shared;
						directTouch = !shared && s.directTouch;
						if (s.visible && !noSharedTooltip && !directTouch && pick(s.options.enableMouseTracking, true)) { // #3821
							kdpointT = s.searchPoint(e, !noSharedTooltip && s.kdDimensions === 1); // #3828
							if (kdpointT) {
								kdpoints.push(kdpointT);
							}
						}
					});
					// Find absolute nearest point
					each(kdpoints, function (p) {
						if (p && typeof p.dist === 'number' && p.dist < distance) {
							distance = p.dist;
							kdpoint = p;
						}
					});
				}

				// Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200
				if (kdpoint && (kdpoint !== this.prevKDPoint || (tooltip && tooltip.isHidden))) {
					// Draw tooltip if necessary
					if (shared && !kdpoint.series.noSharedTooltip) {
						i = kdpoints.length;
						while (i--) {
							if (kdpoints[i].clientX !== kdpoint.clientX || kdpoints[i].series.noSharedTooltip) {
								kdpoints.splice(i, 1);
							}
						}
						if (kdpoints.length && tooltip) {
							tooltip.refresh(kdpoints, e);
						}

						// Do mouseover on all points (#3919, #3985, #4410)
						each(kdpoints, function (point) {
							point.onMouseOver(e, point !== ((hoverSeries && hoverSeries.directTouch && hoverPoint) || kdpoint));
						}); 
					} else {
						if (tooltip) { 
							tooltip.refresh(kdpoint, e);
						}
						if(!hoverSeries || !hoverSeries.directTouch) { // #4448
							kdpoint.onMouseOver(e); 
						}
					}
					this.prevKDPoint = kdpoint;
				
				// Update positions (regardless of kdpoint or hoverPoint)
				} else {
					followPointer = hoverSeries && hoverSeries.tooltipOptions.followPointer;
					if (tooltip && followPointer && !tooltip.isHidden) {
						anchor = tooltip.getAnchor([{}], e);
						tooltip.updatePosition({ plotX: anchor[0], plotY: anchor[1] });			
					}
				}

				// Start the event listener to pick up the tooltip 
				if (tooltip && !pointer._onDocumentMouseMove) {
					pointer._onDocumentMouseMove = function (e) {
						if (charts[hoverChartIndex]) {
							charts[hoverChartIndex].pointer.onDocumentMouseMove(e);
						}
					};
					addEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
				}
				
				// Crosshair
				each(chart.axes, function (axis) {
					axis.drawCrosshair(e, pick(kdpoint, hoverPoint));
				});	
				

			},



			/**
			 * Reset the tracking by hiding the tooltip, the hover series state and the hover point
			 * 
			 * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible
			 */
			reset: function (allowMove, delay) {
				var pointer = this,
					chart = pointer.chart,
					hoverSeries = chart.hoverSeries,
					hoverPoint = chart.hoverPoint,
					hoverPoints = chart.hoverPoints,
					tooltip = chart.tooltip,
					tooltipPoints = tooltip && tooltip.shared ? hoverPoints : hoverPoint;
					
				// Narrow in allowMove
				allowMove = allowMove && tooltip && tooltipPoints;
					
				// Check if the points have moved outside the plot area, #1003		
				if (allowMove  && splat(tooltipPoints)[0].plotX === UNDEFINED) {
					allowMove = false;
				}	
				// Just move the tooltip, #349
				if (allowMove) {
					tooltip.refresh(tooltipPoints);
					if (hoverPoint) { // #2500
						hoverPoint.setState(hoverPoint.state, true);
						each(chart.axes, function (axis) {
							if (pick(axis.options.crosshair && axis.options.crosshair.snap, true)) {
								axis.drawCrosshair(null, hoverPoint);
							}  else {
								axis.hideCrosshair();
							}
						});
						
					}

				// Full reset
				} else {

					if (hoverPoint) {
						hoverPoint.onMouseOut();
					}

					if (hoverPoints) {
						each(hoverPoints, function (point) {
							point.setState();
						});
					}

					if (hoverSeries) {
						hoverSeries.onMouseOut();
					}

					if (tooltip) {
						tooltip.hide(delay);
					}

					if (pointer._onDocumentMouseMove) {
						removeEvent(doc, 'mousemove', pointer._onDocumentMouseMove);
						pointer._onDocumentMouseMove = null;
					}

					// Remove crosshairs
					each(chart.axes, function (axis) {
						axis.hideCrosshair();
					});
					
					pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;

				}
			},

			/**
			 * Scale series groups to a certain scale and translation
			 */
			scaleGroups: function (attribs, clip) {

				var chart = this.chart,
					seriesAttribs;

				// Scale each series
				each(chart.series, function (series) {
					seriesAttribs = attribs || series.getPlotBox(); // #1701
					if (series.xAxis && series.xAxis.zoomEnabled) {
						series.group.attr(seriesAttribs);
						if (series.markerGroup) {
							series.markerGroup.attr(seriesAttribs);
							series.markerGroup.clip(clip ? chart.clipRect : null);
						}
						if (series.dataLabelsGroup) {
							series.dataLabelsGroup.attr(seriesAttribs);
						}
					}
				});
				
				// Clip
				chart.clipRect.attr(clip || chart.clipBox);
			},

			/**
			 * Start a drag operation
			 */
			dragStart: function (e) {
				var chart = this.chart;

				// Record the start position
				chart.mouseIsDown = e.type;
				chart.cancelClick = false;
				chart.mouseDownX = this.mouseDownX = e.chartX;
				chart.mouseDownY = this.mouseDownY = e.chartY;
			},

			/**
			 * Perform a drag operation in response to a mousemove event while the mouse is down
			 */
			drag: function (e) {

				var chart = this.chart,
					chartOptions = chart.options.chart,
					chartX = e.chartX,
					chartY = e.chartY,
					zoomHor = this.zoomHor,
					zoomVert = this.zoomVert,
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop,
					plotWidth = chart.plotWidth,
					plotHeight = chart.plotHeight,
					clickedInside,
					size,
					selectionMarker = this.selectionMarker,
					mouseDownX = this.mouseDownX,
					mouseDownY = this.mouseDownY,
					panKey = chartOptions.panKey && e[chartOptions.panKey + 'Key'];

				// If the device supports both touch and mouse (like IE11), and we are touch-dragging
				// inside the plot area, don't handle the mouse event. #4339.
				if (selectionMarker && selectionMarker.touch) {
					return;
				}

				// If the mouse is outside the plot area, adjust to cooordinates
				// inside to prevent the selection marker from going outside
				if (chartX < plotLeft) {
					chartX = plotLeft;
				} else if (chartX > plotLeft + plotWidth) {
					chartX = plotLeft + plotWidth;
				}

				if (chartY < plotTop) {
					chartY = plotTop;
				} else if (chartY > plotTop + plotHeight) {
					chartY = plotTop + plotHeight;
				}
				
				// determine if the mouse has moved more than 10px
				this.hasDragged = Math.sqrt(
					Math.pow(mouseDownX - chartX, 2) +
					Math.pow(mouseDownY - chartY, 2)
				);
				
				if (this.hasDragged > 10) {
					clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop);

					// make a selection
					if (chart.hasCartesianSeries && (this.zoomX || this.zoomY) && clickedInside && !panKey) {
						if (!selectionMarker) {
							this.selectionMarker = selectionMarker = chart.renderer.rect(
								plotLeft,
								plotTop,
								zoomHor ? 1 : plotWidth,
								zoomVert ? 1 : plotHeight,
								0
							)
							.attr({
								fill: chartOptions.selectionMarkerFill || 'rgba(69,114,167,0.25)',
								zIndex: 7
							})
							.add();
						}
					}

					// adjust the width of the selection marker
					if (selectionMarker && zoomHor) {
						size = chartX - mouseDownX;
						selectionMarker.attr({
							width: mathAbs(size),
							x: (size > 0 ? 0 : size) + mouseDownX
						});
					}
					// adjust the height of the selection marker
					if (selectionMarker && zoomVert) {
						size = chartY - mouseDownY;
						selectionMarker.attr({
							height: mathAbs(size),
							y: (size > 0 ? 0 : size) + mouseDownY
						});
					}

					// panning
					if (clickedInside && !selectionMarker && chartOptions.panning) {
						chart.pan(e, chartOptions.panning);
					}
				}
			},

			/**
			 * On mouse up or touch end across the entire document, drop the selection.
			 */
			drop: function (e) {
				var pointer = this,
					chart = this.chart,
					hasPinched = this.hasPinched;

				if (this.selectionMarker) {
					var selectionData = {
							xAxis: [],
							yAxis: [],
							originalEvent: e.originalEvent || e
						},
						selectionBox = this.selectionMarker,
						selectionLeft = selectionBox.attr ? selectionBox.attr('x') : selectionBox.x,
						selectionTop = selectionBox.attr ? selectionBox.attr('y') : selectionBox.y,
						selectionWidth = selectionBox.attr ? selectionBox.attr('width') : selectionBox.width,
						selectionHeight = selectionBox.attr ? selectionBox.attr('height') : selectionBox.height,
						runZoom;

					// a selection has been made
					if (this.hasDragged || hasPinched) {

						// record each axis' min and max
						each(chart.axes, function (axis) {
							if (axis.zoomEnabled && defined(axis.min) && (hasPinched || pointer[{ xAxis: 'zoomX', yAxis: 'zoomY' }[axis.coll]])) { // #859, #3569
								var horiz = axis.horiz,
									minPixelPadding = e.type === 'touchend' ? axis.minPixelPadding: 0, // #1207, #3075
									selectionMin = axis.toValue((horiz ? selectionLeft : selectionTop) + minPixelPadding),
									selectionMax = axis.toValue((horiz ? selectionLeft + selectionWidth : selectionTop + selectionHeight) - minPixelPadding);

								selectionData[axis.coll].push({
									axis: axis,
									min: mathMin(selectionMin, selectionMax), // for reversed axes
									max: mathMax(selectionMin, selectionMax)
								});
								runZoom = true;
							}
						});
						if (runZoom) {
							fireEvent(chart, 'selection', selectionData, function (args) { 
								chart.zoom(extend(args, hasPinched ? { animation: false } : null)); 
							});
						}

					}
					this.selectionMarker = this.selectionMarker.destroy();

					// Reset scaling preview
					if (hasPinched) {
						this.scaleGroups();
					}
				}

				// Reset all
				if (chart) { // it may be destroyed on mouse up - #877
					css(chart.container, { cursor: chart._cursor });
					chart.cancelClick = this.hasDragged > 10; // #370
					chart.mouseIsDown = this.hasDragged = this.hasPinched = false;
					this.pinchDown = [];
				}
			},

			onContainerMouseDown: function (e) {

				e = this.normalize(e);

				// issue #295, dragging not always working in Firefox
				if (e.preventDefault) {
					e.preventDefault();
				}
				
				this.dragStart(e);
			},

			

			onDocumentMouseUp: function (e) {
				if (charts[hoverChartIndex]) {
					charts[hoverChartIndex].pointer.drop(e);
				}
			},

			/**
			 * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.
			 * Issue #149 workaround. The mouseleave event does not always fire. 
			 */
			onDocumentMouseMove: function (e) {
				var chart = this.chart,
					chartPosition = this.chartPosition;

				e = this.normalize(e, chartPosition);

				// If we're outside, hide the tooltip
				if (chartPosition && !this.inClass(e.target, 'highcharts-tracker') &&
						!chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {
					this.reset();
				}
			},

			/**
			 * When mouse leaves the container, hide the tooltip.
			 */
			onContainerMouseLeave: function () {
				var chart = charts[hoverChartIndex];
				if (chart) {
					chart.pointer.reset();
					chart.pointer.chartPosition = null; // also reset the chart position, used in #149 fix
				}
			},

			// The mousemove, touchmove and touchstart event handler
			onContainerMouseMove: function (e) {

				var chart = this.chart;

				hoverChartIndex = chart.index;

				e = this.normalize(e);		
				e.returnValue = false; // #2251, #3224
				
				if (chart.mouseIsDown === 'mousedown') {
					this.drag(e);
				} 
				
				// Show the tooltip and run mouse over events (#977)
				if ((this.inClass(e.target, 'highcharts-tracker') || 
						chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) && !chart.openMenu) {
					this.runPointActions(e);
				}
			},

			/**
			 * Utility to detect whether an element has, or has a parent with, a specific
			 * class name. Used on detection of tracker objects and on deciding whether
			 * hovering the tooltip should cause the active series to mouse out.
			 */
			inClass: function (element, className) {
				var elemClassName;
				while (element) {
					elemClassName = attr(element, 'class');
					if (elemClassName) {
						if (elemClassName.indexOf(className) !== -1) {
							return true;
						} else if (elemClassName.indexOf(PREFIX + 'container') !== -1) {
							return false;
						}
					}
					element = element.parentNode;
				}		
			},

			onTrackerMouseOut: function (e) {
				var series = this.chart.hoverSeries,
					relatedTarget = e.relatedTarget || e.toElement,
					relatedSeries = relatedTarget && relatedTarget.point && relatedTarget.point.series; // #2499
				
				if (series && !series.options.stickyTracking && !this.inClass(relatedTarget, PREFIX + 'tooltip') &&
						relatedSeries !== series) {
					series.onMouseOut();
				}
			},

			onContainerClick: function (e) {
				var chart = this.chart,
					hoverPoint = chart.hoverPoint, 
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop;
				
				e = this.normalize(e);
				e.originalEvent = e; // #3913

				if (!chart.cancelClick) {
					
					// On tracker click, fire the series and point events. #783, #1583
					if (hoverPoint && this.inClass(e.target, PREFIX + 'tracker')) {

						// the series click event
						fireEvent(hoverPoint.series, 'click', extend(e, {
							point: hoverPoint
						}));

						// the point click event
						if (chart.hoverPoint) { // it may be destroyed (#1844)
							hoverPoint.firePointEvent('click', e);
						}

					// When clicking outside a tracker, fire a chart event
					} else {
						extend(e, this.getCoordinates(e));

						// fire a click event in the chart
						if (chart.isInsidePlot(e.chartX - plotLeft, e.chartY - plotTop)) {
							fireEvent(chart, 'click', e);
						}
					}


				}
			},

			/**
			 * Set the JS DOM events on the container and document. This method should contain
			 * a one-to-one assignment between methods and their handlers. Any advanced logic should
			 * be moved to the handler reflecting the event's name.
			 */
			setDOMEvents: function () {

				var pointer = this,
					container = pointer.chart.container;

				container.onmousedown = function (e) {
					pointer.onContainerMouseDown(e);
				};
				container.onmousemove = function (e) {
					pointer.onContainerMouseMove(e);
				};
				container.onclick = function (e) {
					pointer.onContainerClick(e);
				};
				addEvent(container, 'mouseleave', pointer.onContainerMouseLeave);
				if (chartCount === 1) {
					addEvent(doc, 'mouseup', pointer.onDocumentMouseUp);
				}
				if (hasTouch) {
					container.ontouchstart = function (e) {
						pointer.onContainerTouchStart(e);
					};
					container.ontouchmove = function (e) {
						pointer.onContainerTouchMove(e);
					};
					if (chartCount === 1) {
						addEvent(doc, 'touchend', pointer.onDocumentTouchEnd);
					}
				}
				
			},

			/**
			 * Destroys the Pointer object and disconnects DOM events.
			 */
			destroy: function () {
				var prop;

				removeEvent(this.chart.container, 'mouseleave', this.onContainerMouseLeave);
				if (!chartCount) {
					removeEvent(doc, 'mouseup', this.onDocumentMouseUp);
					removeEvent(doc, 'touchend', this.onDocumentTouchEnd);
				}

				// memory and CPU leak
				clearInterval(this.tooltipTimeout);

				for (prop in this) {
					this[prop] = null;
				}
			}
		};


		/* Support for touch devices */
		extend(Highcharts.Pointer.prototype, {

			/**
			 * Run translation operations
			 */
			pinchTranslate: function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {
				if (this.zoomHor || this.pinchHor) {
					this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
				}
				if (this.zoomVert || this.pinchVert) {
					this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);
				}
			},

			/**
			 * Run translation operations for each direction (horizontal and vertical) independently
			 */
			pinchTranslateDirection: function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {
				var chart = this.chart,
					xy = horiz ? 'x' : 'y',
					XY = horiz ? 'X' : 'Y',
					sChartXY = 'chart' + XY,
					wh = horiz ? 'width' : 'height',
					plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')],
					selectionWH,
					selectionXY,
					clipXY,
					scale = forcedScale || 1,
					inverted = chart.inverted,
					bounds = chart.bounds[horiz ? 'h' : 'v'],
					singleTouch = pinchDown.length === 1,
					touch0Start = pinchDown[0][sChartXY],
					touch0Now = touches[0][sChartXY],
					touch1Start = !singleTouch && pinchDown[1][sChartXY],
					touch1Now = !singleTouch && touches[1][sChartXY],
					outOfBounds,
					transformScale,
					scaleKey,
					setScale = function () {
						if (!singleTouch && mathAbs(touch0Start - touch1Start) > 20) { // Don't zoom if fingers are too close on this axis
							scale = forcedScale || mathAbs(touch0Now - touch1Now) / mathAbs(touch0Start - touch1Start); 
						}
						
						clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;
						selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;
					};

				// Set the scale, first pass
				setScale();

				selectionXY = clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not

				// Out of bounds
				if (selectionXY < bounds.min) {
					selectionXY = bounds.min;
					outOfBounds = true;
				} else if (selectionXY + selectionWH > bounds.max) {
					selectionXY = bounds.max - selectionWH;
					outOfBounds = true;
				}
				
				// Is the chart dragged off its bounds, determined by dataMin and dataMax?
				if (outOfBounds) {

					// Modify the touchNow position in order to create an elastic drag movement. This indicates
					// to the user that the chart is responsive but can't be dragged further.
					touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);
					if (!singleTouch) {
						touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);
					}

					// Set the scale, second pass to adapt to the modified touchNow positions
					setScale();

				} else {
					lastValidTouch[xy] = [touch0Now, touch1Now];
				}

				// Set geometry for clipping, selection and transformation
				if (!inverted) { // TODO: implement clipping for inverted charts
					clip[xy] = clipXY - plotLeftTop;
					clip[wh] = selectionWH;
				}
				scaleKey = inverted ? (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;
				transformScale = inverted ? 1 / scale : scale;

				selectionMarker[wh] = selectionWH;
				selectionMarker[xy] = selectionXY;
				transform[scaleKey] = scale;
				transform['translate' + XY] = (transformScale * plotLeftTop) + (touch0Now - (transformScale * touch0Start));
			},
			
			/**
			 * Handle touch events with two touches
			 */
			pinch: function (e) {

				var self = this,
					chart = self.chart,
					pinchDown = self.pinchDown,
					touches = e.touches,
					touchesLength = touches.length,
					lastValidTouch = self.lastValidTouch,
					hasZoom = self.hasZoom,
					selectionMarker = self.selectionMarker,
					transform = {},
					fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, PREFIX + 'tracker') && 
						chart.runTrackerClick) || self.runChartClick),
					clip = {};

				// Don't initiate panning until the user has pinched. This prevents us from 
				// blocking page scrolling as users scroll down a long page (#4210).
				if (touchesLength > 1) {
					self.initiated = true;
				}

				// On touch devices, only proceed to trigger click if a handler is defined
				if (hasZoom && self.initiated && !fireClickEvent) {
					e.preventDefault();
				}
				
				// Normalize each touch
				map(touches, function (e) {
					return self.normalize(e);
				});
				
				// Register the touch start position
				if (e.type === 'touchstart') {
					each(touches, function (e, i) {
						pinchDown[i] = { chartX: e.chartX, chartY: e.chartY };
					});
					lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] && pinchDown[1].chartX];
					lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] && pinchDown[1].chartY];

					// Identify the data bounds in pixels
					each(chart.axes, function (axis) {
						if (axis.zoomEnabled) {
							var bounds = chart.bounds[axis.horiz ? 'h' : 'v'],
								minPixelPadding = axis.minPixelPadding,
								min = axis.toPixels(pick(axis.options.min, axis.dataMin)),
								max = axis.toPixels(pick(axis.options.max, axis.dataMax)),
								absMin = mathMin(min, max),
								absMax = mathMax(min, max);

							// Store the bounds for use in the touchmove handler
							bounds.min = mathMin(axis.pos, absMin - minPixelPadding);
							bounds.max = mathMax(axis.pos + axis.len, absMax + minPixelPadding);
						}
					});
					self.res = true; // reset on next move
				
				// Event type is touchmove, handle panning and pinching
				} else if (pinchDown.length) { // can be 0 when releasing, if touchend fires first
					

					// Set the marker
					if (!selectionMarker) {
						self.selectionMarker = selectionMarker = extend({
							destroy: noop,
							touch: true
						}, chart.plotBox);
					}
					
					self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);

					self.hasPinched = hasZoom;

					// Scale and translate the groups to provide visual feedback during pinching
					self.scaleGroups(transform, clip);
					
					// Optionally move the tooltip on touchmove
					if (!hasZoom && self.followTouchMove && touchesLength === 1) {
						this.runPointActions(self.normalize(e));
					} else if (self.res) {
						self.res = false;
						this.reset(false, 0);
					}
				}
			},

			/**
			 * General touch handler shared by touchstart and touchmove.
			 */
			touch: function (e, start) {
				var chart = this.chart;

				hoverChartIndex = chart.index;

				if (e.touches.length === 1) {

					e = this.normalize(e);

					if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && !chart.openMenu) {

						// Run mouse events and display tooltip etc
						if (start) {
							this.runPointActions(e);
						}

						this.pinch(e);

					} else if (start) {
						// Hide the tooltip on touching outside the plot area (#1203)
						this.reset();
					}

				} else if (e.touches.length === 2) {
					this.pinch(e);
				}
			},

			onContainerTouchStart: function (e) {
				this.touch(e, true);
			},

			onContainerTouchMove: function (e) {
				this.touch(e);
			},

			onDocumentTouchEnd: function (e) {
				if (charts[hoverChartIndex]) {
					charts[hoverChartIndex].pointer.drop(e);
				}
			}

		});
		if (win.PointerEvent || win.MSPointerEvent) {
			
			// The touches object keeps track of the points being touched at all times
			var touches = {},
				hasPointerEvent = !!win.PointerEvent,
				getWebkitTouches = function () {
					var key, fake = [];
					fake.item = function (i) { return this[i]; };
					for (key in touches) {
						if (touches.hasOwnProperty(key)) {
							fake.push({
								pageX: touches[key].pageX,
								pageY: touches[key].pageY,
								target: touches[key].target
							});
						}
					}
					return fake;
				},
				translateMSPointer = function (e, method, wktype, callback) {
					var p;
					e = e.originalEvent || e;
					if ((e.pointerType === 'touch' || e.pointerType === e.MSPOINTER_TYPE_TOUCH) && charts[hoverChartIndex]) {
						callback(e);
						p = charts[hoverChartIndex].pointer;
						p[method]({
							type: wktype,
							target: e.currentTarget,
							preventDefault: noop,
							touches: getWebkitTouches()
						});				
					}
				};

			/**
			 * Extend the Pointer prototype with methods for each event handler and more
			 */
			extend(Pointer.prototype, {
				onContainerPointerDown: function (e) {
					translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {
						touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY, target: e.currentTarget };
					});
				},
				onContainerPointerMove: function (e) {
					translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {
						touches[e.pointerId] = { pageX: e.pageX, pageY: e.pageY };
						if (!touches[e.pointerId].target) {
							touches[e.pointerId].target = e.currentTarget;
						}
					});
				},
				onDocumentPointerUp: function (e) {
					translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {
						delete touches[e.pointerId];
					});
				},

				/**
				 * Add or remove the MS Pointer specific events
				 */
				batchMSEvents: function (fn) {
					fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);
					fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);
					fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);
				}
			});

			// Disable default IE actions for pinch and such on chart element
			wrap(Pointer.prototype, 'init', function (proceed, chart, options) {
				proceed.call(this, chart, options);
				if (this.hasZoom) { // #4014
					css(chart.container, {
						'-ms-touch-action': NONE,
						'touch-action': NONE
					});
				}
			});

			// Add IE specific touch events to chart
			wrap(Pointer.prototype, 'setDOMEvents', function (proceed) {
				proceed.apply(this);
				if (this.hasZoom || this.followTouchMove) {
					this.batchMSEvents(addEvent);
				}
			});
			// Destroy MS events also
			wrap(Pointer.prototype, 'destroy', function (proceed) {
				this.batchMSEvents(removeEvent);
				proceed.call(this);
			});
		}
		/**
		 * The overview of the chart's series
		 */
		var Legend = Highcharts.Legend = function (chart, options) {
			this.init(chart, options);
		};

		Legend.prototype = {
			
			/**
			 * Initialize the legend
			 */
			init: function (chart, options) {
				
				var legend = this,
					itemStyle = options.itemStyle,
					padding,
					itemMarginTop = options.itemMarginTop || 0;
			
				this.options = options;

				if (!options.enabled) {
					return;
				}
			
				legend.itemStyle = itemStyle;
				legend.itemHiddenStyle = merge(itemStyle, options.itemHiddenStyle);
				legend.itemMarginTop = itemMarginTop;
				legend.padding = padding = pick(options.padding, 8);
				legend.initialItemX = padding;
				legend.initialItemY = padding - 5; // 5 is the number of pixels above the text
				legend.maxItemWidth = 0;
				legend.chart = chart;
				legend.itemHeight = 0;
				legend.symbolWidth = pick(options.symbolWidth, 16);
				legend.pages = [];


				// Render it
				legend.render();

				// move checkboxes
				addEvent(legend.chart, 'endResize', function () { 
					legend.positionCheckboxes();
				});

			},

			/**
			 * Set the colors for the legend item
			 * @param {Object} item A Series or Point instance
			 * @param {Object} visible Dimmed or colored
			 */
			colorizeItem: function (item, visible) {
				var legend = this,
					options = legend.options,
					legendItem = item.legendItem,
					legendLine = item.legendLine,
					legendSymbol = item.legendSymbol,
					hiddenColor = legend.itemHiddenStyle.color,
					textColor = visible ? options.itemStyle.color : hiddenColor,
					symbolColor = visible ? (item.legendColor || item.color || '#CCC') : hiddenColor,
					markerOptions = item.options && item.options.marker,
					symbolAttr = { fill: symbolColor },
					key,
					val;
				
				if (legendItem) {
					legendItem.css({ fill: textColor, color: textColor }); // color for #1553, oldIE
				}
				if (legendLine) {
					legendLine.attr({ stroke: symbolColor });
				}
				
				if (legendSymbol) {
					
					// Apply marker options
					if (markerOptions && legendSymbol.isMarker) { // #585
						symbolAttr.stroke = symbolColor;
						markerOptions = item.convertAttribs(markerOptions);
						for (key in markerOptions) {
							val = markerOptions[key];
							if (val !== UNDEFINED) {
								symbolAttr[key] = val;
							}
						}
					}

					legendSymbol.attr(symbolAttr);
				}
			},

			/**
			 * Position the legend item
			 * @param {Object} item A Series or Point instance
			 */
			positionItem: function (item) {
				var legend = this,
					options = legend.options,
					symbolPadding = options.symbolPadding,
					ltr = !options.rtl,
					legendItemPos = item._legendItemPos,
					itemX = legendItemPos[0],
					itemY = legendItemPos[1],
					checkbox = item.checkbox,
					legendGroup = item.legendGroup;

				if (legendGroup && legendGroup.element) {
					legendGroup.translate(
						ltr ? itemX : legend.legendWidth - itemX - 2 * symbolPadding - 4,
						itemY
					);
				}

				if (checkbox) {
					checkbox.x = itemX;
					checkbox.y = itemY;
				}
			},

			/**
			 * Destroy a single legend item
			 * @param {Object} item The series or point
			 */
			destroyItem: function (item) {
				var checkbox = item.checkbox;

				// destroy SVG elements
				each(['legendItem', 'legendLine', 'legendSymbol', 'legendGroup'], function (key) {
					if (item[key]) {
						item[key] = item[key].destroy();
					}
				});

				if (checkbox) {
					discardElement(item.checkbox);
				}
			},

			/**
			 * Destroys the legend.
			 */
			destroy: function () {
				var legend = this,
					legendGroup = legend.group,
					box = legend.box;

				if (box) {
					legend.box = box.destroy();
				}

				if (legendGroup) {
					legend.group = legendGroup.destroy();
				}
			},

			/**
			 * Position the checkboxes after the width is determined
			 */
			positionCheckboxes: function (scrollOffset) {
				var alignAttr = this.group.alignAttr,
					translateY,
					clipHeight = this.clipHeight || this.legendHeight;

				if (alignAttr) {
					translateY = alignAttr.translateY;
					each(this.allItems, function (item) {
						var checkbox = item.checkbox,
							top;
						
						if (checkbox) {
							top = (translateY + checkbox.y + (scrollOffset || 0) + 3);
							css(checkbox, {
								left: (alignAttr.translateX + item.checkboxOffset + checkbox.x - 20) + PX,
								top: top + PX,
								display: top > translateY - 6 && top < translateY + clipHeight - 6 ? '' : NONE
							});
						}
					});
				}
			},
			
			/**
			 * Render the legend title on top of the legend
			 */
			renderTitle: function () {
				var options = this.options,
					padding = this.padding,
					titleOptions = options.title,
					titleHeight = 0,
					bBox;
				
				if (titleOptions.text) {
					if (!this.title) {
						this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, null, null, null, null, null, 'legend-title')
							.attr({ zIndex: 1 })
							.css(titleOptions.style)
							.add(this.group);
					}
					bBox = this.title.getBBox();
					titleHeight = bBox.height;
					this.offsetWidth = bBox.width; // #1717
					this.contentGroup.attr({ translateY: titleHeight });
				}
				this.titleHeight = titleHeight;
			},

			/**
			 * Set the legend item text
			 */
			setText: function (item) {
				var options = this.options;
				item.legendItem.attr({
					text: options.labelFormat ? format(options.labelFormat, item) : options.labelFormatter.call(item)
				});
			},

			/**
			 * Render a single specific legend item
			 * @param {Object} item A series or point
			 */
			renderItem: function (item) {
				var legend = this,
					chart = legend.chart,
					renderer = chart.renderer,
					options = legend.options,
					horizontal = options.layout === 'horizontal',
					symbolWidth = legend.symbolWidth,
					symbolPadding = options.symbolPadding,
					itemStyle = legend.itemStyle,
					itemHiddenStyle = legend.itemHiddenStyle,
					padding = legend.padding,
					itemDistance = horizontal ? pick(options.itemDistance, 20) : 0,
					ltr = !options.rtl,
					itemHeight,
					widthOption = options.width,
					itemMarginBottom = options.itemMarginBottom || 0,
					itemMarginTop = legend.itemMarginTop,
					initialItemX = legend.initialItemX,
					bBox,
					itemWidth,
					li = item.legendItem,
					series = item.series && item.series.drawLegendSymbol ? item.series : item,
					seriesOptions = series.options,
					showCheckbox = legend.createCheckboxForItem && seriesOptions && seriesOptions.showCheckbox,
					useHTML = options.useHTML;

				if (!li) { // generate it once, later move it

					// Generate the group box
					// A group to hold the symbol and text. Text is to be appended in Legend class.
					item.legendGroup = renderer.g('legend-item')
						.attr({ zIndex: 1 })
						.add(legend.scrollGroup);

					// Generate the list item text and add it to the group
					item.legendItem = li = renderer.text(
							'',
							ltr ? symbolWidth + symbolPadding : -symbolPadding,
							legend.baseline || 0,
							useHTML
						)
						.css(merge(item.visible ? itemStyle : itemHiddenStyle)) // merge to prevent modifying original (#1021)
						.attr({
							align: ltr ? 'left' : 'right',
							zIndex: 2
						})
						.add(item.legendGroup);

					// Get the baseline for the first item - the font size is equal for all
					if (!legend.baseline) {
						legend.fontMetrics = renderer.fontMetrics(itemStyle.fontSize, li);
						legend.baseline = legend.fontMetrics.f + 3 + itemMarginTop;
						li.attr('y', legend.baseline);
					}

					// Draw the legend symbol inside the group box
					series.drawLegendSymbol(legend, item);

					if (legend.setItemEvents) {
						legend.setItemEvents(item, li, useHTML, itemStyle, itemHiddenStyle);
					}			

					// Colorize the items
					legend.colorizeItem(item, item.visible);

					// add the HTML checkbox on top
					if (showCheckbox) {
						legend.createCheckboxForItem(item);				
					}
				}

				// Always update the text
				legend.setText(item);

				// calculate the positions for the next line
				bBox = li.getBBox();

				itemWidth = item.checkboxOffset = 
					options.itemWidth || 
					item.legendItemWidth || 
					symbolWidth + symbolPadding + bBox.width + itemDistance + (showCheckbox ? 20 : 0);
				legend.itemHeight = itemHeight = mathRound(item.legendItemHeight || bBox.height);

				// if the item exceeds the width, start a new line
				if (horizontal && legend.itemX - initialItemX + itemWidth >
						(widthOption || (chart.chartWidth - 2 * padding - initialItemX - options.x))) {
					legend.itemX = initialItemX;
					legend.itemY += itemMarginTop + legend.lastLineHeight + itemMarginBottom;
					legend.lastLineHeight = 0; // reset for next line (#915, #3976)
				}

				// If the item exceeds the height, start a new column
				/*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {
					legend.itemY = legend.initialItemY;
					legend.itemX += legend.maxItemWidth;
					legend.maxItemWidth = 0;
				}*/

				// Set the edge positions
				legend.maxItemWidth = mathMax(legend.maxItemWidth, itemWidth);
				legend.lastItemY = itemMarginTop + legend.itemY + itemMarginBottom;
				legend.lastLineHeight = mathMax(itemHeight, legend.lastLineHeight); // #915

				// cache the position of the newly generated or reordered items
				item._legendItemPos = [legend.itemX, legend.itemY];

				// advance
				if (horizontal) {
					legend.itemX += itemWidth;

				} else {
					legend.itemY += itemMarginTop + itemHeight + itemMarginBottom;
					legend.lastLineHeight = itemHeight;
				}

				// the width of the widest item
				legend.offsetWidth = widthOption || mathMax(
					(horizontal ? legend.itemX - initialItemX - itemDistance : itemWidth) + padding,
					legend.offsetWidth
				);
			},

			/**
			 * Get all items, which is one item per series for normal series and one item per point
			 * for pie series.
			 */
			getAllItems: function () {
				var allItems = [];
				each(this.chart.series, function (series) {
					var seriesOptions = series.options;

					// Handle showInLegend. If the series is linked to another series, defaults to false.
					if (!pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? UNDEFINED : false, true)) {
						return;
					}

					// use points or series for the legend item depending on legendType
					allItems = allItems.concat(
							series.legendItems ||
							(seriesOptions.legendType === 'point' ?
									series.data :
									series)
					);
				});
				return allItems;
			},

			/**
			 * Adjust the chart margins by reserving space for the legend on only one side
			 * of the chart. If the position is set to a corner, top or bottom is reserved
			 * for horizontal legends and left or right for vertical ones.
			 */
			adjustMargins: function (margin, spacing) {
				var chart = this.chart, 
					options = this.options,
					// Use the first letter of each alignment option in order to detect the side 
					alignment = options.align.charAt(0) + options.verticalAlign.charAt(0) + options.layout.charAt(0); // #4189 - use charAt(x) notation instead of [x] for IE7
					
				if (this.display && !options.floating) {

					each([
						/(lth|ct|rth)/,
						/(rtv|rm|rbv)/,
						/(rbh|cb|lbh)/,
						/(lbv|lm|ltv)/
					], function (alignments, side) {
						if (alignments.test(alignment) && !defined(margin[side])) {
							// Now we have detected on which side of the chart we should reserve space for the legend
							chart[marginNames[side]] = mathMax(
								chart[marginNames[side]],
								chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] + 
									[1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] + 
									pick(options.margin, 12) +
									spacing[side]
							);
						}
					});
				}
			},

			/**
			 * Render the legend. This method can be called both before and after
			 * chart.render. If called after, it will only rearrange items instead
			 * of creating new ones.
			 */
			render: function () {
				var legend = this,
					chart = legend.chart,
					renderer = chart.renderer,
					legendGroup = legend.group,
					allItems,
					display,
					legendWidth,
					legendHeight,
					box = legend.box,
					options = legend.options,
					padding = legend.padding,
					legendBorderWidth = options.borderWidth,
					legendBackgroundColor = options.backgroundColor;

				legend.itemX = legend.initialItemX;
				legend.itemY = legend.initialItemY;
				legend.offsetWidth = 0;
				legend.lastItemY = 0;

				if (!legendGroup) {
					legend.group = legendGroup = renderer.g('legend')
						.attr({ zIndex: 7 }) 
						.add();
					legend.contentGroup = renderer.g()
						.attr({ zIndex: 1 }) // above background
						.add(legendGroup);
					legend.scrollGroup = renderer.g()
						.add(legend.contentGroup);
				}
				
				legend.renderTitle();

				// add each series or point
				allItems = legend.getAllItems();

				// sort by legendIndex
				stableSort(allItems, function (a, b) {
					return ((a.options && a.options.legendIndex) || 0) - ((b.options && b.options.legendIndex) || 0);
				});

				// reversed legend
				if (options.reversed) {
					allItems.reverse();
				}

				legend.allItems = allItems;
				legend.display = display = !!allItems.length;

				// render the items
				legend.lastLineHeight = 0;
				each(allItems, function (item) {
					legend.renderItem(item); 
				});

				// Get the box
				legendWidth = (options.width || legend.offsetWidth) + padding;
				legendHeight = legend.lastItemY + legend.lastLineHeight + legend.titleHeight;
				legendHeight = legend.handleOverflow(legendHeight);
				legendHeight += padding;

				// Draw the border and/or background
				if (legendBorderWidth || legendBackgroundColor) {

					if (!box) {
						legend.box = box = renderer.rect(
							0,
							0,
							legendWidth,
							legendHeight,
							options.borderRadius,
							legendBorderWidth || 0
						).attr({
							stroke: options.borderColor,
							'stroke-width': legendBorderWidth || 0,
							fill: legendBackgroundColor || NONE
						})
						.add(legendGroup)
						.shadow(options.shadow);
						box.isNew = true;

					} else if (legendWidth > 0 && legendHeight > 0) {
						box[box.isNew ? 'attr' : 'animate'](
							box.crisp({ width: legendWidth, height: legendHeight })
						);
						box.isNew = false;
					}

					// hide the border if no items
					box[display ? 'show' : 'hide']();
				}
				
				legend.legendWidth = legendWidth;
				legend.legendHeight = legendHeight;

				// Now that the legend width and height are established, put the items in the 
				// final position
				each(allItems, function (item) {
					legend.positionItem(item);
				});

				// 1.x compatibility: positioning based on style
				/*var props = ['left', 'right', 'top', 'bottom'],
					prop,
					i = 4;
				while (i--) {
					prop = props[i];
					if (options.style[prop] && options.style[prop] !== 'auto') {
						options[i < 2 ? 'align' : 'verticalAlign'] = prop;
						options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);
					}
				}*/

				if (display) {
					legendGroup.align(extend({
						width: legendWidth,
						height: legendHeight
					}, options), true, 'spacingBox');
				}

				if (!chart.isResizing) {
					this.positionCheckboxes();
				}
			},
			
			/**
			 * Set up the overflow handling by adding navigation with up and down arrows below the
			 * legend.
			 */
			handleOverflow: function (legendHeight) {
				var legend = this,
					chart = this.chart,
					renderer = chart.renderer,
					options = this.options,
					optionsY = options.y,
					alignTop = options.verticalAlign === 'top',
					spaceHeight = chart.spacingBox.height + (alignTop ? -optionsY : optionsY) - this.padding,
					maxHeight = options.maxHeight,
					clipHeight,
					clipRect = this.clipRect,
					navOptions = options.navigation,
					animation = pick(navOptions.animation, true),
					arrowSize = navOptions.arrowSize || 12,
					nav = this.nav,
					pages = this.pages,
					padding = this.padding,
					lastY,
					allItems = this.allItems,
					clipToHeight = function (height) {
						clipRect.attr({
							height: height
						});

						// useHTML
						if (legend.contentGroup.div) {
							legend.contentGroup.div.style.clip = 'rect(' + padding + 'px,9999px,' + (padding + height) + 'px,0)';
						}
					};

					
				// Adjust the height
				if (options.layout === 'horizontal') {
					spaceHeight /= 2;
				}
				if (maxHeight) {
					spaceHeight = mathMin(spaceHeight, maxHeight);
				}
				
				// Reset the legend height and adjust the clipping rectangle
				pages.length = 0;
				if (legendHeight > spaceHeight) {

					this.clipHeight = clipHeight = mathMax(spaceHeight - 20 - this.titleHeight - padding, 0);
					this.currentPage = pick(this.currentPage, 1);
					this.fullHeight = legendHeight;
					
					// Fill pages with Y positions so that the top of each a legend item defines
					// the scroll top for each page (#2098)
					each(allItems, function (item, i) {
						var y = item._legendItemPos[1],
							h = mathRound(item.legendItem.getBBox().height),
							len = pages.length;
						
						if (!len || (y - pages[len - 1] > clipHeight && (lastY || y) !== pages[len - 1])) {
							pages.push(lastY || y);
							len++;
						}
						
						if (i === allItems.length - 1 && y + h - pages[len - 1] > clipHeight) {
							pages.push(y);
						}
						if (y !== lastY) {
							lastY = y;
						}
					});

					// Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)
					if (!clipRect) {
						clipRect = legend.clipRect = renderer.clipRect(0, padding, 9999, 0);
						legend.contentGroup.clip(clipRect);
					}
						
					clipToHeight(clipHeight);

					// Add navigation elements
					if (!nav) {
						this.nav = nav = renderer.g().attr({ zIndex: 1 }).add(this.group);
						this.up = renderer.symbol('triangle', 0, 0, arrowSize, arrowSize)
							.on('click', function () {
								legend.scroll(-1, animation);
							})
							.add(nav);
						this.pager = renderer.text('', 15, 10)
							.css(navOptions.style)
							.add(nav);
						this.down = renderer.symbol('triangle-down', 0, 0, arrowSize, arrowSize)
							.on('click', function () {
								legend.scroll(1, animation);
							})
							.add(nav);
					}
					
					// Set initial position
					legend.scroll(0);
					
					legendHeight = spaceHeight;
					
				} else if (nav) {
					clipToHeight(chart.chartHeight);
					nav.hide();
					this.scrollGroup.attr({
						translateY: 1
					});
					this.clipHeight = 0; // #1379
				}
				
				return legendHeight;
			},
			
			/**
			 * Scroll the legend by a number of pages
			 * @param {Object} scrollBy
			 * @param {Object} animation
			 */
			scroll: function (scrollBy, animation) {
				var pages = this.pages,
					pageCount = pages.length,
					currentPage = this.currentPage + scrollBy,
					clipHeight = this.clipHeight,
					navOptions = this.options.navigation,
					activeColor = navOptions.activeColor,
					inactiveColor = navOptions.inactiveColor,
					pager = this.pager,
					padding = this.padding,
					scrollOffset;
				
				// When resizing while looking at the last page
				if (currentPage > pageCount) {
					currentPage = pageCount;
				}
				
				if (currentPage > 0) {
					
					if (animation !== UNDEFINED) {
						setAnimation(animation, this.chart);
					}
					
					this.nav.attr({
						translateX: padding,
						translateY: clipHeight + this.padding + 7 + this.titleHeight,
						visibility: VISIBLE
					});
					this.up.attr({
							fill: currentPage === 1 ? inactiveColor : activeColor
						})
						.css({
							cursor: currentPage === 1 ? 'default' : 'pointer'
						});
					pager.attr({
						text: currentPage + '/' + pageCount
					});
					this.down.attr({
							x: 18 + this.pager.getBBox().width, // adjust to text width
							fill: currentPage === pageCount ? inactiveColor : activeColor
						})
						.css({
							cursor: currentPage === pageCount ? 'default' : 'pointer'
						});
					
					scrollOffset = -pages[currentPage - 1] + this.initialItemY;

					this.scrollGroup.animate({
						translateY: scrollOffset
					});			
					
					this.currentPage = currentPage;
					this.positionCheckboxes(scrollOffset);
				}
					
			}
			
		};

		/*
		 * LegendSymbolMixin
		 */ 

		var LegendSymbolMixin = Highcharts.LegendSymbolMixin = {

			/**
			 * Get the series' symbol in the legend
			 * 
			 * @param {Object} legend The legend object
			 * @param {Object} item The series (this) or point
			 */
			drawRectangle: function (legend, item) {
				var symbolHeight = legend.options.symbolHeight || legend.fontMetrics.f;

				item.legendSymbol = this.chart.renderer.rect(
					0,
					legend.baseline - symbolHeight + 1, // #3988
					legend.symbolWidth,
					symbolHeight,
					legend.options.symbolRadius || 0
				).attr({
					zIndex: 3
				}).add(item.legendGroup);		
				
			},

			/**
			 * Get the series' symbol in the legend. This method should be overridable to create custom 
			 * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.
			 * 
			 * @param {Object} legend The legend object
			 */
			drawLineMarker: function (legend) {

				var options = this.options,
					markerOptions = options.marker,
					radius,
					legendSymbol,
					symbolWidth = legend.symbolWidth,
					renderer = this.chart.renderer,
					legendItemGroup = this.legendGroup,
					verticalCenter = legend.baseline - mathRound(legend.fontMetrics.b * 0.3),
					attr;

				// Draw the line
				if (options.lineWidth) {
					attr = {
						'stroke-width': options.lineWidth
					};
					if (options.dashStyle) {
						attr.dashstyle = options.dashStyle;
					}
					this.legendLine = renderer.path([
						M,
						0,
						verticalCenter,
						L,
						symbolWidth,
						verticalCenter
					])
					.attr(attr)
					.add(legendItemGroup);
				}
				
				// Draw the marker
				if (markerOptions && markerOptions.enabled !== false) {
					radius = markerOptions.radius;
					this.legendSymbol = legendSymbol = renderer.symbol(
						this.symbol,
						(symbolWidth / 2) - radius,
						verticalCenter - radius,
						2 * radius,
						2 * radius
					)
					.add(legendItemGroup);
					legendSymbol.isMarker = true;
				}
			}
		};

		// Workaround for #2030, horizontal legend items not displaying in IE11 Preview,
		// and for #2580, a similar drawing flaw in Firefox 26.
		// TODO: Explore if there's a general cause for this. The problem may be related 
		// to nested group elements, as the legend item texts are within 4 group elements.
		if (/Trident\/7\.0/.test(userAgent) || isFirefox) {
			wrap(Legend.prototype, 'positionItem', function (proceed, item) {
				var legend = this,
					runPositionItem = function () { // If chart destroyed in sync, this is undefined (#2030)
						if (item._legendItemPos) {
							proceed.call(legend, item);
						}
					};

				// Do it now, for export and to get checkbox placement
				runPositionItem();
				
				// Do it after to work around the core issue
				setTimeout(runPositionItem);
			});
		}
		/**
		 * The chart class
		 * @param {Object} options
		 * @param {Function} callback Function to run when the chart has loaded
		 */
		var Chart = Highcharts.Chart = function () {
			this.init.apply(this, arguments);
		};

		Chart.prototype = {

			/**
			 * Hook for modules
			 */
			callbacks: [],

			/**
			 * Initialize the chart
			 */
			init: function (userOptions, callback) {

				// Handle regular options
				var options,
					seriesOptions = userOptions.series; // skip merging data points to increase performance

				userOptions.series = null;
				options = merge(defaultOptions, userOptions); // do the merge
				options.series = userOptions.series = seriesOptions; // set back the series data
				this.userOptions = userOptions;

				var optionsChart = options.chart;
				
				// Create margin & spacing array
				this.margin = this.splashArray('margin', optionsChart);
				this.spacing = this.splashArray('spacing', optionsChart);

				var chartEvents = optionsChart.events;

				//this.runChartClick = chartEvents && !!chartEvents.click;
				this.bounds = { h: {}, v: {} }; // Pixel data bounds for touch zoom

				this.callback = callback;
				this.isResizing = 0;
				this.options = options;
				//chartTitleOptions = UNDEFINED;
				//chartSubtitleOptions = UNDEFINED;

				this.axes = [];
				this.series = [];
				this.hasCartesianSeries = optionsChart.showAxes;
				//this.axisOffset = UNDEFINED;
				//this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes
				//this.inverted = UNDEFINED;
				//this.loadingShown = UNDEFINED;
				//this.container = UNDEFINED;
				//this.chartWidth = UNDEFINED;
				//this.chartHeight = UNDEFINED;
				//this.marginRight = UNDEFINED;
				//this.marginBottom = UNDEFINED;
				//this.containerWidth = UNDEFINED;
				//this.containerHeight = UNDEFINED;
				//this.oldChartWidth = UNDEFINED;
				//this.oldChartHeight = UNDEFINED;

				//this.renderTo = UNDEFINED;
				//this.renderToClone = UNDEFINED;

				//this.spacingBox = UNDEFINED

				//this.legend = UNDEFINED;

				// Elements
				//this.chartBackground = UNDEFINED;
				//this.plotBackground = UNDEFINED;
				//this.plotBGImage = UNDEFINED;
				//this.plotBorder = UNDEFINED;
				//this.loadingDiv = UNDEFINED;
				//this.loadingSpan = UNDEFINED;

				var chart = this,
					eventType;

				// Add the chart to the global lookup
				chart.index = charts.length;
				charts.push(chart);
				chartCount++;

				// Set up auto resize
				if (optionsChart.reflow !== false) {
					addEvent(chart, 'load', function () {
						chart.initReflow();
					});
				}

				// Chart event handlers
				if (chartEvents) {
					for (eventType in chartEvents) {
						addEvent(chart, eventType, chartEvents[eventType]);
					}
				}

				chart.xAxis = [];
				chart.yAxis = [];

				// Expose methods and variables
				chart.animation = useCanVG ? false : pick(optionsChart.animation, true);
				chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;

				chart.firstRender();
			},

			/**
			 * Initialize an individual series, called internally before render time
			 */
			initSeries: function (options) {
				var chart = this,
					optionsChart = chart.options.chart,
					type = options.type || optionsChart.type || optionsChart.defaultSeriesType,
					series,
					constr = seriesTypes[type];

				// No such series type
				if (!constr) {
					error(17, true);
				}

				series = new constr();
				series.init(this, options);
				return series;
			},

			/**
			 * Check whether a given point is within the plot area
			 *
			 * @param {Number} plotX Pixel x relative to the plot area
			 * @param {Number} plotY Pixel y relative to the plot area
			 * @param {Boolean} inverted Whether the chart is inverted
			 */
			isInsidePlot: function (plotX, plotY, inverted) {
				var x = inverted ? plotY : plotX,
					y = inverted ? plotX : plotY;
					
				return x >= 0 &&
					x <= this.plotWidth &&
					y >= 0 &&
					y <= this.plotHeight;
			},

			/**
			 * Redraw legend, axes or series based on updated data
			 *
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */
			redraw: function (animation) {
				var chart = this,
					axes = chart.axes,
					series = chart.series,
					pointer = chart.pointer,
					legend = chart.legend,
					redrawLegend = chart.isDirtyLegend,
					hasStackedSeries,
					hasDirtyStacks,
					hasCartesianSeries = chart.hasCartesianSeries,
					isDirtyBox = chart.isDirtyBox, // todo: check if it has actually changed?
					seriesLength = series.length,
					i = seriesLength,
					serie,
					renderer = chart.renderer,
					isHiddenChart = renderer.isHidden(),
					afterRedraw = [];
					
				setAnimation(animation, chart);
				
				if (isHiddenChart) {
					chart.cloneRenderTo();
				}

				// Adjust title layout (reflow multiline text)
				chart.layOutTitles();

				// link stacked series
				while (i--) {
					serie = series[i];

					if (serie.options.stacking) {
						hasStackedSeries = true;
						
						if (serie.isDirty) {
							hasDirtyStacks = true;
							break;
						}
					}
				}
				if (hasDirtyStacks) { // mark others as dirty
					i = seriesLength;
					while (i--) {
						serie = series[i];
						if (serie.options.stacking) {
							serie.isDirty = true;
						}
					}
				}

				// Handle updated data in the series
				each(series, function (serie) {
					if (serie.isDirty) {
						if (serie.options.legendType === 'point') {
							if (serie.updateTotals) {
								serie.updateTotals();
							}
							redrawLegend = true;
						}
					}
				});

				// handle added or removed series
				if (redrawLegend && legend.options.enabled) { // series or pie points are added or removed
					// draw legend graphics
					legend.render();

					chart.isDirtyLegend = false;
				}

				// reset stacks
				if (hasStackedSeries) {
					chart.getStacks();
				}


				if (hasCartesianSeries) {
					if (!chart.isResizing) {

						// reset maxTicks
						chart.maxTicks = null;

						// set axes scales
						each(axes, function (axis) {
							axis.setScale();
						});
					}
				}

				chart.getMargins(); // #3098

				if (hasCartesianSeries) {
					// If one axis is dirty, all axes must be redrawn (#792, #2169)
					each(axes, function (axis) {
						if (axis.isDirty) {
							isDirtyBox = true;
						}
					});

					// redraw axes
					each(axes, function (axis) {

						// Fire 'afterSetExtremes' only if extremes are set
						var key = axis.min + ',' + axis.max;
						if (axis.extKey !== key) { // #821, #4452
							axis.extKey = key;
							afterRedraw.push(function () { // prevent a recursive call to chart.redraw() (#1119)
								fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751
								delete axis.eventArgs;
							});
						}
						if (isDirtyBox || hasStackedSeries) {
							axis.redraw();
						}
					});
				}
				
				// the plot areas size has changed
				if (isDirtyBox) {
					chart.drawChartBox();
				}


				// redraw affected series
				each(series, function (serie) {
					if (serie.isDirty && serie.visible &&
							(!serie.isCartesian || serie.xAxis)) { // issue #153
						serie.redraw();
					}
				});

				// move tooltip or reset
				if (pointer) {
					pointer.reset(true);
				}

				// redraw if canvas
				renderer.draw();

				// fire the event
				fireEvent(chart, 'redraw'); // jQuery breaks this when calling it from addEvent. Overwrites chart.redraw
				
				if (isHiddenChart) {
					chart.cloneRenderTo(true);
				}
				
				// Fire callbacks that are put on hold until after the redraw
				each(afterRedraw, function (callback) {
					callback.call();
				});
			},

			/**
			 * Get an axis, series or point object by id.
			 * @param id {String} The id as given in the configuration options
			 */
			get: function (id) {
				var chart = this,
					axes = chart.axes,
					series = chart.series;

				var i,
					j,
					points;

				// search axes
				for (i = 0; i < axes.length; i++) {
					if (axes[i].options.id === id) {
						return axes[i];
					}
				}

				// search series
				for (i = 0; i < series.length; i++) {
					if (series[i].options.id === id) {
						return series[i];
					}
				}

				// search points
				for (i = 0; i < series.length; i++) {
					points = series[i].points || [];
					for (j = 0; j < points.length; j++) {
						if (points[j].id === id) {
							return points[j];
						}
					}
				}
				return null;
			},

			/**
			 * Create the Axis instances based on the config options
			 */
			getAxes: function () {
				var chart = this,
					options = this.options,
					xAxisOptions = options.xAxis = splat(options.xAxis || {}),
					yAxisOptions = options.yAxis = splat(options.yAxis || {}),
					optionsArray,
					axis;

				// make sure the options are arrays and add some members
				each(xAxisOptions, function (axis, i) {
					axis.index = i;
					axis.isX = true;
				});

				each(yAxisOptions, function (axis, i) {
					axis.index = i;
				});

				// concatenate all axis options into one array
				optionsArray = xAxisOptions.concat(yAxisOptions);

				each(optionsArray, function (axisOptions) {
					axis = new Axis(chart, axisOptions);
				});
			},


			/**
			 * Get the currently selected points from all series
			 */
			getSelectedPoints: function () {
				var points = [];
				each(this.series, function (serie) {
					points = points.concat(grep(serie.points || [], function (point) {
						return point.selected;
					}));
				});
				return points;
			},

			/**
			 * Get the currently selected series
			 */
			getSelectedSeries: function () {
				return grep(this.series, function (serie) {
					return serie.selected;
				});
			},

			/**
			 * Show the title and subtitle of the chart
			 *
			 * @param titleOptions {Object} New title options
			 * @param subtitleOptions {Object} New subtitle options
			 *
			 */
			setTitle: function (titleOptions, subtitleOptions, redraw) {
				var chart = this,
					options = chart.options,
					chartTitleOptions,
					chartSubtitleOptions;

				chartTitleOptions = options.title = merge(options.title, titleOptions);
				chartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);

				// add title and subtitle
				each([
					['title', titleOptions, chartTitleOptions],
					['subtitle', subtitleOptions, chartSubtitleOptions]
				], function (arr) {
					var name = arr[0],
						title = chart[name],
						titleOptions = arr[1],
						chartTitleOptions = arr[2];

					if (title && titleOptions) {
						chart[name] = title = title.destroy(); // remove old
					}
					
					if (chartTitleOptions && chartTitleOptions.text && !title) {
						chart[name] = chart.renderer.text(
							chartTitleOptions.text,
							0,
							0,
							chartTitleOptions.useHTML
						)
						.attr({
							align: chartTitleOptions.align,
							'class': PREFIX + name,
							zIndex: chartTitleOptions.zIndex || 4
						})
						.css(chartTitleOptions.style)
						.add();
					}	
				});
				chart.layOutTitles(redraw);
			},

			/**
			 * Lay out the chart titles and cache the full offset height for use in getMargins
			 */
			layOutTitles: function (redraw) {
				var titleOffset = 0,
					title = this.title,
					subtitle = this.subtitle,
					options = this.options,
					titleOptions = options.title,
					subtitleOptions = options.subtitle,
					requiresDirtyBox,
					renderer = this.renderer,
					autoWidth = this.spacingBox.width - 44; // 44 makes room for default context button

				if (title) {
					title
						.css({ width: (titleOptions.width || autoWidth) + PX })
						.align(extend({ 
							y: renderer.fontMetrics(titleOptions.style.fontSize, title).b - 3
						}, titleOptions), false, 'spacingBox');
					
					if (!titleOptions.floating && !titleOptions.verticalAlign) {
						titleOffset = title.getBBox().height;
					}
				}
				if (subtitle) {
					subtitle
						.css({ width: (subtitleOptions.width || autoWidth) + PX })
						.align(extend({ 
							y: titleOffset + (titleOptions.margin - 13) + renderer.fontMetrics(titleOptions.style.fontSize, subtitle).b 
						}, subtitleOptions), false, 'spacingBox');
					
					if (!subtitleOptions.floating && !subtitleOptions.verticalAlign) {
						titleOffset = mathCeil(titleOffset + subtitle.getBBox().height);
					}
				}

				requiresDirtyBox = this.titleOffset !== titleOffset;				
				this.titleOffset = titleOffset; // used in getMargins

				if (!this.isDirtyBox && requiresDirtyBox) {
					this.isDirtyBox = requiresDirtyBox;
					// Redraw if necessary (#2719, #2744)		
					if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {
						this.redraw();
					}
				}
			},

			/**
			 * Get chart width and height according to options and container size
			 */
			getChartSize: function () {
				var chart = this,
					optionsChart = chart.options.chart,
					widthOption = optionsChart.width,
					heightOption = optionsChart.height,
					renderTo = chart.renderToClone || chart.renderTo;

				// get inner width and height from jQuery (#824)
				if (!defined(widthOption)) {
					chart.containerWidth = adapterRun(renderTo, 'width');
				}
				if (!defined(heightOption)) {
					chart.containerHeight = adapterRun(renderTo, 'height');
				}
				
				chart.chartWidth = mathMax(0, widthOption || chart.containerWidth || 600); // #1393, 1460
				chart.chartHeight = mathMax(0, pick(heightOption,
					// the offsetHeight of an empty container is 0 in standard browsers, but 19 in IE7:
					chart.containerHeight > 19 ? chart.containerHeight : 400));
			},

			/**
			 * Create a clone of the chart's renderTo div and place it outside the viewport to allow
			 * size computation on chart.render and chart.redraw
			 */
			cloneRenderTo: function (revert) {
				var clone = this.renderToClone,
					container = this.container;
				
				// Destroy the clone and bring the container back to the real renderTo div
				if (revert) {
					if (clone) {
						this.renderTo.appendChild(container);
						discardElement(clone);
						delete this.renderToClone;
					}
				
				// Set up the clone
				} else {
					if (container && container.parentNode === this.renderTo) {
						this.renderTo.removeChild(container); // do not clone this
					}
					this.renderToClone = clone = this.renderTo.cloneNode(0);
					css(clone, {
						position: ABSOLUTE,
						top: '-9999px',
						display: 'block' // #833
					});
					if (clone.style.setProperty) { // #2631
						clone.style.setProperty('display', 'block', 'important');
					}
					doc.body.appendChild(clone);
					if (container) {
						clone.appendChild(container);
					}
				}
			},

			/**
			 * Get the containing element, determine the size and create the inner container
			 * div to hold the chart
			 */
			getContainer: function () {
				var chart = this,
					container,
					optionsChart = chart.options.chart,
					chartWidth,
					chartHeight,
					renderTo,
					indexAttrName = 'data-highcharts-chart',
					oldChartIndex,
					containerId;

				chart.renderTo = renderTo = optionsChart.renderTo;
				containerId = PREFIX + idCounter++;

				if (isString(renderTo)) {
					chart.renderTo = renderTo = doc.getElementById(renderTo);
				}
				
				// Display an error if the renderTo is wrong
				if (!renderTo) {
					error(13, true);
				}
				
				// If the container already holds a chart, destroy it. The check for hasRendered is there
				// because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart
				// attribute and the SVG contents, but not an interactive chart. So in this case,
				// charts[oldChartIndex] will point to the wrong chart if any (#2609).
				oldChartIndex = pInt(attr(renderTo, indexAttrName));
				if (!isNaN(oldChartIndex) && charts[oldChartIndex] && charts[oldChartIndex].hasRendered) {
					charts[oldChartIndex].destroy();
				}		
				
				// Make a reference to the chart from the div
				attr(renderTo, indexAttrName, chart.index);

				// remove previous chart
				renderTo.innerHTML = '';

				// If the container doesn't have an offsetWidth, it has or is a child of a node
				// that has display:none. We need to temporarily move it out to a visible
				// state to determine the size, else the legend and tooltips won't render
				// properly. The allowClone option is used in sparklines as a micro optimization,
				// saving about 1-2 ms each chart.
				if (!optionsChart.skipClone && !renderTo.offsetWidth) {
					chart.cloneRenderTo();
				}

				// get the width and height
				chart.getChartSize();
				chartWidth = chart.chartWidth;
				chartHeight = chart.chartHeight;

				// create the inner container
				chart.container = container = createElement(DIV, {
						className: PREFIX + 'container' +
							(optionsChart.className ? ' ' + optionsChart.className : ''),
						id: containerId
					}, extend({
						position: RELATIVE,
						overflow: HIDDEN, // needed for context menu (avoid scrollbars) and
							// content overflow in IE
						width: chartWidth + PX,
						height: chartHeight + PX,
						textAlign: 'left',
						lineHeight: 'normal', // #427
						zIndex: 0, // #1072
						'-webkit-tap-highlight-color': 'rgba(0,0,0,0)'
					}, optionsChart.style),
					chart.renderToClone || renderTo
				);

				// cache the cursor (#1650)
				chart._cursor = container.style.cursor;

				// Initialize the renderer
				chart.renderer =
					optionsChart.forExport ? // force SVG, used for SVG export
						new SVGRenderer(container, chartWidth, chartHeight, optionsChart.style, true) :
						new Renderer(container, chartWidth, chartHeight, optionsChart.style);

				if (useCanVG) {
					// If we need canvg library, extend and configure the renderer
					// to get the tracker for translating mouse events
					chart.renderer.create(chart, container, chartWidth, chartHeight);
				}
				// Add a reference to the charts index
				chart.renderer.chartIndex = chart.index;
			},

			/**
			 * Calculate margins by rendering axis labels in a preliminary position. Title,
			 * subtitle and legend have already been rendered at this stage, but will be
			 * moved into their final positions
			 */
			getMargins: function (skipAxes) {
				var chart = this,
					spacing = chart.spacing,
					margin = chart.margin,
					titleOffset = chart.titleOffset;

				chart.resetMargins();

				// Adjust for title and subtitle
				if (titleOffset && !defined(margin[0])) {
					chart.plotTop = mathMax(chart.plotTop, titleOffset + chart.options.title.margin + spacing[0]);
				}
				
				// Adjust for legend
				chart.legend.adjustMargins(margin, spacing);

				// adjust for scroller
				if (chart.extraBottomMargin) {
					chart.marginBottom += chart.extraBottomMargin;
				}
				if (chart.extraTopMargin) {
					chart.plotTop += chart.extraTopMargin;
				}
				if (!skipAxes) {
					this.getAxisMargins();
				}
			},

			getAxisMargins: function () {

				var chart = this,
					axisOffset = chart.axisOffset = [0, 0, 0, 0], // top, right, bottom, left
					margin = chart.margin;
				
				// pre-render axes to get labels offset width
				if (chart.hasCartesianSeries) {
					each(chart.axes, function (axis) {
						axis.getOffset();
					});
				}

				// Add the axis offsets
				each(marginNames, function (m, side) {
					if (!defined(margin[side])) {
						chart[m] += axisOffset[side];
					}		
				});

				chart.setChartSize();

			},

			/**
			 * Resize the chart to its container if size is not explicitly set
			 */
			reflow: function (e) {
				var chart = this,
					optionsChart = chart.options.chart,
					renderTo = chart.renderTo,
					width = optionsChart.width || adapterRun(renderTo, 'width'),
					height = optionsChart.height || adapterRun(renderTo, 'height'),
					target = e ? e.target : win, // #805 - MooTools doesn't supply e
					doReflow = function () {
						if (chart.container) { // It may have been destroyed in the meantime (#1257)
							chart.setSize(width, height, false);
							chart.hasUserSize = null;
						}
					};
					
				// Width and height checks for display:none. Target is doc in IE8 and Opera,
				// win in Firefox, Chrome and IE9.
				if (!chart.hasUserSize && !chart.isPrinting && width && height && (target === win || target === doc)) { // #1093
					if (width !== chart.containerWidth || height !== chart.containerHeight) {
						clearTimeout(chart.reflowTimeout);
						if (e) { // Called from window.resize
							chart.reflowTimeout = setTimeout(doReflow, 100);
						} else { // Called directly (#2224)
							doReflow();
						}
					}
					chart.containerWidth = width;
					chart.containerHeight = height;
				}
			},

			/**
			 * Add the event handlers necessary for auto resizing
			 */
			initReflow: function () {
				var chart = this,
					reflow = function (e) {
						chart.reflow(e);
					};
					
				
				addEvent(win, 'resize', reflow);
				addEvent(chart, 'destroy', function () {
					removeEvent(win, 'resize', reflow);
				});
			},

			/**
			 * Resize the chart to a given width and height
			 * @param {Number} width
			 * @param {Number} height
			 * @param {Object|Boolean} animation
			 */
			setSize: function (width, height, animation) {
				var chart = this,
					chartWidth,
					chartHeight,
					fireEndResize,
					renderer = chart.renderer,
					globalAnimation = renderer.globalAnimation;

				// Handle the isResizing counter
				chart.isResizing += 1;
				fireEndResize = function () {
					if (chart) {
						fireEvent(chart, 'endResize', null, function () {
							chart.isResizing -= 1;
						});
					}
				};

				// set the animation for the current process
				setAnimation(animation, chart);

				chart.oldChartHeight = chart.chartHeight;
				chart.oldChartWidth = chart.chartWidth;
				if (defined(width)) {
					chart.chartWidth = chartWidth = mathMax(0, mathRound(width));
					chart.hasUserSize = !!chartWidth;
				}
				if (defined(height)) {
					chart.chartHeight = chartHeight = mathMax(0, mathRound(height));
				}

				// Resize the container with the global animation applied if enabled (#2503)
				(globalAnimation ? animate : css)(chart.container, {
					width: chartWidth + PX,
					height: chartHeight + PX
				}, globalAnimation);

				chart.setChartSize(true);
				renderer.setSize(chartWidth, chartHeight, animation);

				// handle axes
				chart.maxTicks = null;
				each(chart.axes, function (axis) {
					axis.isDirty = true;
					axis.setScale();
				});

				// make sure non-cartesian series are also handled
				each(chart.series, function (serie) {
					serie.isDirty = true;
				});

				chart.isDirtyLegend = true; // force legend redraw
				chart.isDirtyBox = true; // force redraw of plot and chart border

				chart.layOutTitles(); // #2857
				chart.getMargins();

				chart.redraw(animation);


				chart.oldChartHeight = null;
				fireEvent(chart, 'resize');

				// fire endResize and set isResizing back
				// If animation is disabled, fire without delay
				if (globalAnimation === false) {
					fireEndResize();
				} else { // else set a timeout with the animation duration
					setTimeout(fireEndResize, (globalAnimation && globalAnimation.duration) || 500);
				}
			},

			/**
			 * Set the public chart properties. This is done before and after the pre-render
			 * to determine margin sizes
			 */
			setChartSize: function (skipAxes) {
				var chart = this,
					inverted = chart.inverted,
					renderer = chart.renderer,
					chartWidth = chart.chartWidth,
					chartHeight = chart.chartHeight,
					optionsChart = chart.options.chart,
					spacing = chart.spacing,
					clipOffset = chart.clipOffset,
					clipX,
					clipY,
					plotLeft,
					plotTop,
					plotWidth,
					plotHeight,
					plotBorderWidth;

				chart.plotLeft = plotLeft = mathRound(chart.plotLeft);
				chart.plotTop = plotTop = mathRound(chart.plotTop);
				chart.plotWidth = plotWidth = mathMax(0, mathRound(chartWidth - plotLeft - chart.marginRight));
				chart.plotHeight = plotHeight = mathMax(0, mathRound(chartHeight - plotTop - chart.marginBottom));

				chart.plotSizeX = inverted ? plotHeight : plotWidth;
				chart.plotSizeY = inverted ? plotWidth : plotHeight;
				
				chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;

				// Set boxes used for alignment
				chart.spacingBox = renderer.spacingBox = {
					x: spacing[3],
					y: spacing[0],
					width: chartWidth - spacing[3] - spacing[1],
					height: chartHeight - spacing[0] - spacing[2]
				};
				chart.plotBox = renderer.plotBox = {
					x: plotLeft,
					y: plotTop,
					width: plotWidth,
					height: plotHeight
				};

				plotBorderWidth = 2 * mathFloor(chart.plotBorderWidth / 2);
				clipX = mathCeil(mathMax(plotBorderWidth, clipOffset[3]) / 2);
				clipY = mathCeil(mathMax(plotBorderWidth, clipOffset[0]) / 2);
				chart.clipBox = {
					x: clipX, 
					y: clipY, 
					width: mathFloor(chart.plotSizeX - mathMax(plotBorderWidth, clipOffset[1]) / 2 - clipX), 
					height: mathMax(0, mathFloor(chart.plotSizeY - mathMax(plotBorderWidth, clipOffset[2]) / 2 - clipY))
				};

				if (!skipAxes) {
					each(chart.axes, function (axis) {
						axis.setAxisSize();
						axis.setAxisTranslation();
					});
				}
			},

			/**
			 * Initial margins before auto size margins are applied
			 */
			resetMargins: function () {
				var chart = this;

				each(marginNames, function (m, side) {
					chart[m] = pick(chart.margin[side], chart.spacing[side]);
				});
				chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left
				chart.clipOffset = [0, 0, 0, 0];
			},

			/**
			 * Draw the borders and backgrounds for chart and plot area
			 */
			drawChartBox: function () {
				var chart = this,
					optionsChart = chart.options.chart,
					renderer = chart.renderer,
					chartWidth = chart.chartWidth,
					chartHeight = chart.chartHeight,
					chartBackground = chart.chartBackground,
					plotBackground = chart.plotBackground,
					plotBorder = chart.plotBorder,
					plotBGImage = chart.plotBGImage,
					chartBorderWidth = optionsChart.borderWidth || 0,
					chartBackgroundColor = optionsChart.backgroundColor,
					plotBackgroundColor = optionsChart.plotBackgroundColor,
					plotBackgroundImage = optionsChart.plotBackgroundImage,
					plotBorderWidth = optionsChart.plotBorderWidth || 0,
					mgn,
					bgAttr,
					plotLeft = chart.plotLeft,
					plotTop = chart.plotTop,
					plotWidth = chart.plotWidth,
					plotHeight = chart.plotHeight,
					plotBox = chart.plotBox,
					clipRect = chart.clipRect,
					clipBox = chart.clipBox;

				// Chart area
				mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);

				if (chartBorderWidth || chartBackgroundColor) {
					if (!chartBackground) {
						
						bgAttr = {
							fill: chartBackgroundColor || NONE
						};
						if (chartBorderWidth) { // #980
							bgAttr.stroke = optionsChart.borderColor;
							bgAttr['stroke-width'] = chartBorderWidth;
						}
						chart.chartBackground = renderer.rect(mgn / 2, mgn / 2, chartWidth - mgn, chartHeight - mgn,
								optionsChart.borderRadius, chartBorderWidth)
							.attr(bgAttr)
							.addClass(PREFIX + 'background')
							.add()
							.shadow(optionsChart.shadow);

					} else { // resize
						chartBackground.animate(
							chartBackground.crisp({ width: chartWidth - mgn, height: chartHeight - mgn })
						);
					}
				}


				// Plot background
				if (plotBackgroundColor) {
					if (!plotBackground) {
						chart.plotBackground = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0)
							.attr({
								fill: plotBackgroundColor
							})
							.add()
							.shadow(optionsChart.plotShadow);
					} else {
						plotBackground.animate(plotBox);
					}
				}
				if (plotBackgroundImage) {
					if (!plotBGImage) {
						chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight)
							.add();
					} else {
						plotBGImage.animate(plotBox);
					}
				}
				
				// Plot clip
				if (!clipRect) {
					chart.clipRect = renderer.clipRect(clipBox);
				} else {
					clipRect.animate({
						width: clipBox.width,
						height: clipBox.height
					});
				}

				// Plot area border
				if (plotBorderWidth) {
					if (!plotBorder) {
						chart.plotBorder = renderer.rect(plotLeft, plotTop, plotWidth, plotHeight, 0, -plotBorderWidth)
							.attr({
								stroke: optionsChart.plotBorderColor,
								'stroke-width': plotBorderWidth,
								fill: NONE,
								zIndex: 1
							})
							.add();
					} else {
						plotBorder.animate(
							plotBorder.crisp({ x: plotLeft, y: plotTop, width: plotWidth, height: plotHeight, strokeWidth: -plotBorderWidth }) //#3282 plotBorder should be negative
						);
					}
				}

				// reset
				chart.isDirtyBox = false;
			},

			/**
			 * Detect whether a certain chart property is needed based on inspecting its options
			 * and series. This mainly applies to the chart.invert property, and in extensions to 
			 * the chart.angular and chart.polar properties.
			 */
			propFromSeries: function () {
				var chart = this,
					optionsChart = chart.options.chart,
					klass,
					seriesOptions = chart.options.series,
					i,
					value;
					
					
				each(['inverted', 'angular', 'polar'], function (key) {
					
					// The default series type's class
					klass = seriesTypes[optionsChart.type || optionsChart.defaultSeriesType];
					
					// Get the value from available chart-wide properties
					value = (
						chart[key] || // 1. it is set before
						optionsChart[key] || // 2. it is set in the options
						(klass && klass.prototype[key]) // 3. it's default series class requires it
					);
			
					// 4. Check if any the chart's series require it
					i = seriesOptions && seriesOptions.length;
					while (!value && i--) {
						klass = seriesTypes[seriesOptions[i].type];
						if (klass && klass.prototype[key]) {
							value = true;
						}
					}
			
					// Set the chart property
					chart[key] = value;	
				});
				
			},

			/**
			 * Link two or more series together. This is done initially from Chart.render,
			 * and after Chart.addSeries and Series.remove.
			 */
			linkSeries: function () {
				var chart = this,
					chartSeries = chart.series;

				// Reset links
				each(chartSeries, function (series) {
					series.linkedSeries.length = 0;
				});

				// Apply new links
				each(chartSeries, function (series) {
					var linkedTo = series.options.linkedTo;
					if (isString(linkedTo)) {
						if (linkedTo === ':previous') {
							linkedTo = chart.series[series.index - 1];
						} else {
							linkedTo = chart.get(linkedTo);
						}
						if (linkedTo) {
							linkedTo.linkedSeries.push(series);
							series.linkedParent = linkedTo;
							series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879
						}
					}
				});
			},

			/**
			 * Render series for the chart
			 */
			renderSeries: function () {
				each(this.series, function (serie) {
					serie.translate();
					serie.render();
				});
			},
				
			/**
			 * Render labels for the chart
			 */
			renderLabels: function () {
				var chart = this,
					labels = chart.options.labels;
				if (labels.items) {
					each(labels.items, function (label) {
						var style = extend(labels.style, label.style),
							x = pInt(style.left) + chart.plotLeft,
							y = pInt(style.top) + chart.plotTop + 12;

						// delete to prevent rewriting in IE
						delete style.left;
						delete style.top;

						chart.renderer.text(
							label.html,
							x,
							y
						)
						.attr({ zIndex: 2 })
						.css(style)
						.add();

					});
				}
			},

			/**
			 * Render all graphics for the chart
			 */
			render: function () {
				var chart = this,
					axes = chart.axes,
					renderer = chart.renderer,
					options = chart.options,
					tempWidth,
					tempHeight,
					redoHorizontal,
					redoVertical;

				// Title
				chart.setTitle();


				// Legend
				chart.legend = new Legend(chart, options.legend);

				// Get stacks
				if (chart.getStacks) {
					chart.getStacks();
				}

				// Get chart margins
				chart.getMargins(true);
				chart.setChartSize();

				// Record preliminary dimensions for later comparison
				tempWidth = chart.plotWidth;
				tempHeight = chart.plotHeight = chart.plotHeight - 13; // 13 is the most common height of X axis labels

				// Get margins by pre-rendering axes
				each(axes, function (axis) {
					axis.setScale();
				});
				chart.getAxisMargins();

				// If the plot area size has changed significantly, calculate tick positions again
				redoHorizontal = tempWidth / chart.plotWidth > 1.1;
				redoVertical = tempHeight / chart.plotHeight > 1.1;

				if (redoHorizontal || redoVertical) {

					chart.maxTicks = null; // reset for second pass
					each(axes, function (axis) {
						if ((axis.horiz && redoHorizontal) || (!axis.horiz && redoVertical)) {
							axis.setTickInterval(true); // update to reflect the new margins
						}
					});
					chart.getMargins(); // second pass to check for new labels
				}

				// Draw the borders and backgrounds
				chart.drawChartBox();		


				// Axes
				if (chart.hasCartesianSeries) {
					each(axes, function (axis) {
						axis.render();
					});
				}

				// The series
				if (!chart.seriesGroup) {
					chart.seriesGroup = renderer.g('series-group')
						.attr({ zIndex: 3 })
						.add();
				}
				chart.renderSeries();

				// Labels
				chart.renderLabels();

				// Credits
				chart.showCredits(options.credits);

				// Set flag
				chart.hasRendered = true;

			},

			/**
			 * Show chart credits based on config options
			 */
			showCredits: function (credits) {
				if (credits.enabled && !this.credits) {
					this.credits = this.renderer.text(
						credits.text,
						0,
						0
					)
					.on('click', function () {
						if (credits.href) {
							location.href = credits.href;
						}
					})
					.attr({
						align: credits.position.align,
						zIndex: 8
					})
					.css(credits.style)
					.add()
					.align(credits.position);
				}
			},

			/**
			 * Clean up memory usage
			 */
			destroy: function () {
				var chart = this,
					axes = chart.axes,
					series = chart.series,
					container = chart.container,
					i,
					parentNode = container && container.parentNode;
					
				// fire the chart.destoy event
				fireEvent(chart, 'destroy');
				
				// Delete the chart from charts lookup array
				charts[chart.index] = UNDEFINED;
				chartCount--;
				chart.renderTo.removeAttribute('data-highcharts-chart');

				// remove events
				removeEvent(chart);

				// ==== Destroy collections:
				// Destroy axes
				i = axes.length;
				while (i--) {
					axes[i] = axes[i].destroy();
				}

				// Destroy each series
				i = series.length;
				while (i--) {
					series[i] = series[i].destroy();
				}

				// ==== Destroy chart properties:
				each(['title', 'subtitle', 'chartBackground', 'plotBackground', 'plotBGImage', 
						'plotBorder', 'seriesGroup', 'clipRect', 'credits', 'pointer', 'scroller', 
						'rangeSelector', 'legend', 'resetZoomButton', 'tooltip', 'renderer'], function (name) {
					var prop = chart[name];

					if (prop && prop.destroy) {
						chart[name] = prop.destroy();
					}
				});

				// remove container and all SVG
				if (container) { // can break in IE when destroyed before finished loading
					container.innerHTML = '';
					removeEvent(container);
					if (parentNode) {
						discardElement(container);
					}

				}

				// clean it all up
				for (i in chart) {
					delete chart[i];
				}

			},


			/**
			 * VML namespaces can't be added until after complete. Listening
			 * for Perini's doScroll hack is not enough.
			 */
			isReadyToRender: function () {
				var chart = this;

				// Note: in spite of JSLint's complaints, win == win.top is required
				/*jslint eqeq: true*/
				if ((!hasSVG && (win == win.top && doc.readyState !== 'complete')) || (useCanVG && !win.canvg)) {
				/*jslint eqeq: false*/
					if (useCanVG) {
						// Delay rendering until canvg library is downloaded and ready
						CanVGController.push(function () { chart.firstRender(); }, chart.options.global.canvasToolsURL);
					} else {
						doc.attachEvent('onreadystatechange', function () {
							doc.detachEvent('onreadystatechange', chart.firstRender);
							if (doc.readyState === 'complete') {
								chart.firstRender();
							}
						});
					}
					return false;
				}
				return true;
			},

			/**
			 * Prepare for first rendering after all data are loaded
			 */
			firstRender: function () {
				var chart = this,
					options = chart.options,
					callback = chart.callback;

				// Check whether the chart is ready to render
				if (!chart.isReadyToRender()) {
					return;
				}

				// Create the container
				chart.getContainer();

				// Run an early event after the container and renderer are established
				fireEvent(chart, 'init');

				
				chart.resetMargins();
				chart.setChartSize();

				// Set the common chart properties (mainly invert) from the given series
				chart.propFromSeries();

				// get axes
				chart.getAxes();

				// Initialize the series
				each(options.series || [], function (serieOptions) {
					chart.initSeries(serieOptions);
				});

				chart.linkSeries();

				// Run an event after axes and series are initialized, but before render. At this stage,
				// the series data is indexed and cached in the xData and yData arrays, so we can access
				// those before rendering. Used in Highstock. 
				fireEvent(chart, 'beforeRender'); 

				// depends on inverted and on margins being set
				if (Highcharts.Pointer) {
					chart.pointer = new Pointer(chart, options);
				}

				chart.render();

				// add canvas
				chart.renderer.draw();
				// run callbacks
				if (callback) {
					callback.apply(chart, [chart]);
				}
				each(chart.callbacks, function (fn) {
					if (chart.index !== UNDEFINED) { // Chart destroyed in its own callback (#3600)
						fn.apply(chart, [chart]);
					}
				});
				
				// Fire the load event
				fireEvent(chart, 'load');		
				
				// If the chart was rendered outside the top container, put it back in (#3679)
				chart.cloneRenderTo(true);

			},

			/**
			* Creates arrays for spacing and margin from given options.
			*/
			splashArray: function (target, options) {
				var oVar = options[target],
					tArray = isObject(oVar) ? oVar : [oVar, oVar, oVar, oVar];

				return [pick(options[target + 'Top'], tArray[0]),
						pick(options[target + 'Right'], tArray[1]),
						pick(options[target + 'Bottom'], tArray[2]),
						pick(options[target + 'Left'], tArray[3])];
			}
		}; // end Chart

		var CenteredSeriesMixin = Highcharts.CenteredSeriesMixin = {
			/**
			 * Get the center of the pie based on the size and center options relative to the  
			 * plot area. Borrowed by the polar and gauge series types.
			 */
			getCenter: function () {
				
				var options = this.options,
					chart = this.chart,
					slicingRoom = 2 * (options.slicedOffset || 0),
					handleSlicingRoom,
					plotWidth = chart.plotWidth - 2 * slicingRoom,
					plotHeight = chart.plotHeight - 2 * slicingRoom,
					centerOption = options.center,
					positions = [pick(centerOption[0], '50%'), pick(centerOption[1], '50%'), options.size || '100%', options.innerSize || 0],
					smallestSize = mathMin(plotWidth, plotHeight),
					i,
					value;

				for (i = 0; i < 4; ++i) {
					value = positions[i];
					handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));
					
					// i == 0: centerX, relative to width
					// i == 1: centerY, relative to height
					// i == 2: size, relative to smallestSize
					// i == 3: innerSize, relative to size
					positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) +
						(handleSlicingRoom ? slicingRoom : 0);

				}
				return positions;
			}
		};

		/**
		 * The Point object and prototype. Inheritable and used as base for PiePoint
		 */
		var Point = function () {};
		Point.prototype = {

			/**
			 * Initialize the point
			 * @param {Object} series The series object containing this point
			 * @param {Object} options The data in either number, array or object format
			 */
			init: function (series, options, x) {

				var point = this,
					colors;
				point.series = series;
				point.color = series.color; // #3445
				point.applyOptions(options, x);
				point.pointAttr = {};

				if (series.options.colorByPoint) {
					colors = series.options.colors || series.chart.options.colors;
					point.color = point.color || colors[series.colorCounter++];
					// loop back to zero
					if (series.colorCounter === colors.length) {
						series.colorCounter = 0;
					}
				}

				series.chart.pointCount++;
				return point;
			},
			/**
			 * Apply the options containing the x and y data and possible some extra properties.
			 * This is called on point init or from point.update.
			 *
			 * @param {Object} options
			 */
			applyOptions: function (options, x) {
				var point = this,
					series = point.series,
					pointValKey = series.options.pointValKey || series.pointValKey;

				options = Point.prototype.optionsToObject.call(this, options);

				// copy options directly to point
				extend(point, options);
				point.options = point.options ? extend(point.options, options) : options;

				// For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.
				if (pointValKey) {
					point.y = point[pointValKey];
				}

				// If no x is set by now, get auto incremented value. All points must have an
				// x value, however the y value can be null to create a gap in the series
				if (point.x === UNDEFINED && series) {
					point.x = x === UNDEFINED ? series.autoIncrement() : x;
				}

				return point;
			},

			/**
			 * Transform number or array configs into objects
			 */
			optionsToObject: function (options) {
				var ret = {},
					series = this.series,
					keys = series.options.keys,
					pointArrayMap = keys || series.pointArrayMap || ['y'],
					valueCount = pointArrayMap.length,
					firstItemType,
					i = 0,
					j = 0;

				if (typeof options === 'number' || options === null) {
					ret[pointArrayMap[0]] = options;

				} else if (isArray(options)) {
					// with leading x value
					if (!keys && options.length > valueCount) {
						firstItemType = typeof options[0];
						if (firstItemType === 'string') {
							ret.name = options[0];
						} else if (firstItemType === 'number') {
							ret.x = options[0];
						}
						i++;
					}
					while (j < valueCount) {
						ret[pointArrayMap[j++]] = options[i++];
					}
				} else if (typeof options === 'object') {
					ret = options;

					// This is the fastest way to detect if there are individual point dataLabels that need
					// to be considered in drawDataLabels. These can only occur in object configs.
					if (options.dataLabels) {
						series._hasPointLabels = true;
					}

					// Same approach as above for markers
					if (options.marker) {
						series._hasPointMarkers = true;
					}
				}
				return ret;
			},

			/**
			 * Destroy a point to clear memory. Its reference still stays in series.data.
			 */
			destroy: function () {
				var point = this,
					series = point.series,
					chart = series.chart,
					hoverPoints = chart.hoverPoints,
					prop;

				chart.pointCount--;

				if (hoverPoints) {
					point.setState();
					erase(hoverPoints, point);
					if (!hoverPoints.length) {
						chart.hoverPoints = null;
					}

				}
				if (point === chart.hoverPoint) {
					point.onMouseOut();
				}

				// remove all events
				if (point.graphic || point.dataLabel) { // removeEvent and destroyElements are performance expensive
					removeEvent(point);
					point.destroyElements();
				}

				if (point.legendItem) { // pies have legend items
					chart.legend.destroyItem(point);
				}

				for (prop in point) {
					point[prop] = null;
				}


			},

			/**
			 * Destroy SVG elements associated with the point
			 */
			destroyElements: function () {
				var point = this,
					props = ['graphic', 'dataLabel', 'dataLabelUpper', 'group', 'connector', 'shadowGroup'],
					prop,
					i = 6;
				while (i--) {
					prop = props[i];
					if (point[prop]) {
						point[prop] = point[prop].destroy();
					}
				}
			},

			/**
			 * Return the configuration hash needed for the data label and tooltip formatters
			 */
			getLabelConfig: function () {
				return {
					x: this.category,
					y: this.y,
					color: this.color,
					key: this.name || this.category,
					series: this.series,
					point: this,
					percentage: this.percentage,
					total: this.total || this.stackTotal
				};
			},	

			/**
			 * Extendable method for formatting each point's tooltip line
			 *
			 * @return {String} A string to be concatenated in to the common tooltip text
			 */
			tooltipFormatter: function (pointFormat) {

				// Insert options for valueDecimals, valuePrefix, and valueSuffix
				var series = this.series,
					seriesTooltipOptions = series.tooltipOptions,
					valueDecimals = pick(seriesTooltipOptions.valueDecimals, ''),
					valuePrefix = seriesTooltipOptions.valuePrefix || '',
					valueSuffix = seriesTooltipOptions.valueSuffix || '';

				// Loop over the point array map and replace unformatted values with sprintf formatting markup
				each(series.pointArrayMap || ['y'], function (key) {
					key = '{point.' + key; // without the closing bracket
					if (valuePrefix || valueSuffix) {
						pointFormat = pointFormat.replace(key + '}', valuePrefix + key + '}' + valueSuffix);
					}
					pointFormat = pointFormat.replace(key + '}', key + ':,.' + valueDecimals + 'f}');
				});

				return format(pointFormat, {
					point: this,
					series: this.series
				});
			},

			/**
			 * Fire an event on the Point object. Must not be renamed to fireEvent, as this
			 * causes a name clash in MooTools
			 * @param {String} eventType
			 * @param {Object} eventArgs Additional event arguments
			 * @param {Function} defaultFunction Default event handler
			 */
			firePointEvent: function (eventType, eventArgs, defaultFunction) {
				var point = this,
					series = this.series,
					seriesOptions = series.options;

				// load event handlers on demand to save time on mouseover/out
				if (seriesOptions.point.events[eventType] || (point.options && point.options.events && point.options.events[eventType])) {
					this.importEvents();
				}

				// add default handler if in selection mode
				if (eventType === 'click' && seriesOptions.allowPointSelect) {
					defaultFunction = function (event) {
						// Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera
						if (point.select) { // Could be destroyed by prior event handlers (#2911)
							point.select(null, event.ctrlKey || event.metaKey || event.shiftKey);
						}
					};
				}

				fireEvent(this, eventType, eventArgs, defaultFunction);
			}
		};/**
		 * @classDescription The base function which all other series types inherit from. The data in the series is stored
		 * in various arrays.
		 *
		 * - First, series.options.data contains all the original config options for
		 * each point whether added by options or methods like series.addPoint.
		 * - Next, series.data contains those values converted to points, but in case the series data length
		 * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It
		 * only contains the points that have been created on demand.
		 * - Then there's series.points that contains all currently visible point objects. In case of cropping,
		 * the cropped-away points are not part of this array. The series.points array starts at series.cropStart
		 * compared to series.data and series.options.data. If however the series data is grouped, these can't
		 * be correlated one to one.
		 * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.
		 * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.
		 *
		 * @param {Object} chart
		 * @param {Object} options
		 */
		var Series = Highcharts.Series = function () {};

		Series.prototype = {

			isCartesian: true,
			type: 'line',
			pointClass: Point,
			sorted: true, // requires the data to be sorted
			requireSorting: true,
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'lineColor',
				'stroke-width': 'lineWidth',
				fill: 'fillColor',
				r: 'radius'
			},
			axisTypes: ['xAxis', 'yAxis'],
			colorCounter: 0,
			parallelArrays: ['x', 'y'], // each point's x and y values are stored in this.xData and this.yData
			init: function (chart, options) {
				var series = this,
					eventType,
					events,
					chartSeries = chart.series,
					sortByIndex = function (a, b) {
						return pick(a.options.index, a._i) - pick(b.options.index, b._i);
					};

				series.chart = chart;
				series.options = options = series.setOptions(options); // merge with plotOptions
				series.linkedSeries = [];

				// bind the axes
				series.bindAxes();

				// set some variables
				extend(series, {
					name: options.name,
					state: NORMAL_STATE,
					pointAttr: {},
					visible: options.visible !== false, // true by default
					selected: options.selected === true // false by default
				});

				// special
				if (useCanVG) {
					options.animation = false;
				}

				// register event listeners
				events = options.events;
				for (eventType in events) {
					addEvent(series, eventType, events[eventType]);
				}
				if (
					(events && events.click) ||
					(options.point && options.point.events && options.point.events.click) ||
					options.allowPointSelect
				) {
					chart.runTrackerClick = true;
				}

				series.getColor();
				series.getSymbol();

				// Set the data
				each(series.parallelArrays, function (key) {
					series[key + 'Data'] = [];
				});
				series.setData(options.data, false);

				// Mark cartesian
				if (series.isCartesian) {
					chart.hasCartesianSeries = true;
				}

				// Register it in the chart
				chartSeries.push(series);
				series._i = chartSeries.length - 1;

				// Sort series according to index option (#248, #1123, #2456)
				stableSort(chartSeries, sortByIndex);
				if (this.yAxis) {
					stableSort(this.yAxis.series, sortByIndex);
				}

				each(chartSeries, function (series, i) {
					series.index = i;
					series.name = series.name || 'Series ' + (i + 1);
				});

			},

			/**
			 * Set the xAxis and yAxis properties of cartesian series, and register the series
			 * in the axis.series array
			 */
			bindAxes: function () {
				var series = this,
					seriesOptions = series.options,
					chart = series.chart,
					axisOptions;

				each(series.axisTypes || [], function (AXIS) { // repeat for xAxis and yAxis

					each(chart[AXIS], function (axis) { // loop through the chart's axis objects
						axisOptions = axis.options;

						// apply if the series xAxis or yAxis option mathches the number of the
						// axis, or if undefined, use the first axis
						if ((seriesOptions[AXIS] === axisOptions.index) ||
								(seriesOptions[AXIS] !== UNDEFINED && seriesOptions[AXIS] === axisOptions.id) ||
								(seriesOptions[AXIS] === UNDEFINED && axisOptions.index === 0)) {

							// register this series in the axis.series lookup
							axis.series.push(series);

							// set this series.xAxis or series.yAxis reference
							series[AXIS] = axis;

							// mark dirty for redraw
							axis.isDirty = true;
						}
					});

					// The series needs an X and an Y axis
					if (!series[AXIS] && series.optionalAxis !== AXIS) {
						error(18, true);
					}

				});
			},

			/**
			 * For simple series types like line and column, the data values are held in arrays like
			 * xData and yData for quick lookup to find extremes and more. For multidimensional series
			 * like bubble and map, this can be extended with arrays like zData and valueData by
			 * adding to the series.parallelArrays array.
			 */
			updateParallelArrays: function (point, i) {
				var series = point.series,
					args = arguments,
					fn = typeof i === 'number' ?
						 // Insert the value in the given position
						function (key) {
							var val = key === 'y' && series.toYData ? series.toYData(point) : point[key];
							series[key + 'Data'][i] = val;
						} :
						// Apply the method specified in i with the following arguments as arguments
						function (key) {
							Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));
						};

				each(series.parallelArrays, fn);
			},

			/**
			 * Return an auto incremented x value based on the pointStart and pointInterval options.
			 * This is only used if an x value is not given for the point that calls autoIncrement.
			 */
			autoIncrement: function () {

				var options = this.options,
					xIncrement = this.xIncrement,
					date,
					pointInterval,
					pointIntervalUnit = options.pointIntervalUnit;
				
				xIncrement = pick(xIncrement, options.pointStart, 0);
				
				this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);
				
				// Added code for pointInterval strings
				if (pointIntervalUnit === 'month' || pointIntervalUnit === 'year') {
					date = new Date(xIncrement);
					date = (pointIntervalUnit === 'month') ?
						+date[setMonth](date[getMonth]() + pointInterval) :
						+date[setFullYear](date[getFullYear]() + pointInterval);
					pointInterval = date - xIncrement;
				}
				
				this.xIncrement = xIncrement + pointInterval;
				return xIncrement;
			},

			/**
			 * Divide the series data into segments divided by null values.
			 */
			getSegments: function () {
				var series = this,
					lastNull = -1,
					segments = [],
					i,
					points = series.points,
					pointsLength = points.length;

				if (pointsLength) { // no action required for []

					// if connect nulls, just remove null points
					if (series.options.connectNulls) {
						i = pointsLength;
						while (i--) {
							if (points[i].y === null) {
								points.splice(i, 1);
							}
						}
						if (points.length) {
							segments = [points];
						}

					// else, split on null points
					} else {
						each(points, function (point, i) {
							if (point.y === null) {
								if (i > lastNull + 1) {
									segments.push(points.slice(lastNull + 1, i));
								}
								lastNull = i;
							} else if (i === pointsLength - 1) { // last value
								segments.push(points.slice(lastNull + 1, i + 1));
							}
						});
					}
				}

				// register it
				series.segments = segments;
			},

			/**
			 * Set the series options by merging from the options tree
			 * @param {Object} itemOptions
			 */
			setOptions: function (itemOptions) {
				var chart = this.chart,
					chartOptions = chart.options,
					plotOptions = chartOptions.plotOptions,
					userOptions = chart.userOptions || {},
					userPlotOptions = userOptions.plotOptions || {},
					typeOptions = plotOptions[this.type],
					options,
					zones;

				this.userOptions = itemOptions;

				// General series options take precedence over type options because otherwise, default
				// type options like column.animation would be overwritten by the general option.
				// But issues have been raised here (#3881), and the solution may be to distinguish 
				// between default option and userOptions like in the tooltip below.
				options = merge(
					typeOptions,
					plotOptions.series,
					itemOptions
				);

				// The tooltip options are merged between global and series specific options
				this.tooltipOptions = merge(
					defaultOptions.tooltip,
					defaultOptions.plotOptions[this.type].tooltip,
					userOptions.tooltip,
					userPlotOptions.series && userPlotOptions.series.tooltip,
					userPlotOptions[this.type] && userPlotOptions[this.type].tooltip,
					itemOptions.tooltip
				);

				// Delete marker object if not allowed (#1125)
				if (typeOptions.marker === null) {
					delete options.marker;
				}

				// Handle color zones
				this.zoneAxis = options.zoneAxis;
				zones = this.zones = (options.zones || []).slice();
				if ((options.negativeColor || options.negativeFillColor) && !options.zones) {
					zones.push({
						value: options[this.zoneAxis + 'Threshold'] || options.threshold || 0,
						color: options.negativeColor,
						fillColor: options.negativeFillColor
					});
				}
				if (zones.length) { // Push one extra zone for the rest
					if (defined(zones[zones.length - 1].value)) {
						zones.push({
							color: this.color,
							fillColor: this.fillColor
						});
					}
				}
				return options;
			},

			getCyclic: function (prop, value, defaults) {
				var i,
					userOptions = this.userOptions,
					indexName = '_' + prop + 'Index',
					counterName = prop + 'Counter';

				if (!value) {
					if (defined(userOptions[indexName])) { // after Series.update()
						i = userOptions[indexName];
					} else {
						userOptions[indexName] = i = this.chart[counterName] % defaults.length;
						this.chart[counterName] += 1;
					}
					value = defaults[i];
				}
				this[prop] = value;
			},

			/**
			 * Get the series' color
			 */
			getColor: function () {
				if (this.options.colorByPoint) {
					this.options.color = null; // #4359, selected slice got series.color even when colorByPoint was set.
				} else {
					this.getCyclic('color', this.options.color || defaultPlotOptions[this.type].color, this.chart.options.colors);
				}
			},
			/**
			 * Get the series' symbol
			 */
			getSymbol: function () {
				var seriesMarkerOption = this.options.marker;

				this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);

				// don't substract radius in image symbols (#604)
				if (/^url/.test(this.symbol)) {
					seriesMarkerOption.radius = 0;
				}
			},

			drawLegendSymbol: LegendSymbolMixin.drawLineMarker,

			/**
			 * Replace the series data with a new set of data
			 * @param {Object} data
			 * @param {Object} redraw
			 */
			setData: function (data, redraw, animation, updatePoints) {
				var series = this,
					oldData = series.points,
					oldDataLength = (oldData && oldData.length) || 0,
					dataLength,
					options = series.options,
					chart = series.chart,
					firstPoint = null,
					xAxis = series.xAxis,
					hasCategories = xAxis && !!xAxis.categories,
					i,
					turboThreshold = options.turboThreshold,
					pt,
					xData = this.xData,
					yData = this.yData,
					pointArrayMap = series.pointArrayMap,
					valueCount = pointArrayMap && pointArrayMap.length;

				data = data || [];
				dataLength = data.length;
				redraw = pick(redraw, true);

				// If the point count is the same as is was, just run Point.update which is
				// cheaper, allows animation, and keeps references to points.
				if (updatePoints !== false && dataLength && oldDataLength === dataLength && !series.cropped && !series.hasGroupedData && series.visible) {
					each(data, function (point, i) {
						if (oldData[i].update) { // Linked, previously hidden series (#3709)
							oldData[i].update(point, false, null, false);
						}
					});

				} else {

					// Reset properties
					series.xIncrement = null;
					series.pointRange = hasCategories ? 1 : options.pointRange;

					series.colorCounter = 0; // for series with colorByPoint (#1547)
					
					// Update parallel arrays
					each(this.parallelArrays, function (key) {
						series[key + 'Data'].length = 0;
					});

					// In turbo mode, only one- or twodimensional arrays of numbers are allowed. The
					// first value is tested, and we assume that all the rest are defined the same
					// way. Although the 'for' loops are similar, they are repeated inside each
					// if-else conditional for max performance.
					if (turboThreshold && dataLength > turboThreshold) {

						// find the first non-null point
						i = 0;
						while (firstPoint === null && i < dataLength) {
							firstPoint = data[i];
							i++;
						}


						if (isNumber(firstPoint)) { // assume all points are numbers
							var x = pick(options.pointStart, 0),
								pointInterval = pick(options.pointInterval, 1);

							for (i = 0; i < dataLength; i++) {
								xData[i] = x;
								yData[i] = data[i];
								x += pointInterval;
							}
							series.xIncrement = x;
						} else if (isArray(firstPoint)) { // assume all points are arrays
							if (valueCount) { // [x, low, high] or [x, o, h, l, c]
								for (i = 0; i < dataLength; i++) {
									pt = data[i];
									xData[i] = pt[0];
									yData[i] = pt.slice(1, valueCount + 1);
								}
							} else { // [x, y]
								for (i = 0; i < dataLength; i++) {
									pt = data[i];
									xData[i] = pt[0];
									yData[i] = pt[1];
								}
							}
						} else {
							error(12); // Highcharts expects configs to be numbers or arrays in turbo mode
						}
					} else {
						for (i = 0; i < dataLength; i++) {
							if (data[i] !== UNDEFINED) { // stray commas in oldIE
								pt = { series: series };
								series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);
								series.updateParallelArrays(pt, i);
								if (hasCategories && defined(pt.name)) { // #4401
									xAxis.names[pt.x] = pt.name; // #2046
								}
							}
						}
					}

					// Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON
					if (isString(yData[0])) {
						error(14, true);
					}

					series.data = [];
					series.options.data = data;
					//series.zData = zData;

					// destroy old points
					i = oldDataLength;
					while (i--) {
						if (oldData[i] && oldData[i].destroy) {
							oldData[i].destroy();
						}
					}

					// reset minRange (#878)
					if (xAxis) {
						xAxis.minRange = xAxis.userMinRange;
					}

					// redraw
					series.isDirty = series.isDirtyData = chart.isDirtyBox = true;
					animation = false;
				}

				if (redraw) {
					chart.redraw(animation);
				}
			},

			/**
			 * Process the data by cropping away unused data points if the series is longer
			 * than the crop threshold. This saves computing time for lage series.
			 */
			processData: function (force) {
				var series = this,
					processedXData = series.xData, // copied during slice operation below
					processedYData = series.yData,
					dataLength = processedXData.length,
					croppedData,
					cropStart = 0,
					cropped,
					distance,
					closestPointRange,
					xAxis = series.xAxis,
					i, // loop variable
					options = series.options,
					cropThreshold = options.cropThreshold,
					isCartesian = series.isCartesian,
					xExtremes,
					min,
					max;

				// If the series data or axes haven't changed, don't go through this. Return false to pass
				// the message on to override methods like in data grouping.
				if (isCartesian && !series.isDirty && !xAxis.isDirty && !series.yAxis.isDirty && !force) {
					return false;
				}

				if (xAxis) {
					xExtremes = xAxis.getExtremes(); // corrected for log axis (#3053)
					min = xExtremes.min;
					max = xExtremes.max;
				}

				// optionally filter out points outside the plot area
				if (isCartesian && series.sorted && (!cropThreshold || dataLength > cropThreshold || series.forceCrop)) {
					
					// it's outside current extremes
					if (processedXData[dataLength - 1] < min || processedXData[0] > max) {
						processedXData = [];
						processedYData = [];

					// only crop if it's actually spilling out
					} else if (processedXData[0] < min || processedXData[dataLength - 1] > max) {
						croppedData = this.cropData(series.xData, series.yData, min, max);
						processedXData = croppedData.xData;
						processedYData = croppedData.yData;
						cropStart = croppedData.start;
						cropped = true;
					}
				}


				// Find the closest distance between processed points
				for (i = processedXData.length - 1; i >= 0; i--) {
					distance = processedXData[i] - processedXData[i - 1];
					
					if (distance > 0 && (closestPointRange === UNDEFINED || distance < closestPointRange)) {
						closestPointRange = distance;

					// Unsorted data is not supported by the line tooltip, as well as data grouping and
					// navigation in Stock charts (#725) and width calculation of columns (#1900)
					} else if (distance < 0 && series.requireSorting) {
						error(15);
					}
				}

				// Record the properties
				series.cropped = cropped; // undefined or true
				series.cropStart = cropStart;
				series.processedXData = processedXData;
				series.processedYData = processedYData;

				if (options.pointRange === null) { // null means auto, as for columns, candlesticks and OHLC
					series.pointRange = closestPointRange || 1;
				}
				series.closestPointRange = closestPointRange;

			},

			/**
			 * Iterate over xData and crop values between min and max. Returns object containing crop start/end
			 * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range
			 */
			cropData: function (xData, yData, min, max) {
				var dataLength = xData.length,
					cropStart = 0,
					cropEnd = dataLength,
					cropShoulder = pick(this.cropShoulder, 1), // line-type series need one point outside
					i;

				// iterate up to find slice start
				for (i = 0; i < dataLength; i++) {
					if (xData[i] >= min) {
						cropStart = mathMax(0, i - cropShoulder);
						break;
					}
				}

				// proceed to find slice end
				for (; i < dataLength; i++) {
					if (xData[i] > max) {
						cropEnd = i + cropShoulder;
						break;
					}
				}

				return {
					xData: xData.slice(cropStart, cropEnd),
					yData: yData.slice(cropStart, cropEnd),
					start: cropStart,
					end: cropEnd
				};
			},


			/**
			 * Generate the data point after the data has been processed by cropping away
			 * unused points and optionally grouped in Highcharts Stock.
			 */
			generatePoints: function () {
				var series = this,
					options = series.options,
					dataOptions = options.data,
					data = series.data,
					dataLength,
					processedXData = series.processedXData,
					processedYData = series.processedYData,
					pointClass = series.pointClass,
					processedDataLength = processedXData.length,
					cropStart = series.cropStart || 0,
					cursor,
					hasGroupedData = series.hasGroupedData,
					point,
					points = [],
					i;

				if (!data && !hasGroupedData) {
					var arr = [];
					arr.length = dataOptions.length;
					data = series.data = arr;
				}

				for (i = 0; i < processedDataLength; i++) {
					cursor = cropStart + i;
					if (!hasGroupedData) {
						if (data[cursor]) {
							point = data[cursor];
						} else if (dataOptions[cursor] !== UNDEFINED) { // #970
							data[cursor] = point = (new pointClass()).init(series, dataOptions[cursor], processedXData[i]);
						}
						points[i] = point;
					} else {
						// splat the y data in case of ohlc data array
						points[i] = (new pointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));
					}
					points[i].index = cursor; // For faster access in Point.update
				}

				// Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when
				// swithching view from non-grouped data to grouped data (#637)
				if (data && (processedDataLength !== (dataLength = data.length) || hasGroupedData)) {
					for (i = 0; i < dataLength; i++) {
						if (i === cropStart && !hasGroupedData) { // when has grouped data, clear all points
							i += processedDataLength;
						}
						if (data[i]) {
							data[i].destroyElements();
							data[i].plotX = UNDEFINED; // #1003
						}
					}
				}

				series.data = data;
				series.points = points;
			},

			/**
			 * Calculate Y extremes for visible data
			 */
			getExtremes: function (yData) {
				var xAxis = this.xAxis,
					yAxis = this.yAxis,
					xData = this.processedXData,
					yDataLength,
					activeYData = [],
					activeCounter = 0,
					xExtremes = xAxis.getExtremes(), // #2117, need to compensate for log X axis
					xMin = xExtremes.min,
					xMax = xExtremes.max,
					validValue,
					withinRange,
					x,
					y,
					i,
					j;

				yData = yData || this.stackedYData || this.processedYData;
				yDataLength = yData.length;

				for (i = 0; i < yDataLength; i++) {

					x = xData[i];
					y = yData[i];

					// For points within the visible range, including the first point outside the
					// visible range, consider y extremes
					validValue = y !== null && y !== UNDEFINED && (!yAxis.isLog || (y.length || y > 0));
					withinRange = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped ||
						((xData[i + 1] || x) >= xMin &&	(xData[i - 1] || x) <= xMax);

					if (validValue && withinRange) {

						j = y.length;
						if (j) { // array, like ohlc or range data
							while (j--) {
								if (y[j] !== null) {
									activeYData[activeCounter++] = y[j];
								}
							}
						} else {
							activeYData[activeCounter++] = y;
						}
					}
				}
				this.dataMin = arrayMin(activeYData);
				this.dataMax = arrayMax(activeYData);
			},

			/**
			 * Translate data points from raw data values to chart specific positioning data
			 * needed later in drawPoints, drawGraph and drawTracker.
			 */
			translate: function () {
				if (!this.processedXData) { // hidden series
					this.processData();
				}
				this.generatePoints();
				var series = this,
					options = series.options,
					stacking = options.stacking,
					xAxis = series.xAxis,
					categories = xAxis.categories,
					yAxis = series.yAxis,
					points = series.points,
					dataLength = points.length,
					hasModifyValue = !!series.modifyValue,
					i,
					pointPlacement = options.pointPlacement,
					dynamicallyPlaced = pointPlacement === 'between' || isNumber(pointPlacement),
					threshold = options.threshold,
					stackThreshold = options.startFromThreshold ? threshold : 0,
					plotX,
					plotY,
					lastPlotX,
					closestPointRangePx = Number.MAX_VALUE;

				// Translate each point
				for (i = 0; i < dataLength; i++) {
					var point = points[i],
						xValue = point.x,
						yValue = point.y,
						yBottom = point.low,
						stack = stacking && yAxis.stacks[(series.negStacks && yValue < (stackThreshold ? 0 : threshold) ? '-' : '') + series.stackKey],
						pointStack,
						stackValues;

					// Discard disallowed y values for log axes (#3434)
					if (yAxis.isLog && yValue !== null && yValue <= 0) {
						point.y = yValue = null;
						error(10);
					}

					// Get the plotX translation
					point.plotX = plotX = mathMin(mathMax(-1e5, xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')), 1e5); // #3923


					// Calculate the bottom y value for stacked series
					if (stacking && series.visible && stack && stack[xValue]) {

						pointStack = stack[xValue];
						stackValues = pointStack.points[series.index + ',' + i];
						yBottom = stackValues[0];
						yValue = stackValues[1];

						if (yBottom === stackThreshold) {
							yBottom = pick(threshold, yAxis.min);
						}
						if (yAxis.isLog && yBottom <= 0) { // #1200, #1232
							yBottom = null;
						}

						point.total = point.stackTotal = pointStack.total;
						point.percentage = pointStack.total && (point.y / pointStack.total * 100);
						point.stackY = yValue;

						// Place the stack label
						pointStack.setOffset(series.pointXOffset || 0, series.barW || 0);

					}

					// Set translated yBottom or remove it
					point.yBottom = defined(yBottom) ?
						yAxis.translate(yBottom, 0, 1, 0, 1) :
						null;

					// general hook, used for Highstock compare mode
					if (hasModifyValue) {
						yValue = series.modifyValue(yValue, point);
					}

					// Set the the plotY value, reset it for redraws
					point.plotY = plotY = (typeof yValue === 'number' && yValue !== Infinity) ?
						mathMin(mathMax(-1e5, yAxis.translate(yValue, 0, 1, 0, 1)), 1e5) : // #3201
						UNDEFINED;
					point.isInside = plotY !== UNDEFINED && plotY >= 0 && plotY <= yAxis.len && // #3519
						plotX >= 0 && plotX <= xAxis.len;


					// Set client related positions for mouse tracking
					point.clientX = dynamicallyPlaced ? xAxis.translate(xValue, 0, 0, 0, 1) : plotX; // #1514

					point.negative = point.y < (threshold || 0);

					// some API data
					point.category = categories && categories[point.x] !== UNDEFINED ?
						categories[point.x] : point.x;

					// Determine auto enabling of markers (#3635)
					if (i) {
						closestPointRangePx = mathMin(closestPointRangePx, mathAbs(plotX - lastPlotX));
					}
					lastPlotX = plotX;

				}

				series.closestPointRangePx = closestPointRangePx;

				// now that we have the cropped data, build the segments
				series.getSegments();
			},

			/**
			 * Set the clipping for the series. For animated series it is called twice, first to initiate
			 * animating the clip then the second time without the animation to set the final clip.
			 */
			setClip: function (animation) {
				var chart = this.chart,
					renderer = chart.renderer,
					inverted = chart.inverted,
					seriesClipBox = this.clipBox,
					clipBox = seriesClipBox || chart.clipBox,
					sharedClipKey = this.sharedClipKey || ['_sharedClip', animation && animation.duration, animation && animation.easing, clipBox.height].join(','),
					clipRect = chart[sharedClipKey],
					markerClipRect = chart[sharedClipKey + 'm'];

				// If a clipping rectangle with the same properties is currently present in the chart, use that.
				if (!clipRect) {

					// When animation is set, prepare the initial positions
					if (animation) { 
						clipBox.width = 0;

						chart[sharedClipKey + 'm'] = markerClipRect = renderer.clipRect(
							-99, // include the width of the first marker
							inverted ? -chart.plotLeft : -chart.plotTop,
							99,
							inverted ? chart.chartWidth : chart.chartHeight
						);
					}
					chart[sharedClipKey] = clipRect = renderer.clipRect(clipBox);
					
				}
				if (animation) {
					clipRect.count += 1;
				}

				if (this.options.clip !== false) {
					this.group.clip(animation || seriesClipBox ? clipRect : chart.clipRect);
					this.markerGroup.clip(markerClipRect);
					this.sharedClipKey = sharedClipKey;
				}

				// Remove the shared clipping rectangle when all series are shown
				if (!animation) {
					clipRect.count -= 1;
					if (clipRect.count <= 0 && sharedClipKey && chart[sharedClipKey]) {
						if (!seriesClipBox) {
							chart[sharedClipKey] = chart[sharedClipKey].destroy();
						}
						if (chart[sharedClipKey + 'm']) {
							chart[sharedClipKey + 'm'] = chart[sharedClipKey + 'm'].destroy();
						}
					}
				}
			},

			/**
			 * Animate in the series
			 */
			animate: function (init) {
				var series = this,
					chart = series.chart,
					clipRect,
					animation = series.options.animation,
					sharedClipKey;

				// Animation option is set to true
				if (animation && !isObject(animation)) {
					animation = defaultPlotOptions[series.type].animation;
				}

				// Initialize the animation. Set up the clipping rectangle.
				if (init) {

					series.setClip(animation);

				// Run the animation
				} else {
					sharedClipKey = this.sharedClipKey;
					clipRect = chart[sharedClipKey];
					if (clipRect) {
						clipRect.animate({
							width: chart.plotSizeX
						}, animation);
					}
					if (chart[sharedClipKey + 'm']) {
						chart[sharedClipKey + 'm'].animate({
							width: chart.plotSizeX + 99
						}, animation);
					}

					// Delete this function to allow it only once
					series.animate = null;
		 
				}
			},

			/**
			 * This runs after animation to land on the final plot clipping
			 */
			afterAnimate: function () {
				this.setClip();
				fireEvent(this, 'afterAnimate');
			},

			/**
			 * Draw the markers
			 */
			drawPoints: function () {
				var series = this,
					pointAttr,
					points = series.points,
					chart = series.chart,
					plotX,
					plotY,
					i,
					point,
					radius,
					symbol,
					isImage,
					graphic,
					options = series.options,
					seriesMarkerOptions = options.marker,
					seriesPointAttr = series.pointAttr[''],
					pointMarkerOptions,
					hasPointMarker,
					enabled,
					isInside,
					markerGroup = series.markerGroup,
					xAxis = series.xAxis,
					globallyEnabled = pick(
						seriesMarkerOptions.enabled, 
						xAxis.isRadial,
						series.closestPointRangePx > 2 * seriesMarkerOptions.radius
					);

				if (seriesMarkerOptions.enabled !== false || series._hasPointMarkers) {

					i = points.length;
					while (i--) {
						point = points[i];
						plotX = mathFloor(point.plotX); // #1843
						plotY = point.plotY;
						graphic = point.graphic;
						pointMarkerOptions = point.marker || {};
						hasPointMarker = !!point.marker;
						enabled = (globallyEnabled && pointMarkerOptions.enabled === UNDEFINED) || pointMarkerOptions.enabled;
						isInside = point.isInside;

						// only draw the point if y is defined
						if (enabled && plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {

							// shortcuts
							pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || seriesPointAttr;
							radius = pointAttr.r;
							symbol = pick(pointMarkerOptions.symbol, series.symbol);
							isImage = symbol.indexOf('url') === 0;

							if (graphic) { // update
								graphic[isInside ? 'show' : 'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled
									.animate(extend({
										x: plotX - radius,
										y: plotY - radius
									}, graphic.symbolName ? { // don't apply to image symbols #507
										width: 2 * radius,
										height: 2 * radius
									} : {}));
							} else if (isInside && (radius > 0 || isImage)) {
								point.graphic = graphic = chart.renderer.symbol(
									symbol,
									plotX - radius,
									plotY - radius,
									2 * radius,
									2 * radius,
									hasPointMarker ? pointMarkerOptions : seriesMarkerOptions
								)
								.attr(pointAttr)
								.add(markerGroup);
							}

						} else if (graphic) {
							point.graphic = graphic.destroy(); // #1269
						}
					}
				}

			},

			/**
			 * Convert state properties from API naming conventions to SVG attributes
			 *
			 * @param {Object} options API options object
			 * @param {Object} base1 SVG attribute object to inherit from
			 * @param {Object} base2 Second level SVG attribute object to inherit from
			 */
			convertAttribs: function (options, base1, base2, base3) {
				var conversion = this.pointAttrToOptions,
					attr,
					option,
					obj = {};

				options = options || {};
				base1 = base1 || {};
				base2 = base2 || {};
				base3 = base3 || {};

				for (attr in conversion) {
					option = conversion[attr];
					obj[attr] = pick(options[option], base1[attr], base2[attr], base3[attr]);
				}
				return obj;
			},

			/**
			 * Get the state attributes. Each series type has its own set of attributes
			 * that are allowed to change on a point's state change. Series wide attributes are stored for
			 * all series, and additionally point specific attributes are stored for all
			 * points with individual marker options. If such options are not defined for the point,
			 * a reference to the series wide attributes is stored in point.pointAttr.
			 */
			getAttribs: function () {
				var series = this,
					seriesOptions = series.options,
					normalOptions = defaultPlotOptions[series.type].marker ? seriesOptions.marker : seriesOptions,
					stateOptions = normalOptions.states,
					stateOptionsHover = stateOptions[HOVER_STATE],
					pointStateOptionsHover,
					seriesColor = series.color,
					seriesNegativeColor = series.options.negativeColor,
					normalDefaults = {
						stroke: seriesColor,
						fill: seriesColor
					},
					points = series.points || [], // #927
					i,
					j,
					threshold,
					point,
					seriesPointAttr = [],
					pointAttr,
					pointAttrToOptions = series.pointAttrToOptions,
					hasPointSpecificOptions = series.hasPointSpecificOptions,
					defaultLineColor = normalOptions.lineColor,
					defaultFillColor = normalOptions.fillColor,
					turboThreshold = seriesOptions.turboThreshold,
					zones = series.zones,
					zoneAxis = series.zoneAxis || 'y',
					attr,
					key;

				// series type specific modifications
				if (seriesOptions.marker) { // line, spline, area, areaspline, scatter

					// if no hover radius is given, default to normal radius + 2
					stateOptionsHover.radius = stateOptionsHover.radius || normalOptions.radius + stateOptionsHover.radiusPlus;
					stateOptionsHover.lineWidth = stateOptionsHover.lineWidth || normalOptions.lineWidth + stateOptionsHover.lineWidthPlus;

				} else { // column, bar, pie

					// if no hover color is given, brighten the normal color
					stateOptionsHover.color = stateOptionsHover.color ||
						Color(stateOptionsHover.color || seriesColor)
							.brighten(stateOptionsHover.brightness).get();

					// if no hover negativeColor is given, brighten the normal negativeColor
					stateOptionsHover.negativeColor = stateOptionsHover.negativeColor ||
						Color(stateOptionsHover.negativeColor || seriesNegativeColor)
							.brighten(stateOptionsHover.brightness).get();
				}

				// general point attributes for the series normal state
				seriesPointAttr[NORMAL_STATE] = series.convertAttribs(normalOptions, normalDefaults);

				// HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius
				each([HOVER_STATE, SELECT_STATE], function (state) {
					seriesPointAttr[state] =
							series.convertAttribs(stateOptions[state], seriesPointAttr[NORMAL_STATE]);
				});

				// set it
				series.pointAttr = seriesPointAttr;


				// Generate the point-specific attribute collections if specific point
				// options are given. If not, create a referance to the series wide point
				// attributes
				i = points.length;
				if (!turboThreshold || i < turboThreshold || hasPointSpecificOptions) {
					while (i--) {
						point = points[i];
						normalOptions = (point.options && point.options.marker) || point.options;
						if (normalOptions && normalOptions.enabled === false) {
							normalOptions.radius = 0;
						}

						if (zones.length) {
							j = 0;
							threshold = zones[j];
							while (point[zoneAxis] >= threshold.value) {				
								threshold = zones[++j];
							}
							
							if (threshold.color) {
								point.color = point.fillColor = threshold.color;
							}
						}

						hasPointSpecificOptions = seriesOptions.colorByPoint || point.color; // #868

						// check if the point has specific visual options
						if (point.options) {
							for (key in pointAttrToOptions) {
								if (defined(normalOptions[pointAttrToOptions[key]])) {
									hasPointSpecificOptions = true;
								}
							}
						}

						// a specific marker config object is defined for the individual point:
						// create it's own attribute collection
						if (hasPointSpecificOptions) {
							normalOptions = normalOptions || {};
							pointAttr = [];
							stateOptions = normalOptions.states || {}; // reassign for individual point
							pointStateOptionsHover = stateOptions[HOVER_STATE] = stateOptions[HOVER_STATE] || {};

							// Handle colors for column and pies
							if (!seriesOptions.marker) { // column, bar, point
								// If no hover color is given, brighten the normal color. #1619, #2579
								pointStateOptionsHover.color = pointStateOptionsHover.color || (!point.options.color && stateOptionsHover[(point.negative && seriesNegativeColor ? 'negativeColor' : 'color')]) ||
									Color(point.color)
										.brighten(pointStateOptionsHover.brightness || stateOptionsHover.brightness)
										.get();
							}

							// normal point state inherits series wide normal state
							attr = { color: point.color }; // #868
							if (!defaultFillColor) { // Individual point color or negative color markers (#2219)
								attr.fillColor = point.color;
							}
							if (!defaultLineColor) {
								attr.lineColor = point.color; // Bubbles take point color, line markers use white
							}
							// Color is explicitly set to null or undefined (#1288, #4068)
							if (normalOptions.hasOwnProperty('color') && !normalOptions.color) {
								delete normalOptions.color;
							}
							pointAttr[NORMAL_STATE] = series.convertAttribs(extend(attr, normalOptions), seriesPointAttr[NORMAL_STATE]);

							// inherit from point normal and series hover
							pointAttr[HOVER_STATE] = series.convertAttribs(
								stateOptions[HOVER_STATE],
								seriesPointAttr[HOVER_STATE],
								pointAttr[NORMAL_STATE]
							);

							// inherit from point normal and series hover
							pointAttr[SELECT_STATE] = series.convertAttribs(
								stateOptions[SELECT_STATE],
								seriesPointAttr[SELECT_STATE],
								pointAttr[NORMAL_STATE]
							);


						// no marker config object is created: copy a reference to the series-wide
						// attribute collection
						} else {
							pointAttr = seriesPointAttr;
						}

						point.pointAttr = pointAttr;
					}
				}
			},

			/**
			 * Clear DOM objects and free up memory
			 */
			destroy: function () {
				var series = this,
					chart = series.chart,
					issue134 = /AppleWebKit\/533/.test(userAgent),
					destroy,
					i,
					data = series.data || [],
					point,
					prop,
					axis;

				// add event hook
				fireEvent(series, 'destroy');

				// remove all events
				removeEvent(series);

				// erase from axes
				each(series.axisTypes || [], function (AXIS) {
					axis = series[AXIS];
					if (axis) {
						erase(axis.series, series);
						axis.isDirty = axis.forceRedraw = true;
					}
				});

				// remove legend items
				if (series.legendItem) {
					series.chart.legend.destroyItem(series);
				}

				// destroy all points with their elements
				i = data.length;
				while (i--) {
					point = data[i];
					if (point && point.destroy) {
						point.destroy();
					}
				}
				series.points = null;

				// Clear the animation timeout if we are destroying the series during initial animation
				clearTimeout(series.animationTimeout);

				// Destroy all SVGElements associated to the series
				for (prop in series) {
					if (series[prop] instanceof SVGElement && !series[prop].survive) { // Survive provides a hook for not destroying

						// issue 134 workaround
						destroy = issue134 && prop === 'group' ?
							'hide' :
							'destroy';

						series[prop][destroy]();
					}
				}

				// remove from hoverSeries
				if (chart.hoverSeries === series) {
					chart.hoverSeries = null;
				}
				erase(chart.series, series);

				// clear all members
				for (prop in series) {
					delete series[prop];
				}
			},

			/**
			 * Return the graph path of a segment
			 */
			getSegmentPath: function (segment) {
				var series = this,
					segmentPath = [],
					step = series.options.step;

				// build the segment line
				each(segment, function (point, i) {

					var plotX = point.plotX,
						plotY = point.plotY,
						lastPoint;

					if (series.getPointSpline) { // generate the spline as defined in the SplineSeries object
						segmentPath.push.apply(segmentPath, series.getPointSpline(segment, point, i));

					} else {

						// moveTo or lineTo
						segmentPath.push(i ? L : M);

						// step line?
						if (step && i) {
							lastPoint = segment[i - 1];
							if (step === 'right') {
								segmentPath.push(
									lastPoint.plotX,
									plotY
								);

							} else if (step === 'center') {
								segmentPath.push(
									(lastPoint.plotX + plotX) / 2,
									lastPoint.plotY,
									(lastPoint.plotX + plotX) / 2,
									plotY
								);

							} else {
								segmentPath.push(
									plotX,
									lastPoint.plotY
								);
							}
						}

						// normal line to next point
						segmentPath.push(
							point.plotX,
							point.plotY
						);
					}
				});

				return segmentPath;
			},

			/**
			 * Get the graph path
			 */
			getGraphPath: function () {
				var series = this,
					graphPath = [],
					segmentPath,
					singlePoints = []; // used in drawTracker

				// Divide into segments and build graph and area paths
				each(series.segments, function (segment) {

					segmentPath = series.getSegmentPath(segment);

					// add the segment to the graph, or a single point for tracking
					if (segment.length > 1) {
						graphPath = graphPath.concat(segmentPath);
					} else {
						singlePoints.push(segment[0]);
					}
				});

				// Record it for use in drawGraph and drawTracker, and return graphPath
				series.singlePoints = singlePoints;
				series.graphPath = graphPath;

				return graphPath;

			},

			/**
			 * Draw the actual graph
			 */
			drawGraph: function () {
				var series = this,
					options = this.options,
					props = [['graph', options.lineColor || this.color, options.dashStyle]],
					lineWidth = options.lineWidth,
					roundCap = options.linecap !== 'square',
					graphPath = this.getGraphPath(),
					fillColor = (this.fillGraph && this.color) || NONE, // polygon series use filled graph
					zones = this.zones;

				each(zones, function (threshold, i) {
					props.push(['zoneGraph' + i, threshold.color || series.color, threshold.dashStyle || options.dashStyle]);
				});
				
				// Draw the graph
				each(props, function (prop, i) {
					var graphKey = prop[0],
						graph = series[graphKey],
						attribs;

					if (graph) {
						graph.animate({ d: graphPath });

					} else if ((lineWidth || fillColor) && graphPath.length) { // #1487
						attribs = {
							stroke: prop[1],
							'stroke-width': lineWidth,
							fill: fillColor,
							zIndex: 1 // #1069
						};
						if (prop[2]) {
							attribs.dashstyle = prop[2];
						} else if (roundCap) {
							attribs['stroke-linecap'] = attribs['stroke-linejoin'] = 'round';
						}

						series[graphKey] = series.chart.renderer.path(graphPath)
							.attr(attribs)
							.add(series.group)
							.shadow((i < 2) && options.shadow); // add shadow to normal series (0) or to first zone (1) #3932
					}
				});
			},

			/**
			 * Clip the graphs into the positive and negative coloured graphs
			 */
			applyZones: function () {
				var series = this,
					chart = this.chart,
					renderer = chart.renderer,
					zones = this.zones,
					translatedFrom,
					translatedTo,
					clips = this.clips || [],
					clipAttr,
					graph = this.graph,
					area = this.area,
					chartSizeMax = mathMax(chart.chartWidth, chart.chartHeight),
					axis = this[(this.zoneAxis || 'y') + 'Axis'],
					extremes,
					reversed = axis.reversed,
					inverted = chart.inverted,
					horiz = axis.horiz,
					pxRange,
					pxPosMin,
					pxPosMax,
					ignoreZones = false;

				if (zones.length && (graph || area) && axis.min !== UNDEFINED) {
					// The use of the Color Threshold assumes there are no gaps
					// so it is safe to hide the original graph and area
					if (graph) {
						graph.hide();
					}
					if (area) { 
						area.hide(); 
					}

					// Create the clips
					extremes = axis.getExtremes();
					each(zones, function (threshold, i) {

						translatedFrom = reversed ? 
							(horiz ? chart.plotWidth : 0) : 
							(horiz ? 0 : axis.toPixels(extremes.min));
						translatedFrom = mathMin(mathMax(pick(translatedTo, translatedFrom), 0), chartSizeMax);
						translatedTo = mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value, extremes.max), true)), 0), chartSizeMax);
						
						if (ignoreZones) {
							translatedFrom = translatedTo = axis.toPixels(extremes.max);
						}

						pxRange = Math.abs(translatedFrom - translatedTo);
						pxPosMin = mathMin(translatedFrom, translatedTo);
						pxPosMax = mathMax(translatedFrom, translatedTo);
						if (axis.isXAxis) {
							clipAttr = {
								x: inverted ? pxPosMax : pxPosMin,
								y: 0,
								width: pxRange, 
								height: chartSizeMax
							};
							if (!horiz) {
								clipAttr.x = chart.plotHeight - clipAttr.x;
							}
						} else {
							clipAttr = {
								x: 0,
								y: inverted ? pxPosMax : pxPosMin,
								width: chartSizeMax, 
								height: pxRange
							};					
							if (horiz) {
								clipAttr.y = chart.plotWidth - clipAttr.y;
							}
						}

						/// VML SUPPPORT
						if (chart.inverted && renderer.isVML) {
							if (axis.isXAxis) {			
								clipAttr = {
									x: 0,
									y: reversed ? pxPosMin : pxPosMax,
									height: clipAttr.width,
									width: chart.chartWidth
								};		
							} else {				
								clipAttr = {
									x: clipAttr.y - chart.plotLeft - chart.spacingBox.x,
									y: 0,
									width: clipAttr.height,
									height: chart.chartHeight
								};	
							}				
						}
						/// END OF VML SUPPORT

						if (clips[i]) {
							clips[i].animate(clipAttr);
						} else {
							clips[i] = renderer.clipRect(clipAttr);

							if (graph) {
								series['zoneGraph' + i].clip(clips[i]);
							}

							if (area) {
								series['zoneArea' + i].clip(clips[i]);
							}
						}
						// if this zone extends out of the axis, ignore the others
						ignoreZones = threshold.value > extremes.max;
					});
					this.clips = clips;
				}
			},

			/**
			 * Initialize and perform group inversion on series.group and series.markerGroup
			 */
			invertGroups: function () {
				var series = this,
					chart = series.chart;

				// Pie, go away (#1736)
				if (!series.xAxis) {
					return;
				}

				// A fixed size is needed for inversion to work
				function setInvert() {
					var size = {
						width: series.yAxis.len,
						height: series.xAxis.len
					};

					each(['group', 'markerGroup'], function (groupName) {
						if (series[groupName]) {
							series[groupName].attr(size).invert();
						}
					});
				}

				addEvent(chart, 'resize', setInvert); // do it on resize
				addEvent(series, 'destroy', function () {
					removeEvent(chart, 'resize', setInvert);
				});

				// Do it now
				setInvert(); // do it now

				// On subsequent render and redraw, just do setInvert without setting up events again
				series.invertGroups = setInvert;
			},

			/**
			 * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and
			 * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.
			 */
			plotGroup: function (prop, name, visibility, zIndex, parent) {
				var group = this[prop],
					isNew = !group;

				// Generate it on first call
				if (isNew) {
					this[prop] = group = this.chart.renderer.g(name)
						.attr({
							visibility: visibility,
							zIndex: zIndex || 0.1 // IE8 needs this
						})
						.add(parent);
				}
				// Place it on first and subsequent (redraw) calls
				group[isNew ? 'attr' : 'animate'](this.getPlotBox());
				return group;
			},

			/**
			 * Get the translation and scale for the plot area of this series
			 */
			getPlotBox: function () {
				var chart = this.chart,
					xAxis = this.xAxis,
					yAxis = this.yAxis;

				// Swap axes for inverted (#2339)
				if (chart.inverted) {
					xAxis = yAxis;
					yAxis = this.xAxis;
				}
				return {
					translateX: xAxis ? xAxis.left : chart.plotLeft,
					translateY: yAxis ? yAxis.top : chart.plotTop,
					scaleX: 1, // #1623
					scaleY: 1
				};
			},

			/**
			 * Render the graph and markers
			 */
			render: function () {
				var series = this,
					chart = series.chart,
					group,
					options = series.options,
					animation = options.animation,
					// Animation doesn't work in IE8 quirks when the group div is hidden,
					// and looks bad in other oldIE
					animDuration = (animation && !!series.animate && chart.renderer.isSVG && pick(animation.duration, 500)) || 0,
					visibility = series.visible ? VISIBLE : HIDDEN,
					zIndex = options.zIndex,
					hasRendered = series.hasRendered,
					chartSeriesGroup = chart.seriesGroup;

				// the group
				group = series.plotGroup(
					'group',
					'series',
					visibility,
					zIndex,
					chartSeriesGroup
				);

				series.markerGroup = series.plotGroup(
					'markerGroup',
					'markers',
					visibility,
					zIndex,
					chartSeriesGroup
				);

				// initiate the animation
				if (animDuration) {
					series.animate(true);
				}

				// cache attributes for shapes
				series.getAttribs();

				// SVGRenderer needs to know this before drawing elements (#1089, #1795)
				group.inverted = series.isCartesian ? chart.inverted : false;

				// draw the graph if any
				if (series.drawGraph) {
					series.drawGraph();
					series.applyZones();
				}

				each(series.points, function (point) {
					if (point.redraw) {
						point.redraw();
					}
				});

				// draw the data labels (inn pies they go before the points)
				if (series.drawDataLabels) {
					series.drawDataLabels();
				}

				// draw the points
				if (series.visible) {
					series.drawPoints();
				}


				// draw the mouse tracking area
				if (series.drawTracker && series.options.enableMouseTracking !== false) {
					series.drawTracker();
				}

				// Handle inverted series and tracker groups
				if (chart.inverted) {
					series.invertGroups();
				}

				// Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).
				if (options.clip !== false && !series.sharedClipKey && !hasRendered) {
					group.clip(chart.clipRect);
				}

				// Run the animation
				if (animDuration) {
					series.animate();
				} 

				// Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option
				// which should be available to the user).
				if (!hasRendered) {
					if (animDuration) {
						series.animationTimeout = setTimeout(function () {
							series.afterAnimate();
						}, animDuration);
					} else {
						series.afterAnimate();
					}
				}

				series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
				// (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
				series.hasRendered = true;
			},

			/**
			 * Redraw the series after an update in the axes.
			 */
			redraw: function () {
				var series = this,
					chart = series.chart,
					wasDirtyData = series.isDirtyData, // cache it here as it is set to false in render, but used after
					wasDirty = series.isDirty,
					group = series.group,
					xAxis = series.xAxis,
					yAxis = series.yAxis;

				// reposition on resize
				if (group) {
					if (chart.inverted) {
						group.attr({
							width: chart.plotWidth,
							height: chart.plotHeight
						});
					}

					group.animate({
						translateX: pick(xAxis && xAxis.left, chart.plotLeft),
						translateY: pick(yAxis && yAxis.top, chart.plotTop)
					});
				}

				series.translate();
				series.render();
				if (wasDirtyData) {
					fireEvent(series, 'updatedData');
				}
				if (wasDirty || wasDirtyData) {			// #3945 recalculate the kdtree when dirty
					delete this.kdTree; // #3868 recalculate the kdtree with dirty data
				}
			},

			/**
			 * KD Tree && PointSearching Implementation
			 */

			kdDimensions: 1,
			kdAxisArray: ['clientX', 'plotY'],

			searchPoint: function (e, compareX) {
				var series = this,
					xAxis = series.xAxis,
					yAxis = series.yAxis,
					inverted = series.chart.inverted;
				
				return this.searchKDTree({
					clientX: inverted ? xAxis.len - e.chartY + xAxis.pos : e.chartX - xAxis.pos,
					plotY: inverted ? yAxis.len - e.chartX + yAxis.pos : e.chartY - yAxis.pos
				}, compareX);
			},

			buildKDTree: function () {
				var series = this,
					dimensions = series.kdDimensions;

				// Internal function
				function _kdtree(points, depth, dimensions) {
					var axis, median, length = points && points.length;

					if (length) {

						// alternate between the axis
						axis = series.kdAxisArray[depth % dimensions];

						// sort point array
						points.sort(function(a, b) {
							return a[axis] - b[axis];
						});
					
						median = Math.floor(length / 2);
						
						// build and return nod
						return {
							point: points[median],
							left: _kdtree(points.slice(0, median), depth + 1, dimensions),
							right: _kdtree(points.slice(median + 1), depth + 1, dimensions)
						};
					
					}
				}

				// Start the recursive build process with a clone of the points array and null points filtered out (#3873)
				function startRecursive() {
					var points = grep(series.points || [], function (point) { // #4390
						return point.y !== null;
					});

					series.kdTree = _kdtree(points, dimensions, dimensions);
				}
				delete series.kdTree;
				
				if (series.options.kdSync) {  // For testing tooltips, don't build async
					startRecursive();
				} else {
					setTimeout(startRecursive);
				}
			},

			searchKDTree: function (point, compareX) {
				var series = this,
					kdX = this.kdAxisArray[0],
					kdY = this.kdAxisArray[1],
					kdComparer = compareX ? 'distX' : 'dist';

				// Set the one and two dimensional distance on the point object
				function setDistance(p1, p2) {
					var x = (defined(p1[kdX]) && defined(p2[kdX])) ? Math.pow(p1[kdX] - p2[kdX], 2) : null,
						y = (defined(p1[kdY]) && defined(p2[kdY])) ? Math.pow(p1[kdY] - p2[kdY], 2) : null,
						r = (x || 0) + (y || 0);

					p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;
					p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;
				}
				function _search(search, tree, depth, dimensions) {
					var point = tree.point,
						axis = series.kdAxisArray[depth % dimensions],
						tdist,
						sideA,
						sideB,
						ret = point,
						nPoint1,
						nPoint2;
					
					setDistance(search, point);

					// Pick side based on distance to splitting point
					tdist = search[axis] - point[axis];
					sideA = tdist < 0 ? 'left' : 'right';
					sideB = tdist < 0 ? 'right' : 'left';

					// End of tree
					if (tree[sideA]) {
						nPoint1 =_search(search, tree[sideA], depth + 1, dimensions);

						ret = (nPoint1[kdComparer] < ret[kdComparer] ? nPoint1 : point);
					} 
					if (tree[sideB]) {
						// compare distance to current best to splitting point to decide wether to check side B or not
						if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {
							nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);
							ret = (nPoint2[kdComparer] < ret[kdComparer] ? nPoint2 : ret);
						}
					}
					
					return ret;
				}

				if (!this.kdTree) {
					this.buildKDTree();
				}

				if (this.kdTree) {
					return _search(point, 
						this.kdTree, this.kdDimensions, this.kdDimensions);
				}
			}

		}; // end Series prototype

		/**
		 * The class for stack items
		 */
		function StackItem(axis, options, isNegative, x, stackOption) {
			
			var inverted = axis.chart.inverted;

			this.axis = axis;

			// Tells if the stack is negative
			this.isNegative = isNegative;

			// Save the options to be able to style the label
			this.options = options;

			// Save the x value to be able to position the label later
			this.x = x;

			// Initialize total value
			this.total = null;

			// This will keep each points' extremes stored by series.index and point index
			this.points = {};

			// Save the stack option on the series configuration object, and whether to treat it as percent
			this.stack = stackOption;

			// The align options and text align varies on whether the stack is negative and
			// if the chart is inverted or not.
			// First test the user supplied value, then use the dynamic.
			this.alignOptions = {
				align: options.align || (inverted ? (isNegative ? 'left' : 'right') : 'center'),
				verticalAlign: options.verticalAlign || (inverted ? 'middle' : (isNegative ? 'bottom' : 'top')),
				y: pick(options.y, inverted ? 4 : (isNegative ? 14 : -6)),
				x: pick(options.x, inverted ? (isNegative ? -6 : 6) : 0)
			};

			this.textAlign = options.textAlign || (inverted ? (isNegative ? 'right' : 'left') : 'center');
		}

		StackItem.prototype = {
			destroy: function () {
				destroyObjectProperties(this, this.axis);
			},

			/**
			 * Renders the stack total label and adds it to the stack label group.
			 */
			render: function (group) {
				var options = this.options,
					formatOption = options.format,
					str = formatOption ?
						format(formatOption, this) : 
						options.formatter.call(this);  // format the text in the label

				// Change the text to reflect the new total and set visibility to hidden in case the serie is hidden
				if (this.label) {
					this.label.attr({text: str, visibility: HIDDEN});
				// Create new label
				} else {
					this.label =
						this.axis.chart.renderer.text(str, null, null, options.useHTML)		// dummy positions, actual position updated with setOffset method in columnseries
							.css(options.style)				// apply style
							.attr({
								align: this.textAlign,				// fix the text-anchor
								rotation: options.rotation,	// rotation
								visibility: HIDDEN					// hidden until setOffset is called
							})				
							.add(group);							// add to the labels-group
				}
			},

			/**
			 * Sets the offset that the stack has from the x value and repositions the label.
			 */
			setOffset: function (xOffset, xWidth) {
				var stackItem = this,
					axis = stackItem.axis,
					chart = axis.chart,
					inverted = chart.inverted,
					reversed = axis.reversed,
					neg = (this.isNegative && !reversed) || (!this.isNegative && reversed), // #4056
					y = axis.translate(axis.usePercentage ? 100 : this.total, 0, 0, 0, 1), // stack value translated mapped to chart coordinates
					yZero = axis.translate(0),						// stack origin
					h = mathAbs(y - yZero),							// stack height
					x = chart.xAxis[0].translate(this.x) + xOffset,	// stack x position
					plotHeight = chart.plotHeight,
					stackBox = {	// this is the box for the complete stack
						x: inverted ? (neg ? y : y - h) : x,
						y: inverted ? plotHeight - x - xWidth : (neg ? (plotHeight - y - h) : plotHeight - y),
						width: inverted ? h : xWidth,
						height: inverted ? xWidth : h
					},
					label = this.label,
					alignAttr;
				
				if (label) {
					label.align(this.alignOptions, null, stackBox);	// align the label to the box
						
					// Set visibility (#678)
					alignAttr = label.alignAttr;
					label[this.options.crop === false || chart.isInsidePlot(alignAttr.x, alignAttr.y) ? 'show' : 'hide'](true);
				}
			}
		};

		/**
		 * Generate stacks for each series and calculate stacks total values
		 */
		Chart.prototype.getStacks = function () {
			var chart = this;

			// reset stacks for each yAxis
			each(chart.yAxis, function (axis) {
				if (axis.stacks && axis.hasVisibleSeries) {
					axis.oldStacks = axis.stacks;
				}
			});

			each(chart.series, function (series) {
				if (series.options.stacking && (series.visible === true || chart.options.chart.ignoreHiddenSeries === false)) {
					series.stackKey = series.type + pick(series.options.stack, '');
				}
			});
		};


		// Stacking methods defined on the Axis prototype

		/**
		 * Build the stacks from top down
		 */
		Axis.prototype.buildStacks = function () {
			var series = this.series,
				reversedStacks = pick(this.options.reversedStacks, true),
				i = series.length;
			if (!this.isXAxis) {
				this.usePercentage = false;
				while (i--) {
					series[reversedStacks ? i : series.length - i - 1].setStackedPoints();
				}
				// Loop up again to compute percent stack
				if (this.usePercentage) {
					for (i = 0; i < series.length; i++) {
						series[i].setPercentStacks();
					}
				}
			}
		};

		Axis.prototype.renderStackTotals = function () {
			var axis = this,
				chart = axis.chart,
				renderer = chart.renderer,
				stacks = axis.stacks,
				stackKey, 
				oneStack, 
				stackCategory,
				stackTotalGroup = axis.stackTotalGroup;

			// Create a separate group for the stack total labels
			if (!stackTotalGroup) {
				axis.stackTotalGroup = stackTotalGroup =
					renderer.g('stack-labels')
						.attr({
							visibility: VISIBLE,
							zIndex: 6
						})
						.add();
			}

			// plotLeft/Top will change when y axis gets wider so we need to translate the
			// stackTotalGroup at every render call. See bug #506 and #516
			stackTotalGroup.translate(chart.plotLeft, chart.plotTop);

			// Render each stack total
			for (stackKey in stacks) {
				oneStack = stacks[stackKey];
				for (stackCategory in oneStack) {
					oneStack[stackCategory].render(stackTotalGroup);
				}
			}
		};

		/**
		 * Set all the stacks to initial states and destroy unused ones.
		 */
		Axis.prototype.resetStacks = function () {
			var stacks = this.stacks,
				type,
				i;
			if (!this.isXAxis) {
				for (type in stacks) {
					for (i in stacks[type]) {

						// Clean up memory after point deletion (#1044, #4320)
						if (stacks[type][i].touched < this.stacksTouched) {
							stacks[type][i].destroy();
							delete stacks[type][i];

						// Reset stacks
						} else {
							stacks[type][i].total = null;
							stacks[type][i].cum = 0;
						}
					}
				}
			}
		};

		Axis.prototype.cleanStacks = function () {
			var stacks, type, i;

			if (!this.isXAxis) {
				if (this.oldStacks) {
					stacks = this.stacks = this.oldStacks;
				}

				// reset stacks
				for (type in stacks) {
					for (i in stacks[type]) {
						stacks[type][i].cum = stacks[type][i].total;
					}
				}
			}
		};


		// Stacking methods defnied for Series prototype

		/**
		 * Adds series' points value to corresponding stack
		 */
		Series.prototype.setStackedPoints = function () {
			if (!this.options.stacking || (this.visible !== true && this.chart.options.chart.ignoreHiddenSeries !== false)) {
				return;
			}

			var series = this,
				xData = series.processedXData,
				yData = series.processedYData,
				stackedYData = [],
				yDataLength = yData.length,
				seriesOptions = series.options,
				threshold = seriesOptions.threshold,
				stackThreshold = seriesOptions.startFromThreshold ? threshold : 0,
				stackOption = seriesOptions.stack,
				stacking = seriesOptions.stacking,
				stackKey = series.stackKey,
				negKey = '-' + stackKey,
				negStacks = series.negStacks,
				yAxis = series.yAxis,
				stacks = yAxis.stacks,
				oldStacks = yAxis.oldStacks,
				isNegative,
				stack,
				other,
				key,
				pointKey,
				i,
				x,
				y;


			yAxis.stacksTouched += 1;

			// loop over the non-null y values and read them into a local array
			for (i = 0; i < yDataLength; i++) {
				x = xData[i];
				y = yData[i];
				pointKey = series.index + ',' + i;

				// Read stacked values into a stack based on the x value,
				// the sign of y and the stack key. Stacking is also handled for null values (#739)
				isNegative = negStacks && y < (stackThreshold ? 0 : threshold);
				key = isNegative ? negKey : stackKey;

				// Create empty object for this stack if it doesn't exist yet
				if (!stacks[key]) {
					stacks[key] = {};
				}

				// Initialize StackItem for this x
				if (!stacks[key][x]) {
					if (oldStacks[key] && oldStacks[key][x]) {
						stacks[key][x] = oldStacks[key][x];
						stacks[key][x].total = null;
					} else {
						stacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, isNegative, x, stackOption);
					}
				}

				// If the StackItem doesn't exist, create it first
				stack = stacks[key][x];
				//stack.points[pointKey] = [stack.cum || stackThreshold];
				stack.points[pointKey] = [pick(stack.cum, stackThreshold)];
				stack.touched = yAxis.stacksTouched;
				

				// Add value to the stack total
				if (stacking === 'percent') {

					// Percent stacked column, totals are the same for the positive and negative stacks
					other = isNegative ? stackKey : negKey;
					if (negStacks && stacks[other] && stacks[other][x]) {
						other = stacks[other][x];
						stack.total = other.total = mathMax(other.total, stack.total) + mathAbs(y) || 0;

					// Percent stacked areas
					} else {
						stack.total = correctFloat(stack.total + (mathAbs(y) || 0));
					}
				} else {
					stack.total = correctFloat(stack.total + (y || 0));
				}

				stack.cum = pick(stack.cum, stackThreshold) + (y || 0);

				stack.points[pointKey].push(stack.cum);
				stackedYData[i] = stack.cum;

			}

			if (stacking === 'percent') {
				yAxis.usePercentage = true;
			}

			this.stackedYData = stackedYData; // To be used in getExtremes

			// Reset old stacks
			yAxis.oldStacks = {};
		};

		/**
		 * Iterate over all stacks and compute the absolute values to percent
		 */
		Series.prototype.setPercentStacks = function () {
			var series = this,
				stackKey = series.stackKey,
				stacks = series.yAxis.stacks,
				processedXData = series.processedXData;

			each([stackKey, '-' + stackKey], function (key) {
				var i = processedXData.length,
					x,
					stack,
					pointExtremes,
					totalFactor;

				while (i--) {
					x = processedXData[i];
					stack = stacks[key] && stacks[key][x];
					pointExtremes = stack && stack.points[series.index + ',' + i];
					if (pointExtremes) {
						totalFactor = stack.total ? 100 / stack.total : 0;
						pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor); // Y bottom value
						pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor); // Y value
						series.stackedYData[i] = pointExtremes[1];
					}
				}
			});
		};

		// Extend the Chart prototype for dynamic methods
		extend(Chart.prototype, {

			/**
			 * Add a series dynamically after  time
			 *
			 * @param {Object} options The config options
			 * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 *
			 * @return {Object} series The newly created series object
			 */
			addSeries: function (options, redraw, animation) {
				var series,
					chart = this;

				if (options) {
					redraw = pick(redraw, true); // defaults to true

					fireEvent(chart, 'addSeries', { options: options }, function () {
						series = chart.initSeries(options);

						chart.isDirtyLegend = true; // the series array is out of sync with the display
						chart.linkSeries();
						if (redraw) {
							chart.redraw(animation);
						}
					});
				}

				return series;
			},

			/**
		     * Add an axis to the chart
		     * @param {Object} options The axis option
		     * @param {Boolean} isX Whether it is an X axis or a value axis
		     */
			addAxis: function (options, isX, redraw, animation) {
				var key = isX ? 'xAxis' : 'yAxis',
					chartOptions = this.options,
					axis;

				/*jslint unused: false*/
				axis = new Axis(this, merge(options, {
					index: this[key].length,
					isX: isX
				}));
				/*jslint unused: true*/

				// Push the new axis options to the chart options
				chartOptions[key] = splat(chartOptions[key] || {});
				chartOptions[key].push(options);

				if (pick(redraw, true)) {
					this.redraw(animation);
				}
			},

			/**
			 * Dim the chart and show a loading text or symbol
			 * @param {String} str An optional text to show in the loading label instead of the default one
			 */
			showLoading: function (str) {
				var chart = this,
					options = chart.options,
					loadingDiv = chart.loadingDiv,
					loadingOptions = options.loading,
					setLoadingSize = function () {
						if (loadingDiv) {
							css(loadingDiv, {
								left: chart.plotLeft + PX,
								top: chart.plotTop + PX,
								width: chart.plotWidth + PX,
								height: chart.plotHeight + PX
							});
						}
					};

				// create the layer at the first call
				if (!loadingDiv) {
					chart.loadingDiv = loadingDiv = createElement(DIV, {
						className: PREFIX + 'loading'
					}, extend(loadingOptions.style, {
						zIndex: 10,
						display: NONE
					}), chart.container);

					chart.loadingSpan = createElement(
						'span',
						null,
						loadingOptions.labelStyle,
						loadingDiv
					);
					addEvent(chart, 'redraw', setLoadingSize); // #1080
				}

				// update text
				chart.loadingSpan.innerHTML = str || options.lang.loading;

				// show it
				if (!chart.loadingShown) {
					css(loadingDiv, {
						opacity: 0,
						display: ''				
					});
					animate(loadingDiv, {
						opacity: loadingOptions.style.opacity
					}, {
						duration: loadingOptions.showDuration || 0
					});
					chart.loadingShown = true;
				}
				setLoadingSize();
			},

			/**
			 * Hide the loading layer
			 */
			hideLoading: function () {
				var options = this.options,
					loadingDiv = this.loadingDiv;

				if (loadingDiv) {
					animate(loadingDiv, {
						opacity: 0
					}, {
						duration: options.loading.hideDuration || 100,
						complete: function () {
							css(loadingDiv, { display: NONE });
						}
					});
				}
				this.loadingShown = false;
			}
		});

		// extend the Point prototype for dynamic methods
		extend(Point.prototype, {
			/**
			 * Update the point with new options (typically x/y data) and optionally redraw the series.
			 *
			 * @param {Object} options Point options as defined in the series.data array
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 *
			 */
			update: function (options, redraw, animation, runEvent) {
				var point = this,
					series = point.series,
					graphic = point.graphic,
					i,
					chart = series.chart,
					seriesOptions = series.options,
					names = series.xAxis && series.xAxis.names;

				redraw = pick(redraw, true);

				function update() {

					point.applyOptions(options);

					// Update visuals
					if (point.y === null && graphic) { // #4146
						point.graphic = graphic.destroy();
					}
					if (isObject(options) && !isArray(options)) {
						// Defer the actual redraw until getAttribs has been called (#3260)
						point.redraw = function () {
							if (graphic && graphic.element) {
								if (options && options.marker && options.marker.symbol) {
									point.graphic = graphic.destroy();
								}
							}
							if (options && options.dataLabels && point.dataLabel) { // #2468
								point.dataLabel = point.dataLabel.destroy();
							}
							point.redraw = null;
						};
					}

					// record changes in the parallel arrays
					i = point.index;
					series.updateParallelArrays(point, i);
					if (names && point.name) {
						names[point.x] = point.name;
					}

					seriesOptions.data[i] = point.options;

					// redraw
					series.isDirty = series.isDirtyData = true;
					if (!series.fixedBox && series.hasCartesianSeries) { // #1906, #2320
						chart.isDirtyBox = true;
					}

					if (seriesOptions.legendType === 'point') { // #1831, #1885
						chart.isDirtyLegend = true;
					}
					if (redraw) {
						chart.redraw(animation);
					}
				}

				// Fire the event with a default handler of doing the update
				if (runEvent === false) { // When called from setData
					update();
				} else {
					point.firePointEvent('update', { options: options }, update);
				}
			},

			/**
			 * Remove a point and optionally redraw the series and if necessary the axes
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */
			remove: function (redraw, animation) {
				this.series.removePoint(inArray(this, this.series.data), redraw, animation);
			}
		});

		// Extend the series prototype for dynamic methods
		extend(Series.prototype, {
			/**
			 * Add a point dynamically after chart load time
			 * @param {Object} options Point options as given in series.data
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean} shift If shift is true, a point is shifted off the start
			 *    of the series as one is appended to the end.
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */
			addPoint: function (options, redraw, shift, animation) {
				var series = this,
					seriesOptions = series.options,
					data = series.data,
					graph = series.graph,
					area = series.area,
					chart = series.chart,
					names = series.xAxis && series.xAxis.names,
					currentShift = (graph && graph.shift) || 0,
					shiftShapes = ['graph', 'area'],
					dataOptions = seriesOptions.data,
					point,
					isInTheMiddle,
					xData = series.xData,
					i,
					x;

				setAnimation(animation, chart);

				// Make graph animate sideways
				if (shift) {
					i = series.zones.length;
					while (i--) {
						shiftShapes.push('zoneGraph' + i, 'zoneArea' + i);
					}
					each(shiftShapes, function (shape) {
						if (series[shape]) {
							series[shape].shift = currentShift + 1;
						}
					});
				}
				if (area) {
					area.isArea = true; // needed in animation, both with and without shift
				}

				// Optional redraw, defaults to true
				redraw = pick(redraw, true);

				// Get options and push the point to xData, yData and series.options. In series.generatePoints
				// the Point instance will be created on demand and pushed to the series.data array.
				point = { series: series };
				series.pointClass.prototype.applyOptions.apply(point, [options]);
				x = point.x;

				// Get the insertion point
				i = xData.length;
				if (series.requireSorting && x < xData[i - 1]) {
					isInTheMiddle = true;
					while (i && xData[i - 1] > x) {
						i--;
					}
				}

				series.updateParallelArrays(point, 'splice', i, 0, 0); // insert undefined item
				series.updateParallelArrays(point, i); // update it

				if (names && point.name) {
					names[x] = point.name;
				}
				dataOptions.splice(i, 0, options);

				if (isInTheMiddle) {
					series.data.splice(i, 0, null);
					series.processData();
				}

				// Generate points to be added to the legend (#1329)
				if (seriesOptions.legendType === 'point') {
					series.generatePoints();
				}

				// Shift the first point off the parallel arrays
				// todo: consider series.removePoint(i) method
				if (shift) {
					if (data[0] && data[0].remove) {
						data[0].remove(false);
					} else {
						data.shift();
						series.updateParallelArrays(point, 'shift');

						dataOptions.shift();
					}
				}

				// redraw
				series.isDirty = true;
				series.isDirtyData = true;
				if (redraw) {
					series.getAttribs(); // #1937
					chart.redraw();
				}
			},

			/**
			 * Remove a point (rendered or not), by index
			 */
			removePoint: function (i, redraw, animation) {

				var series = this,
					data = series.data,
					point = data[i],
					points = series.points,
					chart = series.chart,
					remove = function () {

						if (data.length === points.length) {
							points.splice(i, 1);
						}
						data.splice(i, 1);
						series.options.data.splice(i, 1);
						series.updateParallelArrays(point || { series: series }, 'splice', i, 1);

						if (point) {
							point.destroy();
						}

						// redraw
						series.isDirty = true;
						series.isDirtyData = true;
						if (redraw) {
							chart.redraw();
						}
					};

				setAnimation(animation, chart);
				redraw = pick(redraw, true);

				// Fire the event with a default handler of removing the point
				if (point) {
					point.firePointEvent('remove', null, remove);
				} else {
					remove();
				}
			},

			/**
			 * Remove a series and optionally redraw the chart
			 *
			 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
			 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
			 *    configuration
			 */

			remove: function (redraw, animation) {
				var series = this,
					chart = series.chart;
				redraw = pick(redraw, true);

				if (!series.isRemoving) {  /* prevent triggering native event in jQuery
						(calling the remove function from the remove event) */
					series.isRemoving = true;

					// fire the event with a default handler of removing the point
					fireEvent(series, 'remove', null, function () {


						// destroy elements
						series.destroy();


						// redraw
						chart.isDirtyLegend = chart.isDirtyBox = true;
						chart.linkSeries();

						if (redraw) {
							chart.redraw(animation);
						}
					});

				}
				series.isRemoving = false;
			},

			/**
			 * Update the series with a new set of options
			 */
			update: function (newOptions, redraw) {
				var series = this,
					chart = this.chart,
					// must use user options when changing type because this.options is merged
					// in with type specific plotOptions
					oldOptions = this.userOptions,
					oldType = this.type,
					proto = seriesTypes[oldType].prototype,
					preserve = ['group', 'markerGroup', 'dataLabelsGroup'],
					n;

				// If we're changing type or zIndex, create new groups (#3380, #3404)
				if ((newOptions.type && newOptions.type !== oldType) || newOptions.zIndex !== undefined) {
					preserve.length = 0;
				}

				// Make sure groups are not destroyed (#3094)
				each(preserve, function (prop) {
					preserve[prop] = series[prop];
					delete series[prop];
				});

				// Do the merge, with some forced options
				newOptions = merge(oldOptions, {
					animation: false,
					index: this.index,
					pointStart: this.xData[0] // when updating after addPoint
				}, { data: this.options.data }, newOptions);

				// Destroy the series and delete all properties. Reinsert all methods 
				// and properties from the new type prototype (#2270, #3719)
				this.remove(false);
				for (n in proto) {
					this[n] = UNDEFINED;
				}
				extend(this, seriesTypes[newOptions.type || oldType].prototype);

				// Re-register groups (#3094)
				each(preserve, function (prop) {
					series[prop] = preserve[prop];
				});

				this.init(chart, newOptions);
				chart.linkSeries(); // Links are lost in this.remove (#3028)
				if (pick(redraw, true)) {
					chart.redraw(false);
				}
			}
		});

		// Extend the Axis.prototype for dynamic methods
		extend(Axis.prototype, {

			/**
			 * Update the axis with a new options structure
			 */
			update: function (newOptions, redraw) {
				var chart = this.chart;

				newOptions = chart.options[this.coll][this.options.index] = merge(this.userOptions, newOptions);

				this.destroy(true);
				this._addedPlotLB = this.chart._labelPanes = UNDEFINED; // #1611, #2887, #4314

				this.init(chart, extend(newOptions, { events: UNDEFINED }));

				chart.isDirtyBox = true;
				if (pick(redraw, true)) {
					chart.redraw();
				}
			},

			/**
		     * Remove the axis from the chart
		     */
			remove: function (redraw) {
				var chart = this.chart,
					key = this.coll, // xAxis or yAxis
					axisSeries = this.series,
					i = axisSeries.length;

				// Remove associated series (#2687)
				while (i--) {
					if (axisSeries[i]) {
						axisSeries[i].remove(false);
					}
				}

				// Remove the axis
				erase(chart.axes, this);
				erase(chart[key], this);
				chart.options[key].splice(this.options.index, 1);
				each(chart[key], function (axis, i) { // Re-index, #1706
					axis.options.index = i;
				});
				this.destroy();
				chart.isDirtyBox = true;

				if (pick(redraw, true)) {
					chart.redraw();
				}
			},

			/**
			 * Update the axis title by options
			 */
			setTitle: function (newTitleOptions, redraw) {
				this.update({ title: newTitleOptions }, redraw);
			},

			/**
			 * Set new axis categories and optionally redraw
			 * @param {Array} categories
			 * @param {Boolean} redraw
			 */
			setCategories: function (categories, redraw) {
				this.update({ categories: categories }, redraw);
			}

		});


		/**
		 * LineSeries object
		 */
		var LineSeries = extendClass(Series);
		seriesTypes.line = LineSeries;

		/**
		 * Set the default options for area
		 */
		defaultPlotOptions.area = merge(defaultSeriesOptions, {
			threshold: 0
			// trackByArea: false,
			// lineColor: null, // overrides color, but lets fillColor be unaltered
			// fillOpacity: 0.75,
			// fillColor: null
		});

		/**
		 * AreaSeries object
		 */
		var AreaSeries = extendClass(Series, {
			type: 'area',
			/**
			 * For stacks, don't split segments on null values. Instead, draw null values with 
			 * no marker. Also insert dummy points for any X position that exists in other series
			 * in the stack.
			 */ 
			getSegments: function () {
				var series = this,
					segments = [],
					segment = [],
					keys = [],
					xAxis = this.xAxis,
					yAxis = this.yAxis,
					stack = yAxis.stacks[this.stackKey],
					pointMap = {},
					plotX,
					plotY,
					points = this.points,
					connectNulls = this.options.connectNulls,
					i,
					x;

				if (this.options.stacking && !this.cropped) { // cropped causes artefacts in Stock, and perf issue
					// Create a map where we can quickly look up the points by their X value.
					for (i = 0; i < points.length; i++) {
						pointMap[points[i].x] = points[i];
					}

					// Sort the keys (#1651)
					for (x in stack) {
						if (stack[x].total !== null) { // nulled after switching between grouping and not (#1651, #2336)
							keys.push(+x);
						}
					}
					keys.sort(function (a, b) {
						return a - b;
					});

					each(keys, function (x) {
						var y = 0,
							stackPoint;

						if (connectNulls && (!pointMap[x] || pointMap[x].y === null)) { // #1836
							return;

						// The point exists, push it to the segment
						} else if (pointMap[x]) {
							segment.push(pointMap[x]);

						// There is no point for this X value in this series, so we 
						// insert a dummy point in order for the areas to be drawn
						// correctly.
						} else {

							// Loop down the stack to find the series below this one that has
							// a value (#1991)
							for (i = series.index; i <= yAxis.series.length; i++) {
								stackPoint = stack[x].points[i + ',' + x];
								if (stackPoint) {
									y = stackPoint[1];
									break;
								}
							}

							plotX = xAxis.translate(x);
							plotY = yAxis.toPixels(y, true);
							segment.push({ 
								y: null, 
								plotX: plotX,
								clientX: plotX, 
								plotY: plotY, 
								yBottom: plotY,
								onMouseOver: noop
							});
						}
					});

					if (segment.length) {
						segments.push(segment);
					}

				} else {
					Series.prototype.getSegments.call(this);
					segments = this.segments;
				}

				this.segments = segments;
			},
			
			/**
			 * Extend the base Series getSegmentPath method by adding the path for the area.
			 * This path is pushed to the series.areaPath property.
			 */
			getSegmentPath: function (segment) {
				
				var segmentPath = Series.prototype.getSegmentPath.call(this, segment), // call base method
					areaSegmentPath = [].concat(segmentPath), // work on a copy for the area path
					i,
					options = this.options,
					segLength = segmentPath.length,
					translatedThreshold = this.yAxis.getThreshold(options.threshold), // #2181
					yBottom;
				
				if (segLength === 3) { // for animation from 1 to two points
					areaSegmentPath.push(L, segmentPath[1], segmentPath[2]);
				}
				if (options.stacking && !this.closedStacks) {
					
					// Follow stack back. Todo: implement areaspline. A general solution could be to 
					// reverse the entire graphPath of the previous series, though may be hard with
					// splines and with series with different extremes
					for (i = segment.length - 1; i >= 0; i--) {

						yBottom = pick(segment[i].yBottom, translatedThreshold);
					
						// step line?
						if (i < segment.length - 1 && options.step) {
							areaSegmentPath.push(segment[i + 1].plotX, yBottom);
						}
						
						areaSegmentPath.push(segment[i].plotX, yBottom);
					}

				} else { // follow zero line back
					this.closeSegment(areaSegmentPath, segment, translatedThreshold);
				}
				this.areaPath = this.areaPath.concat(areaSegmentPath);
				return segmentPath;
			},
			
			/**
			 * Extendable method to close the segment path of an area. This is overridden in polar 
			 * charts.
			 */
			closeSegment: function (path, segment, translatedThreshold) {
				path.push(
					L,
					segment[segment.length - 1].plotX,
					translatedThreshold,
					L,
					segment[0].plotX,
					translatedThreshold
				);
			},
			
			/**
			 * Draw the graph and the underlying area. This method calls the Series base
			 * function and adds the area. The areaPath is calculated in the getSegmentPath
			 * method called from Series.prototype.drawGraph.
			 */
			drawGraph: function () {
				
				// Define or reset areaPath
				this.areaPath = [];
				
				// Call the base method
				Series.prototype.drawGraph.apply(this);
				
				// Define local variables
				var series = this,
					areaPath = this.areaPath,
					options = this.options,
					zones = this.zones,
					props = [['area', this.color, options.fillColor]]; // area name, main color, fill color
				
				each(zones, function (threshold, i) {
					props.push(['zoneArea' + i, threshold.color || series.color, threshold.fillColor || options.fillColor]);
				});
				each(props, function (prop) {
					var areaKey = prop[0],
						area = series[areaKey];
						
					// Create or update the area
					if (area) { // update
						area.animate({ d: areaPath });
			
					} else { // create
						series[areaKey] = series.chart.renderer.path(areaPath)
							.attr({
								fill: pick(
									prop[2],
									Color(prop[1]).setOpacity(pick(options.fillOpacity, 0.75)).get()
								),
								zIndex: 0 // #1069
							}).add(series.group);
					}
				});
			},

			drawLegendSymbol: LegendSymbolMixin.drawRectangle
		});

		seriesTypes.area = AreaSeries;
		/**
		 * Set the default options for spline
		 */
		defaultPlotOptions.spline = merge(defaultSeriesOptions);

		/**
		 * SplineSeries object
		 */
		var SplineSeries = extendClass(Series, {
			type: 'spline',

			/**
			 * Get the spline segment from a given point's previous neighbour to the given point
			 */
			getPointSpline: function (segment, point, i) {
				var smoothing = 1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc
					denom = smoothing + 1,
					plotX = point.plotX,
					plotY = point.plotY,
					lastPoint = segment[i - 1],
					nextPoint = segment[i + 1],
					leftContX,
					leftContY,
					rightContX,
					rightContY,
					ret;

				// find control points
				if (lastPoint && nextPoint) {
				
					var lastX = lastPoint.plotX,
						lastY = lastPoint.plotY,
						nextX = nextPoint.plotX,
						nextY = nextPoint.plotY,
						correction;

					leftContX = (smoothing * plotX + lastX) / denom;
					leftContY = (smoothing * plotY + lastY) / denom;
					rightContX = (smoothing * plotX + nextX) / denom;
					rightContY = (smoothing * plotY + nextY) / denom;

					// have the two control points make a straight line through main point
					correction = ((rightContY - leftContY) * (rightContX - plotX)) /
						(rightContX - leftContX) + plotY - rightContY;

					leftContY += correction;
					rightContY += correction;

					// to prevent false extremes, check that control points are between
					// neighbouring points' y values
					if (leftContY > lastY && leftContY > plotY) {
						leftContY = mathMax(lastY, plotY);
						rightContY = 2 * plotY - leftContY; // mirror of left control point
					} else if (leftContY < lastY && leftContY < plotY) {
						leftContY = mathMin(lastY, plotY);
						rightContY = 2 * plotY - leftContY;
					}
					if (rightContY > nextY && rightContY > plotY) {
						rightContY = mathMax(nextY, plotY);
						leftContY = 2 * plotY - rightContY;
					} else if (rightContY < nextY && rightContY < plotY) {
						rightContY = mathMin(nextY, plotY);
						leftContY = 2 * plotY - rightContY;
					}

					// record for drawing in next point
					point.rightContX = rightContX;
					point.rightContY = rightContY;

				}
				
				// Visualize control points for debugging
				/*
				if (leftContX) {
					this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)
						.attr({
							stroke: 'red',
							'stroke-width': 1,
							fill: 'none'
						})
						.add();
					this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,
						'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
						.attr({
							stroke: 'red',
							'stroke-width': 1
						})
						.add();
					this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)
						.attr({
							stroke: 'green',
							'stroke-width': 1,
							fill: 'none'
						})
						.add();
					this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,
						'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
						.attr({
							stroke: 'green',
							'stroke-width': 1
						})
						.add();
				}
				*/

				// moveTo or lineTo
				if (!i) {
					ret = [M, plotX, plotY];
				} else { // curve from last point to this
					ret = [
						'C',
						lastPoint.rightContX || lastPoint.plotX,
						lastPoint.rightContY || lastPoint.plotY,
						leftContX || plotX,
						leftContY || plotY,
						plotX,
						plotY
					];
					lastPoint.rightContX = lastPoint.rightContY = null; // reset for updating series later
				}
				return ret;
			}
		});
		seriesTypes.spline = SplineSeries;

		/**
		 * Set the default options for areaspline
		 */
		defaultPlotOptions.areaspline = merge(defaultPlotOptions.area);

		/**
		 * AreaSplineSeries object
		 */
		var areaProto = AreaSeries.prototype,
			AreaSplineSeries = extendClass(SplineSeries, {
				type: 'areaspline',
				closedStacks: true, // instead of following the previous graph back, follow the threshold back
				
				// Mix in methods from the area series
				getSegmentPath: areaProto.getSegmentPath,
				closeSegment: areaProto.closeSegment,
				drawGraph: areaProto.drawGraph,
				drawLegendSymbol: LegendSymbolMixin.drawRectangle
			});

		seriesTypes.areaspline = AreaSplineSeries;

		/**
		 * Set the default options for column
		 */
		defaultPlotOptions.column = merge(defaultSeriesOptions, {
			borderColor: '#FFFFFF',
			//borderWidth: 1,
			borderRadius: 0,
			//colorByPoint: undefined,
			groupPadding: 0.2,
			//grouping: true,
			marker: null, // point options are specified in the base options
			pointPadding: 0.1,
			//pointWidth: null,
			minPointLength: 0,
			cropThreshold: 50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes
			pointRange: null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories
			states: {
				hover: {
					brightness: 0.1,
					shadow: false,
					halo: false
				},
				select: {
					color: '#C0C0C0',
					borderColor: '#000000',
					shadow: false
				}
			},
			dataLabels: {
				align: null, // auto
				verticalAlign: null, // auto
				y: null
			},
			startFromThreshold: true, // docs: http://jsfiddle.net/highcharts/hz8fopan/14/
			stickyTracking: false,
			tooltip: {
				distance: 6
			},
			threshold: 0
		});

		/**
		 * ColumnSeries object
		 */
		var ColumnSeries = extendClass(Series, {
			type: 'column',
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'borderColor',
				fill: 'color',
				r: 'borderRadius'
			},
			cropShoulder: 0,
			directTouch: true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.
			trackerGroups: ['group', 'dataLabelsGroup'],
			negStacks: true, // use separate negative stacks, unlike area stacks where a negative 
				// point is substracted from previous (#1910)
			
			/**
			 * Initialize the series
			 */
			init: function () {
				Series.prototype.init.apply(this, arguments);

				var series = this,
					chart = series.chart;

				// if the series is added dynamically, force redraw of other
				// series affected by a new column
				if (chart.hasRendered) {
					each(chart.series, function (otherSeries) {
						if (otherSeries.type === series.type) {
							otherSeries.isDirty = true;
						}
					});
				}
			},

			/**
			 * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,
			 * pointWidth etc. 
			 */
			getColumnMetrics: function () {

				var series = this,
					options = series.options,
					xAxis = series.xAxis,
					yAxis = series.yAxis,
					reversedXAxis = xAxis.reversed,
					stackKey,
					stackGroups = {},
					columnIndex,
					columnCount = 0;

				// Get the total number of column type series.
				// This is called on every series. Consider moving this logic to a
				// chart.orderStacks() function and call it on init, addSeries and removeSeries
				if (options.grouping === false) {
					columnCount = 1;
				} else {
					each(series.chart.series, function (otherSeries) {
						var otherOptions = otherSeries.options,
							otherYAxis = otherSeries.yAxis;
						if (otherSeries.type === series.type && otherSeries.visible &&
								yAxis.len === otherYAxis.len && yAxis.pos === otherYAxis.pos) {  // #642, #2086
							if (otherOptions.stacking) {
								stackKey = otherSeries.stackKey;
								if (stackGroups[stackKey] === UNDEFINED) {
									stackGroups[stackKey] = columnCount++;
								}
								columnIndex = stackGroups[stackKey];
							} else if (otherOptions.grouping !== false) { // #1162
								columnIndex = columnCount++;
							}
							otherSeries.columnIndex = columnIndex;
						}
					});
				}

				var categoryWidth = mathMin(
						mathAbs(xAxis.transA) * (xAxis.ordinalSlope || options.pointRange || xAxis.closestPointRange || xAxis.tickInterval || 1), // #2610
						xAxis.len // #1535
					),
					groupPadding = categoryWidth * options.groupPadding,
					groupWidth = categoryWidth - 2 * groupPadding,
					pointOffsetWidth = groupWidth / columnCount,
					pointWidth = mathMin(
						options.maxPointWidth || xAxis.len,
						pick(options.pointWidth, pointOffsetWidth * (1 - 2 * options.pointPadding))
					),
					pointPadding = (pointOffsetWidth - pointWidth) / 2,
					colIndex = (reversedXAxis ? 
						columnCount - (series.columnIndex || 0) : // #1251
						series.columnIndex) || 0,
					pointXOffset = pointPadding + (groupPadding + colIndex *
						pointOffsetWidth - (categoryWidth / 2)) *
						(reversedXAxis ? -1 : 1);

				// Save it for reading in linked series (Error bars particularly)
				return (series.columnMetrics = { 
					width: pointWidth, 
					offset: pointXOffset 
				});
					
			},

			/**
			 * Translate each point to the plot area coordinate system and find shape positions
			 */
			translate: function () {
				var series = this,
					chart = series.chart,
					options = series.options,
					borderWidth = series.borderWidth = pick(
						options.borderWidth, 
						series.closestPointRange * series.xAxis.transA < 2 ? 0 : 1 // #3635
					),
					yAxis = series.yAxis,
					threshold = options.threshold,
					translatedThreshold = series.translatedThreshold = yAxis.getThreshold(threshold),
					minPointLength = pick(options.minPointLength, 5),
					metrics = series.getColumnMetrics(),
					pointWidth = metrics.width,
					seriesBarW = series.barW = mathMax(pointWidth, 1 + 2 * borderWidth), // postprocessed for border width
					pointXOffset = series.pointXOffset = metrics.offset,
					xCrisp = -(borderWidth % 2 ? 0.5 : 0),
					yCrisp = borderWidth % 2 ? 0.5 : 1;

				if (chart.inverted) {
					translatedThreshold -= 0.5; // #3355
					if (chart.renderer.isVML) {
						yCrisp += 1;
					}
				}

				// When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual
				// columns to have individual sizes. When pointPadding is greater, we strive for equal-width
				// columns (#2694).
				if (options.pointPadding) {
					seriesBarW = mathCeil(seriesBarW);
				}

				Series.prototype.translate.apply(series);

				// Record the new values
				each(series.points, function (point) {
					var yBottom = pick(point.yBottom, translatedThreshold),
						safeDistance = 999 + mathAbs(yBottom),
						plotY = mathMin(mathMax(-safeDistance, point.plotY), yAxis.len + safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)
						barX = point.plotX + pointXOffset,
						barW = seriesBarW,
						barY = mathMin(plotY, yBottom),
						right,
						bottom,
						fromTop,
						up,
						barH = mathMax(plotY, yBottom) - barY;

					// Handle options.minPointLength
					if (mathAbs(barH) < minPointLength) {
						if (minPointLength) {
							barH = minPointLength;
							up = (!yAxis.reversed && !point.negative) || (yAxis.reversed && point.negative);
							barY =
								mathRound(mathAbs(barY - translatedThreshold) > minPointLength ? // stacked
									yBottom - minPointLength : // keep position
									translatedThreshold - (up ? minPointLength : 0)); // #1485, #4051
						}
					}

					// Cache for access in polar
					point.barX = barX;
					point.pointWidth = pointWidth;

					// Round off to obtain crisp edges and avoid overlapping with neighbours (#2694)
					right = mathRound(barX + barW) + xCrisp;
					barX = mathRound(barX) + xCrisp;
					barW = right - barX;

					fromTop = mathAbs(barY) < 0.5;
					bottom = mathMin(mathRound(barY + barH) + yCrisp, 9e4); // #3575
					barY = mathRound(barY) + yCrisp;
					barH = bottom - barY;

					// Top edges are exceptions
					if (fromTop) {
						barY -= 1;
						barH += 1;
					}

					// Fix the tooltip on center of grouped columns (#1216, #424, #3648)
					point.tooltipPos = chart.inverted ? 
						[yAxis.len + yAxis.pos - chart.plotLeft - plotY, series.xAxis.len - barX - barW / 2, barH] : 
						[barX + barW / 2, plotY + yAxis.pos - chart.plotTop, barH];

					// Register shape type and arguments to be used in drawPoints
					point.shapeType = 'rect';
					point.shapeArgs = {
						x: barX,
						y: barY,
						width: barW,
						height: barH
					};
				});

			},

			getSymbol: noop,
			
			/**
			 * Use a solid rectangle like the area series types
			 */
			drawLegendSymbol: LegendSymbolMixin.drawRectangle,
			
			
			/**
			 * Columns have no graph
			 */
			drawGraph: noop,

			/**
			 * Draw the columns. For bars, the series.group is rotated, so the same coordinates
			 * apply for columns and bars. This method is inherited by scatter series.
			 *
			 */
			drawPoints: function () {
				var series = this,
					chart = this.chart,
					options = series.options,
					renderer = chart.renderer,
					animationLimit = options.animationLimit || 250,
					shapeArgs,
					pointAttr;

				// draw the columns
				each(series.points, function (point) {
					var plotY = point.plotY,
						graphic = point.graphic,
						borderAttr;

					if (plotY !== UNDEFINED && !isNaN(plotY) && point.y !== null) {
						shapeArgs = point.shapeArgs;

						borderAttr = defined(series.borderWidth) ? {
							'stroke-width': series.borderWidth
						} : {};

						pointAttr = point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE] || series.pointAttr[NORMAL_STATE];
						
						if (graphic) { // update
							stop(graphic);
							graphic.attr(borderAttr)[chart.pointCount < animationLimit ? 'animate' : 'attr'](merge(shapeArgs));

						} else {
							point.graphic = graphic = renderer[point.shapeType](shapeArgs)
								.attr(borderAttr)
								.attr(pointAttr)
								.add(series.group)
								.shadow(options.shadow, null, options.stacking && !options.borderRadius);
						}

					} else if (graphic) {
						point.graphic = graphic.destroy(); // #1269
					}
				});
			},

			/**
			 * Animate the column heights one by one from zero
			 * @param {Boolean} init Whether to initialize the animation or run it
			 */
			animate: function (init) {
				var series = this,
					yAxis = this.yAxis,
					options = series.options,
					inverted = this.chart.inverted,
					attr = {},
					translatedThreshold;

				if (hasSVG) { // VML is too slow anyway
					if (init) {
						attr.scaleY = 0.001;
						translatedThreshold = mathMin(yAxis.pos + yAxis.len, mathMax(yAxis.pos, yAxis.toPixels(options.threshold)));
						if (inverted) {
							attr.translateX = translatedThreshold - yAxis.len;
						} else {
							attr.translateY = translatedThreshold;
						}
						series.group.attr(attr);

					} else { // run the animation
						
						attr.scaleY = 1;
						attr[inverted ? 'translateX' : 'translateY'] = yAxis.pos;
						series.group.animate(attr, series.options.animation);

						// delete this function to allow it only once
						series.animate = null;
					}
				}
			},
			
			/**
			 * Remove this series from the chart
			 */
			remove: function () {
				var series = this,
					chart = series.chart;

				// column and bar series affects other series of the same type
				// as they are either stacked or grouped
				if (chart.hasRendered) {
					each(chart.series, function (otherSeries) {
						if (otherSeries.type === series.type) {
							otherSeries.isDirty = true;
						}
					});
				}

				Series.prototype.remove.apply(series, arguments);
			}
		});
		seriesTypes.column = ColumnSeries;
		/**
		 * Set the default options for bar
		 */
		defaultPlotOptions.bar = merge(defaultPlotOptions.column);
		/**
		 * The Bar series class
		 */
		var BarSeries = extendClass(ColumnSeries, {
			type: 'bar',
			inverted: true
		});
		seriesTypes.bar = BarSeries;

		/**
		 * Set the default options for scatter
		 */
		defaultPlotOptions.scatter = merge(defaultSeriesOptions, {
			lineWidth: 0,
			marker: {
				enabled: true // Overrides auto-enabling in line series (#3647)
			},
			tooltip: {
				headerFormat: '<span style="color:{point.color}">\u25CF</span> <span style="font-size: 10px;"> {series.name}</span><br/>',
				pointFormat: 'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'
			}
		});

		/**
		 * The scatter series class
		 */
		var ScatterSeries = extendClass(Series, {
			type: 'scatter',
			sorted: false,
			requireSorting: false,
			noSharedTooltip: true,
			trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],
			takeOrdinalPosition: false, // #2342
			kdDimensions: 2,
			drawGraph: function () {
				if (this.options.lineWidth) {
					Series.prototype.drawGraph.call(this);
				}
			}
		});

		seriesTypes.scatter = ScatterSeries;

		/**
		 * Set the default options for pie
		 */
		defaultPlotOptions.pie = merge(defaultSeriesOptions, {
			borderColor: '#FFFFFF',
			borderWidth: 1,
			center: [null, null],
			clip: false,
			colorByPoint: true, // always true for pies
			dataLabels: {
				// align: null,
				// connectorWidth: 1,
				// connectorColor: point.color,
				// connectorPadding: 5,
				distance: 30,
				enabled: true,
				formatter: function () { // #2945
					return this.y === null ? undefined : this.point.name;
				},
				// softConnector: true,
				x: 0
				// y: 0
			},
			ignoreHiddenPoint: true,
			//innerSize: 0,
			legendType: 'point',
			marker: null, // point options are specified in the base options
			size: null,
			showInLegend: false,
			slicedOffset: 10,
			states: {
				hover: {
					brightness: 0.1,
					shadow: false
				}
			},
			stickyTracking: false,
			tooltip: {
				followPointer: true
			}
		});

		/**
		 * Extended point object for pies
		 */
		var PiePoint = extendClass(Point, {
			/**
			 * Initiate the pie slice
			 */
			init: function () {

				Point.prototype.init.apply(this, arguments);

				var point = this,
					toggleSlice;

				extend(point, {
					visible: point.visible !== false,
					name: pick(point.name, 'Slice')
				});

				// add event listener for select
				toggleSlice = function (e) {
					point.slice(e.type === 'select');
				};
				addEvent(point, 'select', toggleSlice);
				addEvent(point, 'unselect', toggleSlice);

				return point;
			},

			/**
			 * Toggle the visibility of the pie slice
			 * @param {Boolean} vis Whether to show the slice or not. If undefined, the
			 *    visibility is toggled
			 */
			setVisible: function (vis, redraw) {
				var point = this,
					series = point.series,
					chart = series.chart,
					ignoreHiddenPoint = series.options.ignoreHiddenPoint;
				
				redraw = pick(redraw, ignoreHiddenPoint);

				if (vis !== point.visible) {

					// If called without an argument, toggle visibility
					point.visible = point.options.visible = vis = vis === UNDEFINED ? !point.visible : vis;
					series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data

					// Show and hide associated elements. This is performed regardless of redraw or not,
					// because chart.redraw only handles full series.
					each(['graphic', 'dataLabel', 'connector', 'shadowGroup'], function (key) {
						if (point[key]) {
							point[key][vis ? 'show' : 'hide'](true);
						}
					});

					if (point.legendItem) {
						chart.legend.colorizeItem(point, vis);
					}

					// #4170, hide halo after hiding point
					if (!vis && point.state === 'hover') {
						point.setState('');
					}
					
					// Handle ignore hidden slices
					if (ignoreHiddenPoint) {
						series.isDirty = true;
					}

					if (redraw) {
						chart.redraw();
					}
				}
			},

			/**
			 * Set or toggle whether the slice is cut out from the pie
			 * @param {Boolean} sliced When undefined, the slice state is toggled
			 * @param {Boolean} redraw Whether to redraw the chart. True by default.
			 */
			slice: function (sliced, redraw, animation) {
				var point = this,
					series = point.series,
					chart = series.chart,
					translation;

				setAnimation(animation, chart);

				// redraw is true by default
				redraw = pick(redraw, true);

				// if called without an argument, toggle
				point.sliced = point.options.sliced = sliced = defined(sliced) ? sliced : !point.sliced;
				series.options.data[inArray(point, series.data)] = point.options; // update userOptions.data

				translation = sliced ? point.slicedTranslation : {
					translateX: 0,
					translateY: 0
				};

				point.graphic.animate(translation);
				
				if (point.shadowGroup) {
					point.shadowGroup.animate(translation);
				}

			},

			haloPath: function (size) {
				var shapeArgs = this.shapeArgs,
					chart = this.series.chart;

				return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(chart.plotLeft + shapeArgs.x, chart.plotTop + shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {
					innerR: this.shapeArgs.r,
					start: shapeArgs.start,
					end: shapeArgs.end
				});
			}
		});

		/**
		 * The Pie series class
		 */
		var PieSeries = {
			type: 'pie',
			isCartesian: false,
			pointClass: PiePoint,
			requireSorting: false,
			directTouch: true,
			noSharedTooltip: true,
			trackerGroups: ['group', 'dataLabelsGroup'],
			axisTypes: [],
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'borderColor',
				'stroke-width': 'borderWidth',
				fill: 'color'
			},

			/**
			 * Animate the pies in
			 */
			animate: function (init) {
				var series = this,
					points = series.points,
					startAngleRad = series.startAngleRad;

				if (!init) {
					each(points, function (point) {
						var graphic = point.graphic,
							args = point.shapeArgs;

						if (graphic) {
							// start values
							graphic.attr({
								r: point.startR || (series.center[3] / 2), // animate from inner radius (#779)
								start: startAngleRad,
								end: startAngleRad
							});

							// animate
							graphic.animate({
								r: args.r,
								start: args.start,
								end: args.end
							}, series.options.animation);
						}
					});

					// delete this function to allow it only once
					series.animate = null;
				}
			},

			/**
			 * Extend the basic setData method by running processData and generatePoints immediately,
			 * in order to access the points from the legend.
			 */
			setData: function (data, redraw, animation, updatePoints) {
				Series.prototype.setData.call(this, data, false, animation, updatePoints);
				this.processData();
				this.generatePoints();
				if (pick(redraw, true)) {
					this.chart.redraw(animation);
				} 
			},

			/**
			 * Recompute total chart sum and update percentages of points.
			 */
			updateTotals: function () {
				var i,
					total = 0,
					points = this.points,
					len = points.length,
					point,
					ignoreHiddenPoint = this.options.ignoreHiddenPoint;

				// Get the total sum
				for (i = 0; i < len; i++) {
					point = points[i];
					total += (ignoreHiddenPoint && !point.visible) ? 0 : point.y;
				}
				this.total = total;

				// Set each point's properties
				for (i = 0; i < len; i++) {
					point = points[i];
					point.percentage = (total > 0 && (point.visible || !ignoreHiddenPoint)) ? point.y / total * 100 : 0;
					point.total = total;
				}
			},

			/**
			 * Extend the generatePoints method by adding total and percentage properties to each point
			 */
			generatePoints: function () {
				Series.prototype.generatePoints.call(this);
				this.updateTotals();
			},
			
			/**
			 * Do translation for pie slices
			 */
			translate: function (positions) {
				this.generatePoints();
				
				var series = this,
					cumulative = 0,
					precision = 1000, // issue #172
					options = series.options,
					slicedOffset = options.slicedOffset,
					connectorOffset = slicedOffset + options.borderWidth,
					start,
					end,
					angle,
					startAngle = options.startAngle || 0,
					startAngleRad = series.startAngleRad = mathPI / 180 * (startAngle - 90),
					endAngleRad = series.endAngleRad = mathPI / 180 * ((pick(options.endAngle, startAngle + 360)) - 90),
					circ = endAngleRad - startAngleRad, //2 * mathPI,
					points = series.points,
					radiusX, // the x component of the radius vector for a given point
					radiusY,
					labelDistance = options.dataLabels.distance,
					ignoreHiddenPoint = options.ignoreHiddenPoint,
					i,
					len = points.length,
					point;

				// Get positions - either an integer or a percentage string must be given.
				// If positions are passed as a parameter, we're in a recursive loop for adjusting
				// space for data labels.
				if (!positions) {
					series.center = positions = series.getCenter();
				}

				// utility for getting the x value from a given y, used for anticollision logic in data labels
				series.getX = function (y, left) {

					angle = math.asin(mathMin((y - positions[1]) / (positions[2] / 2 + labelDistance), 1));

					return positions[0] +
						(left ? -1 : 1) *
						(mathCos(angle) * (positions[2] / 2 + labelDistance));
				};

				// Calculate the geometry for each point
				for (i = 0; i < len; i++) {
					
					point = points[i];
					
					// set start and end angle
					start = startAngleRad + (cumulative * circ);
					if (!ignoreHiddenPoint || point.visible) {
						cumulative += point.percentage / 100;
					}
					end = startAngleRad + (cumulative * circ);

					// set the shape
					point.shapeType = 'arc';
					point.shapeArgs = {
						x: positions[0],
						y: positions[1],
						r: positions[2] / 2,
						innerR: positions[3] / 2,
						start: mathRound(start * precision) / precision,
						end: mathRound(end * precision) / precision
					};

					// The angle must stay within -90 and 270 (#2645)
					angle = (end + start) / 2;
					if (angle > 1.5 * mathPI) {
						angle -= 2 * mathPI;
					} else if (angle < -mathPI / 2) {
						angle += 2 * mathPI;
					}

					// Center for the sliced out slice
					point.slicedTranslation = {
						translateX: mathRound(mathCos(angle) * slicedOffset),
						translateY: mathRound(mathSin(angle) * slicedOffset)
					};

					// set the anchor point for tooltips
					radiusX = mathCos(angle) * positions[2] / 2;
					radiusY = mathSin(angle) * positions[2] / 2;
					point.tooltipPos = [
						positions[0] + radiusX * 0.7,
						positions[1] + radiusY * 0.7
					];
					
					point.half = angle < -mathPI / 2 || angle > mathPI / 2 ? 1 : 0;
					point.angle = angle;

					// set the anchor point for data labels
					connectorOffset = mathMin(connectorOffset, labelDistance / 2); // #1678
					point.labelPos = [
						positions[0] + radiusX + mathCos(angle) * labelDistance, // first break of connector
						positions[1] + radiusY + mathSin(angle) * labelDistance, // a/a
						positions[0] + radiusX + mathCos(angle) * connectorOffset, // second break, right outside pie
						positions[1] + radiusY + mathSin(angle) * connectorOffset, // a/a
						positions[0] + radiusX, // landing point for connector
						positions[1] + radiusY, // a/a
						labelDistance < 0 ? // alignment
							'center' :
							point.half ? 'right' : 'left', // alignment
						angle // center angle
					];

				}
			},
			
			drawGraph: null,

			/**
			 * Draw the data points
			 */
			drawPoints: function () {
				var series = this,
					chart = series.chart,
					renderer = chart.renderer,
					groupTranslation,
					//center,
					graphic,
					//group,
					shadow = series.options.shadow,
					shadowGroup,
					shapeArgs,
					attr;

				if (shadow && !series.shadowGroup) {
					series.shadowGroup = renderer.g('shadow')
						.add(series.group);
				}

				// draw the slices
				each(series.points, function (point) {
					if (point.y !== null) {
						graphic = point.graphic;
						shapeArgs = point.shapeArgs;
						shadowGroup = point.shadowGroup;

						// put the shadow behind all points
						if (shadow && !shadowGroup) {
							shadowGroup = point.shadowGroup = renderer.g('shadow')
								.add(series.shadowGroup);
						}

						// if the point is sliced, use special translation, else use plot area traslation
						groupTranslation = point.sliced ? point.slicedTranslation : {
							translateX: 0,
							translateY: 0
						};

						//group.translate(groupTranslation[0], groupTranslation[1]);
						if (shadowGroup) {
							shadowGroup.attr(groupTranslation);
						}

						// draw the slice
						if (graphic) {
							graphic.animate(extend(shapeArgs, groupTranslation));				
						} else {
							attr = { 'stroke-linejoin': 'round' };
							if (!point.visible) {
								attr.visibility = 'hidden';
							}

							point.graphic = graphic = renderer[point.shapeType](shapeArgs)
								.setRadialReference(series.center)
								.attr(
									point.pointAttr[point.selected ? SELECT_STATE : NORMAL_STATE]
								)
								.attr(attr)
								.attr(groupTranslation)
								.add(series.group)
								.shadow(shadow, shadowGroup);	
						}
					}
				});

			},


			searchPoint: noop,

			/**
			 * Utility for sorting data labels
			 */
			sortByAngle: function (points, sign) {
				points.sort(function (a, b) {
					return a.angle !== undefined && (b.angle - a.angle) * sign;
				});
			},		

			/**
			 * Use a simple symbol from LegendSymbolMixin
			 */
			drawLegendSymbol: LegendSymbolMixin.drawRectangle,

			/**
			 * Use the getCenter method from drawLegendSymbol
			 */
			getCenter: CenteredSeriesMixin.getCenter,

			/**
			 * Pies don't have point marker symbols
			 */
			getSymbol: noop

		};
		PieSeries = extendClass(Series, PieSeries);
		seriesTypes.pie = PieSeries;

		/**
		 * Draw the data labels
		 */
		Series.prototype.drawDataLabels = function () {

			var series = this,
				seriesOptions = series.options,
				cursor = seriesOptions.cursor,
				options = seriesOptions.dataLabels,
				points = series.points,
				pointOptions,
				generalOptions,
				hasRendered = series.hasRendered || 0,
				str,
				dataLabelsGroup,
				renderer = series.chart.renderer;

			if (options.enabled || series._hasPointLabels) {

				// Process default alignment of data labels for columns
				if (series.dlProcessOptions) {
					series.dlProcessOptions(options);
				}

				// Create a separate group for the data labels to avoid rotation
				dataLabelsGroup = series.plotGroup(
					'dataLabelsGroup',
					'data-labels',
					options.defer ? HIDDEN : VISIBLE,
					options.zIndex || 6
				);

				if (pick(options.defer, true)) {
					dataLabelsGroup.attr({ opacity: +hasRendered }); // #3300
					if (!hasRendered) {
						addEvent(series, 'afterAnimate', function () {
							if (series.visible) { // #3023, #3024
								dataLabelsGroup.show();
							}
							dataLabelsGroup[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, { duration: 200 });
						});
					}
				}

				// Make the labels for each point
				generalOptions = options;
				each(points, function (point) {

					var enabled,
						dataLabel = point.dataLabel,
						labelConfig,
						attr,
						name,
						rotation,
						connector = point.connector,
						isNew = true,
						style,
						moreStyle = {};

					// Determine if each data label is enabled
					pointOptions = point.dlOptions || (point.options && point.options.dataLabels); // dlOptions is used in treemaps
					enabled = pick(pointOptions && pointOptions.enabled, generalOptions.enabled); // #2282


					// If the point is outside the plot area, destroy it. #678, #820
					if (dataLabel && !enabled) {
						point.dataLabel = dataLabel.destroy();

					// Individual labels are disabled if the are explicitly disabled
					// in the point options, or if they fall outside the plot area.
					} else if (enabled) {

						// Create individual options structure that can be extended without
						// affecting others
						options = merge(generalOptions, pointOptions);
						style = options.style;

						rotation = options.rotation;

						// Get the string
						labelConfig = point.getLabelConfig();
						str = options.format ?
							format(options.format, labelConfig) :
							options.formatter.call(labelConfig, options);

						// Determine the color
						style.color = pick(options.color, style.color, series.color, 'black');


						// update existing label
						if (dataLabel) {

							if (defined(str)) {
								dataLabel
									.attr({
										text: str
									});
								isNew = false;

							} else { // #1437 - the label is shown conditionally
								point.dataLabel = dataLabel = dataLabel.destroy();
								if (connector) {
									point.connector = connector.destroy();
								}
							}

						// create new label
						} else if (defined(str)) {
							attr = {
								//align: align,
								fill: options.backgroundColor,
								stroke: options.borderColor,
								'stroke-width': options.borderWidth,
								r: options.borderRadius || 0,
								rotation: rotation,
								padding: options.padding,
								zIndex: 1
							};
							
							// Get automated contrast color
							if (style.color === 'contrast') {
								moreStyle.color = options.inside || options.distance < 0 || !!seriesOptions.stacking ? 
									renderer.getContrast(point.color || series.color) : 
									'#000000';
							}
							if (cursor) {
								moreStyle.cursor = cursor;
							}
							

							// Remove unused attributes (#947)
							for (name in attr) {
								if (attr[name] === UNDEFINED) {
									delete attr[name];
								}
							}

							dataLabel = point.dataLabel = renderer[rotation ? 'text' : 'label']( // labels don't support rotation
								str,
								0,
								-999,
								options.shape,
								null,
								null,
								options.useHTML
							)
							.attr(attr)
							.css(extend(style, moreStyle))
							.add(dataLabelsGroup)
							.shadow(options.shadow);

						}

						if (dataLabel) {
							// Now the data label is created and placed at 0,0, so we need to align it
							series.alignDataLabel(point, dataLabel, options, null, isNew);
						}
					}
				});
			}
		};

		/**
		 * Align each individual data label
		 */
		Series.prototype.alignDataLabel = function (point, dataLabel, options, alignTo, isNew) {
			var chart = this.chart,
				inverted = chart.inverted,
				plotX = pick(point.plotX, -999),
				plotY = pick(point.plotY, -999),
				bBox = dataLabel.getBBox(),
				baseline = chart.renderer.fontMetrics(options.style.fontSize).b,
				rotCorr, // rotation correction
				// Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)
				visible = this.visible && (point.series.forceDL || chart.isInsidePlot(plotX, mathRound(plotY), inverted) ||
					(alignTo && chart.isInsidePlot(plotX, inverted ? alignTo.x + 1 : alignTo.y + alignTo.height - 1, inverted))),
				alignAttr; // the final position;

			if (visible) {

				// The alignment box is a singular point
				alignTo = extend({
					x: inverted ? chart.plotWidth - plotY : plotX,
					y: mathRound(inverted ? chart.plotHeight - plotX : plotY),
					width: 0,
					height: 0
				}, alignTo);

				// Add the text size for alignment calculation
				extend(options, {
					width: bBox.width,
					height: bBox.height
				});

				// Allow a hook for changing alignment in the last moment, then do the alignment
				if (options.rotation) { // Fancy box alignment isn't supported for rotated text
					rotCorr = chart.renderer.rotCorr(baseline, options.rotation); // #3723
					dataLabel[isNew ? 'attr' : 'animate']({
							x: alignTo.x + options.x + alignTo.width / 2 + rotCorr.x,
							y: alignTo.y + options.y + alignTo.height / 2
						})
						.attr({ // #3003
							align: options.align
						});
				} else {
					dataLabel.align(options, null, alignTo);
					alignAttr = dataLabel.alignAttr;

					// Handle justify or crop
					if (pick(options.overflow, 'justify') === 'justify') {
						this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);

					} else if (pick(options.crop, true)) {
						// Now check that the data label is within the plot area
						visible = chart.isInsidePlot(alignAttr.x, alignAttr.y) && chart.isInsidePlot(alignAttr.x + bBox.width, alignAttr.y + bBox.height);

					}

					// When we're using a shape, make it possible with a connector or an arrow pointing to thie point
					if (options.shape) {
						dataLabel.attr({
							anchorX: point.plotX,
							anchorY: point.plotY
						});
					}

				}
			}

			// Show or hide based on the final aligned position
			if (!visible) {
				dataLabel.attr({ y: -999 });
				dataLabel.placed = false; // don't animate back in
			}

		};

		/**
		 * If data labels fall partly outside the plot area, align them back in, in a way that
		 * doesn't hide the point.
		 */
		Series.prototype.justifyDataLabel = function (dataLabel, options, alignAttr, bBox, alignTo, isNew) {
			var chart = this.chart,
				align = options.align,
				verticalAlign = options.verticalAlign,
				off,
				justified,
				padding = dataLabel.box ? 0 : (dataLabel.padding || 0);

			// Off left
			off = alignAttr.x + padding;
			if (off < 0) {
				if (align === 'right') {
					options.align = 'left';
				} else {
					options.x = -off;
				}
				justified = true;
			}

			// Off right
			off = alignAttr.x + bBox.width - padding;
			if (off > chart.plotWidth) {
				if (align === 'left') {
					options.align = 'right';
				} else {
					options.x = chart.plotWidth - off;
				}
				justified = true;
			}

			// Off top
			off = alignAttr.y + padding;
			if (off < 0) {
				if (verticalAlign === 'bottom') {
					options.verticalAlign = 'top';
				} else {
					options.y = -off;
				}
				justified = true;
			}

			// Off bottom
			off = alignAttr.y + bBox.height - padding;
			if (off > chart.plotHeight) {
				if (verticalAlign === 'top') {
					options.verticalAlign = 'bottom';
				} else {
					options.y = chart.plotHeight - off;
				}
				justified = true;
			}

			if (justified) {
				dataLabel.placed = !isNew;
				dataLabel.align(options, null, alignTo);
			}
		};

		/**
		 * Override the base drawDataLabels method by pie specific functionality
		 */
		if (seriesTypes.pie) {
			seriesTypes.pie.prototype.drawDataLabels = function () {
				var series = this,
					data = series.data,
					point,
					chart = series.chart,
					options = series.options.dataLabels,
					connectorPadding = pick(options.connectorPadding, 10),
					connectorWidth = pick(options.connectorWidth, 1),
					plotWidth = chart.plotWidth,
					plotHeight = chart.plotHeight,
					connector,
					connectorPath,
					softConnector = pick(options.softConnector, true),
					distanceOption = options.distance,
					seriesCenter = series.center,
					radius = seriesCenter[2] / 2,
					centerY = seriesCenter[1],
					outside = distanceOption > 0,
					dataLabel,
					dataLabelWidth,
					labelPos,
					labelHeight,
					halves = [// divide the points into right and left halves for anti collision
						[], // right
						[]  // left
					],
					x,
					y,
					visibility,
					rankArr,
					i,
					j,
					overflow = [0, 0, 0, 0], // top, right, bottom, left
					sort = function (a, b) {
						return b.y - a.y;
					};

				// get out if not enabled
				if (!series.visible || (!options.enabled && !series._hasPointLabels)) {
					return;
				}

				// run parent method
				Series.prototype.drawDataLabels.apply(series);

				// arrange points for detection collision
				each(data, function (point) {
					if (point.dataLabel && point.visible) { // #407, #2510
						halves[point.half].push(point);
					}
				});

				/* Loop over the points in each half, starting from the top and bottom
				 * of the pie to detect overlapping labels.
				 */
				i = 2;
				while (i--) {

					var slots = [],
						slotsLength,
						usedSlots = [],
						points = halves[i],
						pos,
						bottom,
						length = points.length,
						slotIndex;

					if (!length) {
						continue;
					}

					// Sort by angle
					series.sortByAngle(points, i - 0.5);

					// Assume equal label heights on either hemisphere (#2630)
					j = labelHeight = 0;
					while (!labelHeight && points[j]) { // #1569
						labelHeight = points[j] && points[j].dataLabel && (points[j].dataLabel.getBBox().height || 21); // 21 is for #968
						j++;
					}

					// Only do anti-collision when we are outside the pie and have connectors (#856)
					if (distanceOption > 0) {

						// Build the slots
						bottom = mathMin(centerY + radius + distanceOption, chart.plotHeight);
						for (pos = mathMax(0, centerY - radius - distanceOption); pos <= bottom; pos += labelHeight) {
							slots.push(pos);
						}
						slotsLength = slots.length;


						/* Visualize the slots
						if (!series.slotElements) {
							series.slotElements = [];
						}
						if (i === 1) {
							series.slotElements.forEach(function (elem) {
								elem.destroy();
							});
							series.slotElements.length = 0;
						}
							
						slots.forEach(function (pos, no) {
							var slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),
								slotY = pos + chart.plotTop;
							
							if (!isNaN(slotX)) {
								series.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)
									.attr({
										'stroke-width': 1,
										stroke: 'silver',
										fill: 'rgba(0,0,255,0.1)'
									})
									.add());
								series.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)
									.attr({
										fill: 'silver'
									}).add());
							}
						});
						// */

						// if there are more values than available slots, remove lowest values
						if (length > slotsLength) {
							// create an array for sorting and ranking the points within each quarter
							rankArr = [].concat(points);
							rankArr.sort(sort);
							j = length;
							while (j--) {
								rankArr[j].rank = j;
							}
							j = length;
							while (j--) {
								if (points[j].rank >= slotsLength) {
									points.splice(j, 1);
								}
							}
							length = points.length;
						}

						// The label goes to the nearest open slot, but not closer to the edge than
						// the label's index.
						for (j = 0; j < length; j++) {

							point = points[j];
							labelPos = point.labelPos;

							var closest = 9999,
								distance,
								slotI;

							// find the closest slot index
							for (slotI = 0; slotI < slotsLength; slotI++) {
								distance = mathAbs(slots[slotI] - labelPos[1]);
								if (distance < closest) {
									closest = distance;
									slotIndex = slotI;
								}
							}

							// if that slot index is closer to the edges of the slots, move it
							// to the closest appropriate slot
							if (slotIndex < j && slots[j] !== null) { // cluster at the top
								slotIndex = j;
							} else if (slotsLength  < length - j + slotIndex && slots[j] !== null) { // cluster at the bottom
								slotIndex = slotsLength - length + j;
								while (slots[slotIndex] === null) { // make sure it is not taken
									slotIndex++;
								}
							} else {
								// Slot is taken, find next free slot below. In the next run, the next slice will find the
								// slot above these, because it is the closest one
								while (slots[slotIndex] === null) { // make sure it is not taken
									slotIndex++;
								}
							}

							usedSlots.push({ i: slotIndex, y: slots[slotIndex] });
							slots[slotIndex] = null; // mark as taken
						}
						// sort them in order to fill in from the top
						usedSlots.sort(sort);
					}

					// now the used slots are sorted, fill them up sequentially
					for (j = 0; j < length; j++) {

						var slot, naturalY;

						point = points[j];
						labelPos = point.labelPos;
						dataLabel = point.dataLabel;
						visibility = point.visible === false ? HIDDEN : 'inherit';
						naturalY = labelPos[1];

						if (distanceOption > 0) {
							slot = usedSlots.pop();
							slotIndex = slot.i;

							// if the slot next to currrent slot is free, the y value is allowed
							// to fall back to the natural position
							y = slot.y;
							if ((naturalY > y && slots[slotIndex + 1] !== null) ||
									(naturalY < y &&  slots[slotIndex - 1] !== null)) {
								y = mathMin(mathMax(0, naturalY), chart.plotHeight);
							}

						} else {
							y = naturalY;
						}

						// get the x - use the natural x position for first and last slot, to prevent the top
						// and botton slice connectors from touching each other on either side
						x = options.justify ?
							seriesCenter[0] + (i ? -1 : 1) * (radius + distanceOption) :
							series.getX(y === centerY - radius - distanceOption || y === centerY + radius + distanceOption ? naturalY : y, i);


						// Record the placement and visibility
						dataLabel._attr = {
							visibility: visibility,
							align: labelPos[6]
						};
						dataLabel._pos = {
							x: x + options.x +
								({ left: connectorPadding, right: -connectorPadding }[labelPos[6]] || 0),
							y: y + options.y - 10 // 10 is for the baseline (label vs text)
						};
						dataLabel.connX = x;
						dataLabel.connY = y;


						// Detect overflowing data labels
						if (this.options.size === null) {
							dataLabelWidth = dataLabel.width;
							// Overflow left
							if (x - dataLabelWidth < connectorPadding) {
								overflow[3] = mathMax(mathRound(dataLabelWidth - x + connectorPadding), overflow[3]);

							// Overflow right
							} else if (x + dataLabelWidth > plotWidth - connectorPadding) {
								overflow[1] = mathMax(mathRound(x + dataLabelWidth - plotWidth + connectorPadding), overflow[1]);
							}

							// Overflow top
							if (y - labelHeight / 2 < 0) {
								overflow[0] = mathMax(mathRound(-y + labelHeight / 2), overflow[0]);

							// Overflow left
							} else if (y + labelHeight / 2 > plotHeight) {
								overflow[2] = mathMax(mathRound(y + labelHeight / 2 - plotHeight), overflow[2]);
							}
						}
					} // for each point
				} // for each half

				// Do not apply the final placement and draw the connectors until we have verified
				// that labels are not spilling over.
				if (arrayMax(overflow) === 0 || this.verifyDataLabelOverflow(overflow)) {

					// Place the labels in the final position
					this.placeDataLabels();

					// Draw the connectors
					if (outside && connectorWidth) {
						each(this.points, function (point) {
							connector = point.connector;
							labelPos = point.labelPos;
							dataLabel = point.dataLabel;

							if (dataLabel && dataLabel._pos && point.visible) {
								visibility = dataLabel._attr.visibility;
								x = dataLabel.connX;
								y = dataLabel.connY;
								connectorPath = softConnector ? [
									M,
									x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
									'C',
									x, y, // first break, next to the label
									2 * labelPos[2] - labelPos[4], 2 * labelPos[3] - labelPos[5],
									labelPos[2], labelPos[3], // second break
									L,
									labelPos[4], labelPos[5] // base
								] : [
									M,
									x + (labelPos[6] === 'left' ? 5 : -5), y, // end of the string at the label
									L,
									labelPos[2], labelPos[3], // second break
									L,
									labelPos[4], labelPos[5] // base
								];

								if (connector) {
									connector.animate({ d: connectorPath });
									connector.attr('visibility', visibility);

								} else {
									point.connector = connector = series.chart.renderer.path(connectorPath).attr({
										'stroke-width': connectorWidth,
										stroke: options.connectorColor || point.color || '#606060',
										visibility: visibility
										//zIndex: 0 // #2722 (reversed)
									})
									.add(series.dataLabelsGroup);
								}
							} else if (connector) {
								point.connector = connector.destroy();
							}
						});
					}
				}
			};
			/**
			 * Perform the final placement of the data labels after we have verified that they
			 * fall within the plot area.
			 */
			seriesTypes.pie.prototype.placeDataLabels = function () {
				each(this.points, function (point) {
					var dataLabel = point.dataLabel,
						_pos;

					if (dataLabel && point.visible) {
						_pos = dataLabel._pos;
						if (_pos) {
							dataLabel.attr(dataLabel._attr);
							dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);
							dataLabel.moved = true;
						} else if (dataLabel) {
							dataLabel.attr({ y: -999 });
						}
					}
				});
			};

			seriesTypes.pie.prototype.alignDataLabel =  noop;

			/**
			 * Verify whether the data labels are allowed to draw, or we should run more translation and data
			 * label positioning to keep them inside the plot area. Returns true when data labels are ready
			 * to draw.
			 */
			seriesTypes.pie.prototype.verifyDataLabelOverflow = function (overflow) {

				var center = this.center,
					options = this.options,
					centerOption = options.center,
					minSize = options.minSize || 80,
					newSize = minSize,
					ret;

				// Handle horizontal size and center
				if (centerOption[0] !== null) { // Fixed center
					newSize = mathMax(center[2] - mathMax(overflow[1], overflow[3]), minSize);

				} else { // Auto center
					newSize = mathMax(
						center[2] - overflow[1] - overflow[3], // horizontal overflow
						minSize
					);
					center[0] += (overflow[3] - overflow[1]) / 2; // horizontal center
				}

				// Handle vertical size and center
				if (centerOption[1] !== null) { // Fixed center
					newSize = mathMax(mathMin(newSize, center[2] - mathMax(overflow[0], overflow[2])), minSize);

				} else { // Auto center
					newSize = mathMax(
						mathMin(
							newSize,
							center[2] - overflow[0] - overflow[2] // vertical overflow
						),
						minSize
					);
					center[1] += (overflow[0] - overflow[2]) / 2; // vertical center
				}

				// If the size must be decreased, we need to run translate and drawDataLabels again
				if (newSize < center[2]) {
					center[2] = newSize;
					center[3] = relativeLength(options.innerSize || 0, newSize);
					this.translate(center);
					each(this.points, function (point) {
						if (point.dataLabel) {
							point.dataLabel._pos = null; // reset
						}
					});

					if (this.drawDataLabels) {
						this.drawDataLabels();
					}
				// Else, return true to indicate that the pie and its labels is within the plot area
				} else {
					ret = true;
				}
				return ret;
			};
		}

		if (seriesTypes.column) {

			/**
			 * Override the basic data label alignment by adjusting for the position of the column
			 */
			seriesTypes.column.prototype.alignDataLabel = function (point, dataLabel, options,  alignTo, isNew) {
				var inverted = this.chart.inverted,
					series = point.series,
					dlBox = point.dlBox || point.shapeArgs, // data label box for alignment
					below = pick(point.below, point.plotY > pick(this.translatedThreshold, series.yAxis.len)), // point.below is used in range series
					inside = pick(options.inside, !!this.options.stacking); // draw it inside the box?

				// Align to the column itself, or the top of it
				if (dlBox) { // Area range uses this method but not alignTo
					alignTo = merge(dlBox);

					if (inverted) {
						alignTo = {
							x: series.yAxis.len - alignTo.y - alignTo.height,
							y: series.xAxis.len - alignTo.x - alignTo.width,
							width: alignTo.height,
							height: alignTo.width
						};
					}

					// Compute the alignment box
					if (!inside) {
						if (inverted) {
							alignTo.x += below ? 0 : alignTo.width;
							alignTo.width = 0;
						} else {
							alignTo.y += below ? alignTo.height : 0;
							alignTo.height = 0;
						}
					}
				}


				// When alignment is undefined (typically columns and bars), display the individual
				// point below or above the point depending on the threshold
				options.align = pick(
					options.align,
					!inverted || inside ? 'center' : below ? 'right' : 'left'
				);
				options.verticalAlign = pick(
					options.verticalAlign,
					inverted || inside ? 'middle' : below ? 'top' : 'bottom'
				);

				// Call the parent method
				Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);
			};
		}



		/**
		 * Highstock JS v2.1.8-modified ()
		 * Highcharts module to hide overlapping data labels. This module is included by default in Highmaps.
		 *
		 * (c) 2010-2014 Torstein Honsi
		 *
		 * License: www.highcharts.com/license
		 */

		/*global Highcharts, HighchartsAdapter */
		(function (H) {
			var Chart = H.Chart,
				each = H.each,
				pick = H.pick,
				addEvent = HighchartsAdapter.addEvent;

			// Collect potensial overlapping data labels. Stack labels probably don't need to be 
			// considered because they are usually accompanied by data labels that lie inside the columns.
			Chart.prototype.callbacks.push(function (chart) {
				function collectAndHide() {
					var labels = [];

					each(chart.series, function (series) {
						var dlOptions = series.options.dataLabels,
							collections = series.dataLabelCollections || ['dataLabel']; // Range series have two collections
						if ((dlOptions.enabled || series._hasPointLabels) && !dlOptions.allowOverlap && series.visible) { // #3866
							each(collections, function (coll) {
								each(series.points, function (point) {
									if (point[coll]) {
										point[coll].labelrank = pick(point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118
										labels.push(point[coll]);
									}
								});
							});
						}
					});
					chart.hideOverlappingLabels(labels);
				}

				// Do it now ...
				collectAndHide();

				// ... and after each chart redraw
				addEvent(chart, 'redraw', collectAndHide);

			});

			/**
			 * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth 
			 * visual imression.
			 */		
			Chart.prototype.hideOverlappingLabels = function (labels) {

				var len = labels.length,
					label,
					i,
					j,
					label1,
					label2,
					isIntersecting,
					pos1,
					pos2,
					padding,
					intersectRect = function (x1, y1, w1, h1, x2, y2, w2, h2) {
						return !(
							x2 > x1 + w1 ||
							x2 + w2 < x1 ||
							y2 > y1 + h1 ||
							y2 + h2 < y1
						);
					};
			
				// Mark with initial opacity
				for (i = 0; i < len; i++) {
					label = labels[i];
					if (label) {
						label.oldOpacity = label.opacity;
						label.newOpacity = 1;
					}
				}

				// Prevent a situation in a gradually rising slope, that each label
				// will hide the previous one because the previous one always has
				// lower rank.
				labels.sort(function (a, b) {
					return (b.labelrank || 0) - (a.labelrank || 0);
				});

				// Detect overlapping labels
				for (i = 0; i < len; i++) {
					label1 = labels[i];

					for (j = i + 1; j < len; ++j) {
						label2 = labels[j];
						if (label1 && label2 && label1.placed && label2.placed && label1.newOpacity !== 0 && label2.newOpacity !== 0) {
							pos1 = label1.alignAttr;
							pos2 = label2.alignAttr;
							padding = 2 * (label1.box ? 0 : label1.padding); // Substract the padding if no background or border (#4333)
							isIntersecting = intersectRect(
								pos1.x,
								pos1.y,
								label1.width - padding,
								label1.height - padding,
								pos2.x,
								pos2.y,
								label2.width - padding,
								label2.height - padding
							);

							if (isIntersecting) {
								(label1.labelrank < label2.labelrank ? label1 : label2).newOpacity = 0;
							}
						}
					}
				}

				// Hide or show
				each(labels, function (label) {
					var complete,
						newOpacity;

					if (label) {
						newOpacity = label.newOpacity;

						if (label.oldOpacity !== newOpacity && label.placed) {

							// Make sure the label is completely hidden to avoid catching clicks (#4362)
							if (newOpacity) {
								label.show(true);
							} else {
								complete = function () {
									label.hide();
								};
							}

							// Animate or set the opacity					
							label.alignAttr.opacity = newOpacity;
							label[label.isOld ? 'animate' : 'attr'](label.alignAttr, null, complete);
							
						}
						label.isOld = true;
					}
				});
			};

		}(Highcharts));/**
		 * TrackerMixin for points and graphs
		 */

		var TrackerMixin = Highcharts.TrackerMixin = {

			drawTrackerPoint: function () {
				var series = this,
					chart = series.chart,
					pointer = chart.pointer,
					cursor = series.options.cursor,
					css = cursor && { cursor: cursor },
					onMouseOver = function (e) {
						var target = e.target,
						point;

						while (target && !point) {
							point = target.point;
							target = target.parentNode;
						}

						if (point !== UNDEFINED && point !== chart.hoverPoint) { // undefined on graph in scatterchart
							point.onMouseOver(e);
						}
					};

				// Add reference to the point
				each(series.points, function (point) {
					if (point.graphic) {
						point.graphic.element.point = point;
					}
					if (point.dataLabel) {
						point.dataLabel.element.point = point;
					}
				});

				// Add the event listeners, we need to do this only once
				if (!series._hasTracking) {
					each(series.trackerGroups, function (key) {
						if (series[key]) { // we don't always have dataLabelsGroup
							series[key]
								.addClass(PREFIX + 'tracker')
								.on('mouseover', onMouseOver)
								.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })
								.css(css);
							if (hasTouch) {
								series[key].on('touchstart', onMouseOver);
							}
						}
					});
					series._hasTracking = true;
				}
			},

			/**
			 * Draw the tracker object that sits above all data labels and markers to
			 * track mouse events on the graph or points. For the line type charts
			 * the tracker uses the same graphPath, but with a greater stroke width
			 * for better control.
			 */
			drawTrackerGraph: function () {
				var series = this,
					options = series.options,
					trackByArea = options.trackByArea,
					trackerPath = [].concat(trackByArea ? series.areaPath : series.graphPath),
					trackerPathLength = trackerPath.length,
					chart = series.chart,
					pointer = chart.pointer,
					renderer = chart.renderer,
					snap = chart.options.tooltip.snap,
					tracker = series.tracker,
					cursor = options.cursor,
					css = cursor && { cursor: cursor },
					singlePoints = series.singlePoints,
					singlePoint,
					i,
					onMouseOver = function () {
						if (chart.hoverSeries !== series) {
							series.onMouseOver();
						}
					},
					/*
					 * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable
					 * IE6: 0.002
					 * IE7: 0.002
					 * IE8: 0.002
					 * IE9: 0.00000000001 (unlimited)
					 * IE10: 0.0001 (exporting only)
					 * FF: 0.00000000001 (unlimited)
					 * Chrome: 0.000001
					 * Safari: 0.000001
					 * Opera: 0.00000000001 (unlimited)
					 */
					TRACKER_FILL = 'rgba(192,192,192,' + (hasSVG ? 0.0001 : 0.002) + ')';

				// Extend end points. A better way would be to use round linecaps,
				// but those are not clickable in VML.
				if (trackerPathLength && !trackByArea) {
					i = trackerPathLength + 1;
					while (i--) {
						if (trackerPath[i] === M) { // extend left side
							trackerPath.splice(i + 1, 0, trackerPath[i + 1] - snap, trackerPath[i + 2], L);
						}
						if ((i && trackerPath[i] === M) || i === trackerPathLength) { // extend right side
							trackerPath.splice(i, 0, L, trackerPath[i - 2] + snap, trackerPath[i - 1]);
						}
					}
				}

				// handle single points
				for (i = 0; i < singlePoints.length; i++) {
					singlePoint = singlePoints[i];
					trackerPath.push(M, singlePoint.plotX - snap, singlePoint.plotY,
					L, singlePoint.plotX + snap, singlePoint.plotY);
				}

				// draw the tracker
				if (tracker) {
					tracker.attr({ d: trackerPath });
				} else { // create

					series.tracker = renderer.path(trackerPath)
					.attr({
						'stroke-linejoin': 'round', // #1225
						visibility: series.visible ? VISIBLE : HIDDEN,
						stroke: TRACKER_FILL,
						fill: trackByArea ? TRACKER_FILL : NONE,
						'stroke-width' : options.lineWidth + (trackByArea ? 0 : 2 * snap),
						zIndex: 2
					})
					.add(series.group);

					// The tracker is added to the series group, which is clipped, but is covered
					// by the marker group. So the marker group also needs to capture events.
					each([series.tracker, series.markerGroup], function (tracker) {
						tracker.addClass(PREFIX + 'tracker')
							.on('mouseover', onMouseOver)
							.on('mouseout', function (e) { pointer.onTrackerMouseOut(e); })
							.css(css);

						if (hasTouch) {
							tracker.on('touchstart', onMouseOver);
						}
					});
				}
			}
		};
		/* End TrackerMixin */


		/**
		 * Add tracking event listener to the series group, so the point graphics
		 * themselves act as trackers
		 */ 

		if (seriesTypes.column) {
			ColumnSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;	
		}

		if (seriesTypes.pie) {
			seriesTypes.pie.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
		}

		if (seriesTypes.scatter) {
			ScatterSeries.prototype.drawTracker = TrackerMixin.drawTrackerPoint;
		}

		/* 
		 * Extend Legend for item events 
		 */ 
		extend(Legend.prototype, {

			setItemEvents: function (item, legendItem, useHTML, itemStyle, itemHiddenStyle) {
			var legend = this;
			// Set the events on the item group, or in case of useHTML, the item itself (#1249)
			(useHTML ? legendItem : item.legendGroup).on('mouseover', function () {
					item.setState(HOVER_STATE);
					legendItem.css(legend.options.itemHoverStyle);
				})
				.on('mouseout', function () {
					legendItem.css(item.visible ? itemStyle : itemHiddenStyle);
					item.setState();
				})
				.on('click', function (event) {
					var strLegendItemClick = 'legendItemClick',
						fnLegendItemClick = function () {
							item.setVisible();
						};
						
					// Pass over the click/touch event. #4.
					event = {
						browserEvent: event
					};

					// click the name or symbol
					if (item.firePointEvent) { // point
						item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);
					} else {
						fireEvent(item, strLegendItemClick, event, fnLegendItemClick);
					}
				});
			},

			createCheckboxForItem: function (item) {
				var legend = this;

				item.checkbox = createElement('input', {
					type: 'checkbox',
					checked: item.selected,
					defaultChecked: item.selected // required by IE7
				}, legend.options.itemCheckboxStyle, legend.chart.container);

				addEvent(item.checkbox, 'click', function (event) {
					var target = event.target;
					fireEvent(item.series || item, 'checkboxClick', { // #3712
							checked: target.checked,
							item: item
						},
						function () {
							item.select();
						}
					);
				});
			}	
		});

		/* 
		 * Add pointer cursor to legend itemstyle in defaultOptions
		 */
		defaultOptions.legend.itemStyle.cursor = 'pointer';


		/* 
		 * Extend the Chart object with interaction
		 */

		extend(Chart.prototype, {
			/**
			 * Display the zoom button
			 */
			showResetZoom: function () {
				var chart = this,
					lang = defaultOptions.lang,
					btnOptions = chart.options.chart.resetZoomButton,
					theme = btnOptions.theme,
					states = theme.states,
					alignTo = btnOptions.relativeTo === 'chart' ? null : 'plotBox';
					
				this.resetZoomButton = chart.renderer.button(lang.resetZoom, null, null, function () { chart.zoomOut(); }, theme, states && states.hover)
					.attr({
						align: btnOptions.position.align,
						title: lang.resetZoomTitle
					})
					.add()
					.align(btnOptions.position, false, alignTo);
					
			},

			/**
			 * Zoom out to 1:1
			 */
			zoomOut: function () {
				var chart = this;
				fireEvent(chart, 'selection', { resetSelection: true }, function () { 
					chart.zoom();
				});
			},

			/**
			 * Zoom into a given portion of the chart given by axis coordinates
			 * @param {Object} event
			 */
			zoom: function (event) {
				var chart = this,
					hasZoomed,
					pointer = chart.pointer,
					displayButton = false,
					resetZoomButton;

				// If zoom is called with no arguments, reset the axes
				if (!event || event.resetSelection) {
					each(chart.axes, function (axis) {
						hasZoomed = axis.zoom();
					});
				} else { // else, zoom in on all axes
					each(event.xAxis.concat(event.yAxis), function (axisData) {
						var axis = axisData.axis,
							isXAxis = axis.isXAxis;

						// don't zoom more than minRange
						if (pointer[isXAxis ? 'zoomX' : 'zoomY'] || pointer[isXAxis ? 'pinchX' : 'pinchY']) {
							hasZoomed = axis.zoom(axisData.min, axisData.max);
							if (axis.displayBtn) {
								displayButton = true;
							}
						}
					});
				}
				
				// Show or hide the Reset zoom button
				resetZoomButton = chart.resetZoomButton;
				if (displayButton && !resetZoomButton) {
					chart.showResetZoom();
				} else if (!displayButton && isObject(resetZoomButton)) {
					chart.resetZoomButton = resetZoomButton.destroy();
				}
				

				// Redraw
				if (hasZoomed) {
					chart.redraw(
						pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100) // animation
					);
				}
			},

			/**
			 * Pan the chart by dragging the mouse across the pane. This function is called
			 * on mouse move, and the distance to pan is computed from chartX compared to
			 * the first chartX position in the dragging operation.
			 */
			pan: function (e, panning) {

				var chart = this,
					hoverPoints = chart.hoverPoints,
					doRedraw;

				// remove active points for shared tooltip
				if (hoverPoints) {
					each(hoverPoints, function (point) {
						point.setState();
					});
				}

				each(panning === 'xy' ? [1, 0] : [1], function (isX) { // xy is used in maps
					var mousePos = e[isX ? 'chartX' : 'chartY'],
						axis = chart[isX ? 'xAxis' : 'yAxis'][0],
						startPos = chart[isX ? 'mouseDownX' : 'mouseDownY'],
						halfPointRange = (axis.pointRange || 0) / 2,
						extremes = axis.getExtremes(),
						newMin = axis.toValue(startPos - mousePos, true) + halfPointRange,
						newMax = axis.toValue(startPos + chart[isX ? 'plotWidth' : 'plotHeight'] - mousePos, true) - halfPointRange,
						goingLeft = startPos > mousePos; // #3613

					if (axis.series.length && 
							(goingLeft || newMin > mathMin(extremes.dataMin, extremes.min)) && 
							(!goingLeft || newMax < mathMax(extremes.dataMax, extremes.max))) {
						axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });
						doRedraw = true;
					}

					chart[isX ? 'mouseDownX' : 'mouseDownY'] = mousePos; // set new reference for next run
				});

				if (doRedraw) {
					chart.redraw(false);
				}
				css(chart.container, { cursor: 'move' });
			}
		});

		/*
		 * Extend the Point object with interaction
		 */
		extend(Point.prototype, {
			/**
			 * Toggle the selection status of a point
			 * @param {Boolean} selected Whether to select or unselect the point.
			 * @param {Boolean} accumulate Whether to add to the previous selection. By default,
			 *		 this happens if the control key (Cmd on Mac) was pressed during clicking.
			 */
			select: function (selected, accumulate) {
				var point = this,
					series = point.series,
					chart = series.chart;

				selected = pick(selected, !point.selected);

				// fire the event with the defalut handler
				point.firePointEvent(selected ? 'select' : 'unselect', { accumulate: accumulate }, function () {
					point.selected = point.options.selected = selected;
					series.options.data[inArray(point, series.data)] = point.options;

					point.setState(selected && SELECT_STATE);

					// unselect all other points unless Ctrl or Cmd + click
					if (!accumulate) {
						each(chart.getSelectedPoints(), function (loopPoint) {
							if (loopPoint.selected && loopPoint !== point) {
								loopPoint.selected = loopPoint.options.selected = false;
								series.options.data[inArray(loopPoint, series.data)] = loopPoint.options;
								loopPoint.setState(NORMAL_STATE);
									loopPoint.firePointEvent('unselect');
							}
						});
					}
				});
			},

			/**
			 * Runs on mouse over the point
			 *
			 * @param {Object} e The event arguments
			 * @param {Boolean} byProximity Falsy for kd points that are closest to the mouse, or to 
			 *        actually hovered points. True for other points in shared tooltip.
			 */
			onMouseOver: function (e, byProximity) {
				var point = this,
					series = point.series,
					chart = series.chart,
					tooltip = chart.tooltip,
					hoverPoint = chart.hoverPoint;

				if (chart.hoverSeries !== series) {
					series.onMouseOver();
				}		

				// set normal state to previous series
				if (hoverPoint && hoverPoint !== point) {
					hoverPoint.onMouseOut();
				}

				if (point.series) { // It may have been destroyed, #4130

					// trigger the event
					point.firePointEvent('mouseOver');

					// update the tooltip
					if (tooltip && (!tooltip.shared || series.noSharedTooltip)) {
						tooltip.refresh(point, e);
					}

					// hover this
					point.setState(HOVER_STATE);
					if (!byProximity) {
						chart.hoverPoint = point;
					}
				}
			},

			/**
			 * Runs on mouse out from the point
			 */
			onMouseOut: function () {
				var chart = this.series.chart,
					hoverPoints = chart.hoverPoints;

				this.firePointEvent('mouseOut');

				if (!hoverPoints || inArray(this, hoverPoints) === -1) { // #887, #2240
					this.setState();
					chart.hoverPoint = null;
				}
			},

			/**
			 * Import events from the series' and point's options. Only do it on
			 * demand, to save processing time on hovering.
			 */
			importEvents: function () {
				if (!this.hasImportedEvents) {
					var point = this,
						options = merge(point.series.options.point, point.options),
						events = options.events,
						eventType;

					point.events = events;

					for (eventType in events) {
						addEvent(point, eventType, events[eventType]);
					}
					this.hasImportedEvents = true;

				}
			},

			/**
			 * Set the point's state
			 * @param {String} state
			 */
			setState: function (state, move) {
				var point = this,
					plotX = point.plotX,
					plotY = point.plotY,
					series = point.series,
					stateOptions = series.options.states,
					markerOptions = defaultPlotOptions[series.type].marker && series.options.marker,
					normalDisabled = markerOptions && !markerOptions.enabled,
					markerStateOptions = markerOptions && markerOptions.states[state],
					stateDisabled = markerStateOptions && markerStateOptions.enabled === false,
					stateMarkerGraphic = series.stateMarkerGraphic,
					pointMarker = point.marker || {},
					chart = series.chart,
					radius,
					halo = series.halo,
					haloOptions,
					newSymbol,
					pointAttr;

				state = state || NORMAL_STATE; // empty string
				pointAttr = point.pointAttr[state] || series.pointAttr[state];

				if (
						// already has this state
						(state === point.state && !move) ||
						// selected points don't respond to hover
						(point.selected && state !== SELECT_STATE) ||
						// series' state options is disabled
						(stateOptions[state] && stateOptions[state].enabled === false) ||
						// general point marker's state options is disabled
						(state && (stateDisabled || (normalDisabled && markerStateOptions.enabled === false))) ||
						// individual point marker's state options is disabled
						(state && pointMarker.states && pointMarker.states[state] && pointMarker.states[state].enabled === false) // #1610

					) {
					return;
				}

				// apply hover styles to the existing point
				if (point.graphic) {
					radius = markerOptions && point.graphic.symbolName && pointAttr.r;
					point.graphic.attr(merge(
						pointAttr,
						radius ? { // new symbol attributes (#507, #612)
							x: plotX - radius,
							y: plotY - radius,
							width: 2 * radius,
							height: 2 * radius
						} : {}
					));

					// Zooming in from a range with no markers to a range with markers
					if (stateMarkerGraphic) {
						stateMarkerGraphic.hide();
					}
				} else {
					// if a graphic is not applied to each point in the normal state, create a shared
					// graphic for the hover state
					if (state && markerStateOptions) {
						radius = markerStateOptions.radius;
						newSymbol = pointMarker.symbol || series.symbol;

						// If the point has another symbol than the previous one, throw away the
						// state marker graphic and force a new one (#1459)
						if (stateMarkerGraphic && stateMarkerGraphic.currentSymbol !== newSymbol) {
							stateMarkerGraphic = stateMarkerGraphic.destroy();
						}

						// Add a new state marker graphic
						if (!stateMarkerGraphic) {
							if (newSymbol) {
								series.stateMarkerGraphic = stateMarkerGraphic = chart.renderer.symbol(
									newSymbol,
									plotX - radius,
									plotY - radius,
									2 * radius,
									2 * radius
								)
								.attr(pointAttr)
								.add(series.markerGroup);
								stateMarkerGraphic.currentSymbol = newSymbol;
							}

						// Move the existing graphic
						} else {
							stateMarkerGraphic[move ? 'animate' : 'attr']({ // #1054
								x: plotX - radius,
								y: plotY - radius
							});
						}
					}

					if (stateMarkerGraphic) {
						stateMarkerGraphic[state && chart.isInsidePlot(plotX, plotY, chart.inverted) ? 'show' : 'hide'](); // #2450
						stateMarkerGraphic.element.point = point; // #4310
					}
				}

				// Show me your halo
				haloOptions = stateOptions[state] && stateOptions[state].halo;
				if (haloOptions && haloOptions.size) {
					if (!halo) {
						series.halo = halo = chart.renderer.path()
							.add(chart.seriesGroup);
					}
					halo.attr(extend({
						fill: Color(point.color || series.color).setOpacity(haloOptions.opacity).get()
					}, haloOptions.attributes))[move ? 'animate' : 'attr']({
						d: point.haloPath(haloOptions.size)
					});
				} else if (halo) {
					halo.attr({ d: [] });
				}

				point.state = state;
			},

			haloPath: function (size) {
				var series = this.series,
					chart = series.chart,
					plotBox = series.getPlotBox(),
					inverted = chart.inverted;

				return chart.renderer.symbols.circle(
					plotBox.translateX + (inverted ? series.yAxis.len - this.plotY : this.plotX) - size, 
					plotBox.translateY + (inverted ? series.xAxis.len - this.plotX : this.plotY) - size, 
					size * 2, 
					size * 2
				);
			}
		});

		/*
		 * Extend the Series object with interaction
		 */

		extend(Series.prototype, {
			/**
			 * Series mouse over handler
			 */
			onMouseOver: function () {
				var series = this,
					chart = series.chart,
					hoverSeries = chart.hoverSeries;

				// set normal state to previous series
				if (hoverSeries && hoverSeries !== series) {
					hoverSeries.onMouseOut();
				}

				// trigger the event, but to save processing time,
				// only if defined
				if (series.options.events.mouseOver) {
					fireEvent(series, 'mouseOver');
				}

				// hover this
				series.setState(HOVER_STATE);
				chart.hoverSeries = series;
			},

			/**
			 * Series mouse out handler
			 */
			onMouseOut: function () {
				// trigger the event only if listeners exist
				var series = this,
					options = series.options,
					chart = series.chart,
					tooltip = chart.tooltip,
					hoverPoint = chart.hoverPoint;

				chart.hoverSeries = null; // #182, set to null before the mouseOut event fires

				// trigger mouse out on the point, which must be in this series
				if (hoverPoint) {
					hoverPoint.onMouseOut();
				}

				// fire the mouse out event
				if (series && options.events.mouseOut) {
					fireEvent(series, 'mouseOut');
				}


				// hide the tooltip
				if (tooltip && !options.stickyTracking && (!tooltip.shared || series.noSharedTooltip)) {
					tooltip.hide();
				}

				// set normal state
				series.setState();
			},

			/**
			 * Set the state of the graph
			 */
			setState: function (state) {
				var series = this,
					options = series.options,
					graph = series.graph,
					stateOptions = options.states,
					lineWidth = options.lineWidth,
					attribs,
					i = 0;

				state = state || NORMAL_STATE;

				if (series.state !== state) {
					series.state = state;

					if (stateOptions[state] && stateOptions[state].enabled === false) {
						return;
					}

					if (state) {
						lineWidth = stateOptions[state].lineWidth || lineWidth + (stateOptions[state].lineWidthPlus || 0); // #4035
					}

					if (graph && !graph.dashstyle) { // hover is turned off for dashed lines in VML
						attribs = {
							'stroke-width': lineWidth
						};
						// use attr because animate will cause any other animation on the graph to stop
						graph.attr(attribs);
						while (series['zoneGraph' + i]) {
							series['zoneGraph' + i].attr(attribs);
							i = i + 1;
						}
					}
				}
			},

			/**
			 * Set the visibility of the graph
			 *
			 * @param vis {Boolean} True to show the series, false to hide. If UNDEFINED,
			 *				the visibility is toggled.
			 */
			setVisible: function (vis, redraw) {
				var series = this,
					chart = series.chart,
					legendItem = series.legendItem,
					showOrHide,
					ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries,
					oldVisibility = series.visible;

				// if called without an argument, toggle visibility
				series.visible = vis = series.userOptions.visible = vis === UNDEFINED ? !oldVisibility : vis;
				showOrHide = vis ? 'show' : 'hide';

				// show or hide elements
				each(['group', 'dataLabelsGroup', 'markerGroup', 'tracker'], function (key) {
					if (series[key]) {
						series[key][showOrHide]();
					}
				});


				// hide tooltip (#1361)
				if (chart.hoverSeries === series || (chart.hoverPoint && chart.hoverPoint.series) === series) {
					series.onMouseOut();
				}


				if (legendItem) {
					chart.legend.colorizeItem(series, vis);
				}


				// rescale or adapt to resized chart
				series.isDirty = true;
				// in a stack, all other series are affected
				if (series.options.stacking) {
					each(chart.series, function (otherSeries) {
						if (otherSeries.options.stacking && otherSeries.visible) {
							otherSeries.isDirty = true;
						}
					});
				}

				// show or hide linked series
				each(series.linkedSeries, function (otherSeries) {
					otherSeries.setVisible(vis, false);
				});

				if (ignoreHiddenSeries) {
					chart.isDirtyBox = true;
				}
				if (redraw !== false) {
					chart.redraw();
				}

				fireEvent(series, showOrHide);
			},

			/**
			 * Show the graph
			 */
			show: function () {
				this.setVisible(true);
			},

			/**
			 * Hide the graph
			 */
			hide: function () {
				this.setVisible(false);
			},


			/**
			 * Set the selected state of the graph
			 *
			 * @param selected {Boolean} True to select the series, false to unselect. If
			 *				UNDEFINED, the selection state is toggled.
			 */
			select: function (selected) {
				var series = this;
				// if called without an argument, toggle
				series.selected = selected = (selected === UNDEFINED) ? !series.selected : selected;

				if (series.checkbox) {
					series.checkbox.checked = selected;
				}

				fireEvent(series, selected ? 'select' : 'unselect');
			},

			drawTracker: TrackerMixin.drawTrackerGraph
		});/* ****************************************************************************
		 * Start ordinal axis logic                                                   *
		 *****************************************************************************/


		wrap(Series.prototype, 'init', function (proceed) {
			var series = this,
				xAxis;

			// call the original function
			proceed.apply(this, Array.prototype.slice.call(arguments, 1));

			xAxis = series.xAxis;

			// Destroy the extended ordinal index on updated data
			if (xAxis && xAxis.options.ordinal) {
				addEvent(series, 'updatedData', function () {
					delete xAxis.ordinalIndex;
				});
			}
		});

		/**
		 * In an ordinal axis, there might be areas with dense consentrations of points, then large
		 * gaps between some. Creating equally distributed ticks over this entire range
		 * may lead to a huge number of ticks that will later be removed. So instead, break the
		 * positions up in segments, find the tick positions for each segment then concatenize them.
		 * This method is used from both data grouping logic and X axis tick position logic.
		 */
		wrap(Axis.prototype, 'getTimeTicks', function (proceed, normalizedInterval, min, max, startOfWeek, positions, closestDistance, findHigherRanks) {

			var start = 0,
				end = 0,
				segmentPositions,
				higherRanks = {},
				hasCrossedHigherRank,
				info,
				posLength,
				outsideMax,
				groupPositions = [],
				lastGroupPosition = -Number.MAX_VALUE,
				tickPixelIntervalOption = this.options.tickPixelInterval;

			// The positions are not always defined, for example for ordinal positions when data
			// has regular interval (#1557, #2090)
			if ((!this.options.ordinal && !this.options.breaks) || !positions || positions.length < 3 || min === UNDEFINED) {
				return proceed.call(this, normalizedInterval, min, max, startOfWeek);
			}

			// Analyze the positions array to split it into segments on gaps larger than 5 times
			// the closest distance. The closest distance is already found at this point, so
			// we reuse that instead of computing it again.
			posLength = positions.length;

			for (; end < posLength; end++) {

				outsideMax = end && positions[end - 1] > max;

				if (positions[end] < min) { // Set the last position before min
					start = end;
				}

				if (end === posLength - 1 || positions[end + 1] - positions[end] > closestDistance * 5 || outsideMax) {

					// For each segment, calculate the tick positions from the getTimeTicks utility
					// function. The interval will be the same regardless of how long the segment is.
					if (positions[end] > lastGroupPosition) { // #1475

						segmentPositions = proceed.call(this, normalizedInterval, positions[start], positions[end], startOfWeek);

						// Prevent duplicate groups, for example for multiple segments within one larger time frame (#1475)
						while (segmentPositions.length && segmentPositions[0] <= lastGroupPosition) {
							segmentPositions.shift();
						}
						if (segmentPositions.length) {
							lastGroupPosition = segmentPositions[segmentPositions.length - 1];
						}

						groupPositions = groupPositions.concat(segmentPositions);
					}
					// Set start of next segment
					start = end + 1;
				}

				if (outsideMax) {
					break;
				}
			}

			// Get the grouping info from the last of the segments. The info is the same for
			// all segments.
			info = segmentPositions.info;

			// Optionally identify ticks with higher rank, for example when the ticks
			// have crossed midnight.
			if (findHigherRanks && info.unitRange <= timeUnits.hour) {
				end = groupPositions.length - 1;

				// Compare points two by two
				for (start = 1; start < end; start++) {
					if (dateFormat('%d', groupPositions[start]) !== dateFormat('%d', groupPositions[start - 1])) {
						higherRanks[groupPositions[start]] = 'day';
						hasCrossedHigherRank = true;
					}
				}

				// If the complete array has crossed midnight, we want to mark the first
				// positions also as higher rank
				if (hasCrossedHigherRank) {
					higherRanks[groupPositions[0]] = 'day';
				}
				info.higherRanks = higherRanks;
			}

			// Save the info
			groupPositions.info = info;



			// Don't show ticks within a gap in the ordinal axis, where the space between
			// two points is greater than a portion of the tick pixel interval
			if (findHigherRanks && defined(tickPixelIntervalOption)) { // check for squashed ticks

				var length = groupPositions.length,
					i = length,
					itemToRemove,
					translated,
					translatedArr = [],
					lastTranslated,
					medianDistance,
					distance,
					distances = [];

				// Find median pixel distance in order to keep a reasonably even distance between
				// ticks (#748)
				while (i--) {
					translated = this.translate(groupPositions[i]);
					if (lastTranslated) {
						distances[i] = lastTranslated - translated;
					}
					translatedArr[i] = lastTranslated = translated;
				}
				distances.sort();
				medianDistance = distances[mathFloor(distances.length / 2)];
				if (medianDistance < tickPixelIntervalOption * 0.6) {
					medianDistance = null;
				}

				// Now loop over again and remove ticks where needed
				i = groupPositions[length - 1] > max ? length - 1 : length; // #817
				lastTranslated = undefined;
				while (i--) {
					translated = translatedArr[i];
					distance = lastTranslated - translated;

					// Remove ticks that are closer than 0.6 times the pixel interval from the one to the right,
					// but not if it is close to the median distance (#748).
					if (lastTranslated && distance < tickPixelIntervalOption * 0.8 &&
							(medianDistance === null || distance < medianDistance * 0.8)) {

						// Is this a higher ranked position with a normal position to the right?
						if (higherRanks[groupPositions[i]] && !higherRanks[groupPositions[i + 1]]) {

							// Yes: remove the lower ranked neighbour to the right
							itemToRemove = i + 1;
							lastTranslated = translated; // #709

						} else {

							// No: remove this one
							itemToRemove = i;
						}

						groupPositions.splice(itemToRemove, 1);

					} else {
						lastTranslated = translated;
					}
				}
			}
			return groupPositions;
		});

		// Extend the Axis prototype
		extend(Axis.prototype, {

			/**
			 * Calculate the ordinal positions before tick positions are calculated.
			 */
			beforeSetTickPositions: function () {
				var axis = this,
					len,
					ordinalPositions = [],
					useOrdinal = false,
					dist,
					extremes = axis.getExtremes(),
					min = extremes.min,
					max = extremes.max,
					minIndex,
					maxIndex,
					slope,
					hasBreaks = axis.isXAxis && !!axis.options.breaks,
					isOrdinal = axis.options.ordinal,
					i;

				// apply the ordinal logic
				if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?

					each(axis.series, function (series, i) {

						if (series.visible !== false && (series.takeOrdinalPosition !== false || hasBreaks)) {

							// concatenate the processed X data into the existing positions, or the empty array
							ordinalPositions = ordinalPositions.concat(series.processedXData);
							len = ordinalPositions.length;

							// remove duplicates (#1588)
							ordinalPositions.sort(function (a, b) {
								return a - b; // without a custom function it is sorted as strings
							});

							if (len) {
								i = len - 1;
								while (i--) {
									if (ordinalPositions[i] === ordinalPositions[i + 1]) {
										ordinalPositions.splice(i, 1);
									}
								}
							}
						}

					});

					// cache the length
					len = ordinalPositions.length;

					// Check if we really need the overhead of mapping axis data against the ordinal positions.
					// If the series consist of evenly spaced data any way, we don't need any ordinal logic.
					if (len > 2) { // two points have equal distance by default
						dist = ordinalPositions[1] - ordinalPositions[0];
						i = len - 1;
						while (i-- && !useOrdinal) {
							if (ordinalPositions[i + 1] - ordinalPositions[i] !== dist) {
								useOrdinal = true;
							}
						}

						// When zooming in on a week, prevent axis padding for weekends even though the data within
						// the week is evenly spaced.
						if (!axis.options.keepOrdinalPadding && (ordinalPositions[0] - min > dist || max - ordinalPositions[ordinalPositions.length - 1] > dist)) {
							useOrdinal = true;
						}
					}

					// Record the slope and offset to compute the linear values from the array index.
					// Since the ordinal positions may exceed the current range, get the start and
					// end positions within it (#719, #665b)
					if (useOrdinal) {

						// Register
						axis.ordinalPositions = ordinalPositions;

						// This relies on the ordinalPositions being set. Use mathMax and mathMin to prevent
						// padding on either sides of the data.
						minIndex = axis.val2lin(mathMax(min, ordinalPositions[0]), true);
						maxIndex = mathMax(axis.val2lin(mathMin(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339

						// Set the slope and offset of the values compared to the indices in the ordinal positions
						axis.ordinalSlope = slope = (max - min) / (maxIndex - minIndex);
						axis.ordinalOffset = min - (minIndex * slope);

					} else {
						axis.ordinalPositions = axis.ordinalSlope = axis.ordinalOffset = UNDEFINED;
					}
				}
				axis.doPostTranslate = (isOrdinal && useOrdinal) || hasBreaks; // #3818, #4196
				axis.groupIntervalFactor = null; // reset for next run
			},
			/**
			 * Translate from a linear axis value to the corresponding ordinal axis position. If there
			 * are no gaps in the ordinal axis this will be the same. The translated value is the value
			 * that the point would have if the axis were linear, using the same min and max.
			 *
			 * @param Number val The axis value
			 * @param Boolean toIndex Whether to return the index in the ordinalPositions or the new value
			 */
			val2lin: function (val, toIndex) {
				var axis = this,
					ordinalPositions = axis.ordinalPositions;

				if (!ordinalPositions) {
					return val;

				} else {

					var ordinalLength = ordinalPositions.length,
						i,
						distance,
						ordinalIndex;

					// first look for an exact match in the ordinalpositions array
					i = ordinalLength;
					while (i--) {
						if (ordinalPositions[i] === val) {
							ordinalIndex = i;
							break;
						}
					}

					// if that failed, find the intermediate position between the two nearest values
					i = ordinalLength - 1;
					while (i--) {
						if (val > ordinalPositions[i] || i === 0) { // interpolate
							distance = (val - ordinalPositions[i]) / (ordinalPositions[i + 1] - ordinalPositions[i]); // something between 0 and 1
							ordinalIndex = i + distance;
							break;
						}
					}
					return toIndex ?
						ordinalIndex :
						axis.ordinalSlope * (ordinalIndex || 0) + axis.ordinalOffset;
				}
			},
			/**
			 * Translate from linear (internal) to axis value
			 *
			 * @param Number val The linear abstracted value
			 * @param Boolean fromIndex Translate from an index in the ordinal positions rather than a value
			 */
			lin2val: function (val, fromIndex) {
				var axis = this,
					ordinalPositions = axis.ordinalPositions;

				if (!ordinalPositions) { // the visible range contains only equally spaced values
					return val;

				} else {

					var ordinalSlope = axis.ordinalSlope,
						ordinalOffset = axis.ordinalOffset,
						i = ordinalPositions.length - 1,
						linearEquivalentLeft,
						linearEquivalentRight,
						distance;


					// Handle the case where we translate from the index directly, used only
					// when panning an ordinal axis
					if (fromIndex) {

						if (val < 0) { // out of range, in effect panning to the left
							val = ordinalPositions[0];
						} else if (val > i) { // out of range, panning to the right
							val = ordinalPositions[i];
						} else { // split it up
							i = mathFloor(val);
							distance = val - i; // the decimal
						}

					// Loop down along the ordinal positions. When the linear equivalent of i matches
					// an ordinal position, interpolate between the left and right values.
					} else {
						while (i--) {
							linearEquivalentLeft = (ordinalSlope * i) + ordinalOffset;
							if (val >= linearEquivalentLeft) {
								linearEquivalentRight = (ordinalSlope * (i + 1)) + ordinalOffset;
								distance = (val - linearEquivalentLeft) / (linearEquivalentRight - linearEquivalentLeft); // something between 0 and 1
								break;
							}
						}
					}

					// If the index is within the range of the ordinal positions, return the associated
					// or interpolated value. If not, just return the value
					return distance !== UNDEFINED && ordinalPositions[i] !== UNDEFINED ?
						ordinalPositions[i] + (distance ? distance * (ordinalPositions[i + 1] - ordinalPositions[i]) : 0) :
						val;
				}
			},
			/**
			 * Get the ordinal positions for the entire data set. This is necessary in chart panning
			 * because we need to find out what points or data groups are available outside the
			 * visible range. When a panning operation starts, if an index for the given grouping
			 * does not exists, it is created and cached. This index is deleted on updated data, so
			 * it will be regenerated the next time a panning operation starts.
			 */
			getExtendedPositions: function () {
				var axis = this,
					chart = axis.chart,
					grouping = axis.series[0].currentDataGrouping,
					ordinalIndex = axis.ordinalIndex,
					key = grouping ? grouping.count + grouping.unitName : 'raw',
					extremes = axis.getExtremes(),
					fakeAxis,
					fakeSeries;

				// If this is the first time, or the ordinal index is deleted by updatedData,
				// create it.
				if (!ordinalIndex) {
					ordinalIndex = axis.ordinalIndex = {};
				}


				if (!ordinalIndex[key]) {

					// Create a fake axis object where the extended ordinal positions are emulated
					fakeAxis = {
						series: [],
						getExtremes: function () {
							return {
								min: extremes.dataMin,
								max: extremes.dataMax
							};
						},
						options: {
							ordinal: true
						},
						val2lin: Axis.prototype.val2lin // #2590
					};

					// Add the fake series to hold the full data, then apply processData to it
					each(axis.series, function (series) {
						fakeSeries = {
							xAxis: fakeAxis,
							xData: series.xData,
							chart: chart,
							destroyGroupedData: noop
						};
						fakeSeries.options = {
							dataGrouping : grouping ? {
								enabled: true,
								forced: true,
								approximation: 'open', // doesn't matter which, use the fastest
								units: [[grouping.unitName, [grouping.count]]]
							} : {
								enabled: false
							}
						};
						series.processData.apply(fakeSeries);

						fakeAxis.series.push(fakeSeries);
					});

					// Run beforeSetTickPositions to compute the ordinalPositions
					axis.beforeSetTickPositions.apply(fakeAxis);

					// Cache it
					ordinalIndex[key] = fakeAxis.ordinalPositions;
				}
				return ordinalIndex[key];
			},

			/**
			 * Find the factor to estimate how wide the plot area would have been if ordinal
			 * gaps were included. This value is used to compute an imagined plot width in order
			 * to establish the data grouping interval.
			 *
			 * A real world case is the intraday-candlestick
			 * example. Without this logic, it would show the correct data grouping when viewing
			 * a range within each day, but once moving the range to include the gap between two
			 * days, the interval would include the cut-away night hours and the data grouping
			 * would be wrong. So the below method tries to compensate by identifying the most
			 * common point interval, in this case days.
			 *
			 * An opposite case is presented in issue #718. We have a long array of daily data,
			 * then one point is appended one hour after the last point. We expect the data grouping
			 * not to change.
			 *
			 * In the future, if we find cases where this estimation doesn't work optimally, we
			 * might need to add a second pass to the data grouping logic, where we do another run
			 * with a greater interval if the number of data groups is more than a certain fraction
			 * of the desired group count.
			 */
			getGroupIntervalFactor: function (xMin, xMax, series) {
				var i = 0,
					processedXData = series.processedXData,
					len = processedXData.length,
					distances = [],
					median,
					groupIntervalFactor = this.groupIntervalFactor;

				// Only do this computation for the first series, let the other inherit it (#2416)
				if (!groupIntervalFactor) {

					// Register all the distances in an array
					for (; i < len - 1; i++) {
						distances[i] = processedXData[i + 1] - processedXData[i];
					}

					// Sort them and find the median
					distances.sort(function (a, b) {
							return a - b;
					});
					median = distances[mathFloor(len / 2)];

					// Compensate for series that don't extend through the entire axis extent. #1675.
					xMin = mathMax(xMin, processedXData[0]);
					xMax = mathMin(xMax, processedXData[len - 1]);

					this.groupIntervalFactor = groupIntervalFactor = (len * median) / (xMax - xMin);
				}

				// Return the factor needed for data grouping
				return groupIntervalFactor;
			},

			/**
			 * Make the tick intervals closer because the ordinal gaps make the ticks spread out or cluster
			 */
			postProcessTickInterval: function (tickInterval) {
				// TODO: http://jsfiddle.net/highcharts/FQm4E/1/
				// This is a case where this algorithm doesn't work optimally. In this case, the
				// tick labels are spread out per week, but all the gaps reside within weeks. So
				// we have a situation where the labels are courser than the ordinal gaps, and
				// thus the tick interval should not be altered
				var ordinalSlope = this.ordinalSlope;


				if (ordinalSlope) {
					if (!this.options.breaks) {
						return tickInterval / (ordinalSlope / this.closestPointRange); 
					} else {
						return this.closestPointRange;
					}
				} else {
					return tickInterval;
				}
			}
		});

		// Extending the Chart.pan method for ordinal axes
		wrap(Chart.prototype, 'pan', function (proceed, e) {
			var chart = this,
				xAxis = chart.xAxis[0],
				chartX = e.chartX,
				runBase = false;

			if (xAxis.options.ordinal && xAxis.series.length) {

				var mouseDownX = chart.mouseDownX,
					extremes = xAxis.getExtremes(),
					dataMax = extremes.dataMax,
					min = extremes.min,
					max = extremes.max,
					trimmedRange,
					hoverPoints = chart.hoverPoints,
					closestPointRange = xAxis.closestPointRange,
					pointPixelWidth = xAxis.translationSlope * (xAxis.ordinalSlope || closestPointRange),
					movedUnits = (mouseDownX - chartX) / pointPixelWidth, // how many ordinal units did we move?
					extendedAxis = { ordinalPositions: xAxis.getExtendedPositions() }, // get index of all the chart's points
					ordinalPositions,
					searchAxisLeft,
					lin2val = xAxis.lin2val,
					val2lin = xAxis.val2lin,
					searchAxisRight;

				if (!extendedAxis.ordinalPositions) { // we have an ordinal axis, but the data is equally spaced
					runBase = true;

				} else if (mathAbs(movedUnits) > 1) {

					// Remove active points for shared tooltip
					if (hoverPoints) {
						each(hoverPoints, function (point) {
							point.setState();
						});
					}

					if (movedUnits < 0) {
						searchAxisLeft = extendedAxis;
						searchAxisRight = xAxis.ordinalPositions ? xAxis : extendedAxis;
					} else {
						searchAxisLeft = xAxis.ordinalPositions ? xAxis : extendedAxis;
						searchAxisRight = extendedAxis;
					}

					// In grouped data series, the last ordinal position represents the grouped data, which is
					// to the left of the real data max. If we don't compensate for this, we will be allowed
					// to pan grouped data series passed the right of the plot area.
					ordinalPositions = searchAxisRight.ordinalPositions;
					if (dataMax > ordinalPositions[ordinalPositions.length - 1]) {
						ordinalPositions.push(dataMax);
					}

					// Get the new min and max values by getting the ordinal index for the current extreme,
					// then add the moved units and translate back to values. This happens on the
					// extended ordinal positions if the new position is out of range, else it happens
					// on the current x axis which is smaller and faster.
					chart.fixedRange = max - min;
					trimmedRange = xAxis.toFixedRange(null, null,
						lin2val.apply(searchAxisLeft, [
							val2lin.apply(searchAxisLeft, [min, true]) + movedUnits, // the new index
							true // translate from index
						]),
						lin2val.apply(searchAxisRight, [
							val2lin.apply(searchAxisRight, [max, true]) + movedUnits, // the new index
							true // translate from index
						])
					);

					// Apply it if it is within the available data range
					if (trimmedRange.min >= mathMin(extremes.dataMin, min) && trimmedRange.max <= mathMax(dataMax, max)) {
						xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });
					}

					chart.mouseDownX = chartX; // set new reference for next run
					css(chart.container, { cursor: 'move' });
				}

			} else {
				runBase = true;
			}

			// revert to the linear chart.pan version
			if (runBase) {
				// call the original function
				proceed.apply(this, Array.prototype.slice.call(arguments, 1));
			}
		});



		/**
		 * Extend getSegments by identifying gaps in the ordinal data so that we can draw a gap in the
		 * line or area
		 */
		wrap(Series.prototype, 'getSegments', function (proceed) {

			var series = this,
				segments,
				gapSize = series.options.gapSize,
				xAxis = series.xAxis;

			// call base method
			proceed.apply(this, Array.prototype.slice.call(arguments, 1));

			if (gapSize) {

				// properties
				segments = series.segments;

				// extension for ordinal breaks
				each(segments, function (segment, no) {
					var i = segment.length - 1;
					while (i--) {
						if (segment[i].x < xAxis.min && segment[i + 1].x > xAxis.max) {
							segments.length = 0;
							break;
						} else if (segment[i + 1].x - segment[i].x > xAxis.closestPointRange * gapSize) {
							segments.splice( // insert after this one
								no + 1,
								0,
								segment.splice(i + 1, segment.length - i)
							);
						}
					}
				});
			}
		});

		/* ****************************************************************************
		 * End ordinal axis logic                                                   *
		 *****************************************************************************/
		/**
		 * Highstock JS v2.1.8-modified ()
		 * Highcharts Broken Axis module
		 * 
		 * Author: Stephane Vanraes, Torstein Honsi
		 * License: www.highcharts.com/license
		 */

		/*global HighchartsAdapter*/
		(function (H) {	

			"use strict";

			var pick = H.pick,
				wrap = H.wrap,
				extend = H.extend,
				fireEvent = HighchartsAdapter.fireEvent,
				Axis = H.Axis,
				Series = H.Series;

			function stripArguments() {
				return Array.prototype.slice.call(arguments, 1);
			}

			extend(Axis.prototype, {
				isInBreak: function (brk, val) {
					var ret,
						repeat = brk.repeat || Infinity,
						from = brk.from,
						length = brk.to - brk.from,
						test = (val >= from ? (val - from) % repeat :  repeat - ((from - val) % repeat));

					if (!brk.inclusive) {
						ret = test < length && test !== 0;
					} else {
						ret = test <= length;
					}
					return ret;
				},

				isInAnyBreak: function (val, testKeep) {

					var breaks = this.options.breaks,
						i = breaks && breaks.length,
						inbrk,
						keep,
						ret;

					
					if (i) { 

						while (i--) {
							if (this.isInBreak(breaks[i], val)) {
								inbrk = true;
								if (!keep) {
									keep = pick(breaks[i].showPoints, this.isXAxis ? false : true);
								}
							}
						}

						if (inbrk && testKeep) {
							ret = inbrk && !keep;
						} else {
							ret = inbrk;
						}
					}
					return ret;
				}
			});

			wrap(Axis.prototype, 'setTickPositions', function (proceed) {
				proceed.apply(this, Array.prototype.slice.call(arguments, 1));
				
				if (this.options.breaks) {
					var axis = this,
						tickPositions = this.tickPositions,
						info = this.tickPositions.info,
						newPositions = [],
						i;

					for (i = 0; i < tickPositions.length; i++) {
						if (!axis.isInAnyBreak(tickPositions[i])) {
							newPositions.push(tickPositions[i]);
						}
					}

					this.tickPositions = newPositions;
					this.tickPositions.info = info;
				}
			});
			
			wrap(Axis.prototype, 'init', function (proceed, chart, userOptions) {
				// Force Axis to be not-ordinal when breaks are defined
				if (userOptions.breaks && userOptions.breaks.length) {
					userOptions.ordinal = false;
				}

				proceed.call(this, chart, userOptions);

				if (this.options.breaks) {

					var axis = this;
					
					axis.doPostTranslate = true;

					this.val2lin = function (val) {
						var nval = val,
							brk,
							i;

						for (i = 0; i < axis.breakArray.length; i++) {
							brk = axis.breakArray[i];
							if (brk.to <= val) {
								nval -= brk.len;
							} else if (brk.from >= val) {
								break;
							} else if (axis.isInBreak(brk, val)) {
								nval -= (val - brk.from);
								break;
							}
						}

						return nval;
					};
					
					this.lin2val = function (val) {
						var nval = val,
							brk,
							i;

						for (i = 0; i < axis.breakArray.length; i++) {
							brk = axis.breakArray[i];
							if (brk.from >= nval) {
								break;
							} else if (brk.to < nval) {
								nval += brk.len;
							} else if (axis.isInBreak(brk, nval)) {
								nval += brk.len;
							}
						}
						return nval;
					};

					this.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {
						// If trying to set extremes inside a break, extend it to before and after the break ( #3857 )
						while (this.isInAnyBreak(newMin)) {
							newMin -= this.closestPointRange;
						}				
						while (this.isInAnyBreak(newMax)) {
							newMax -= this.closestPointRange;
						}
						Axis.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);
					};

					this.setAxisTranslation = function (saveOld) {
						Axis.prototype.setAxisTranslation.call(this, saveOld);

						var breaks = axis.options.breaks,
							breakArrayT = [],	// Temporary one
							breakArray = [],
							length = 0, 
							inBrk,
							repeat,
							brk,
							min = axis.userMin || axis.min,
							max = axis.userMax || axis.max,
							start,
							i,
							j;

						// Min & max check (#4247)
						for (i in breaks) {
							brk = breaks[i];
							repeat = brk.repeat || Infinity;
							if (axis.isInBreak(brk, min)) {
								min += (brk.to % repeat) - (min % repeat);
							}
							if (axis.isInBreak(brk, max)) {
								max -= (max % repeat) - (brk.from % repeat);
							}
						}

						// Construct an array holding all breaks in the axis
						for (i in breaks) {
							brk = breaks[i];
							start = brk.from;
							repeat = brk.repeat || Infinity;

							while (start - repeat > min) {
								start -= repeat;
							}
							while (start < min) {
								start += repeat;
							}

							for (j = start; j < max; j += repeat) {
								breakArrayT.push({
									value: j,
									move: 'in'
								});
								breakArrayT.push({
									value: j + (brk.to - brk.from),
									move: 'out',
									size: brk.breakSize
								});
							}
						}

						breakArrayT.sort(function (a, b) {
							if (a.value === b.value) {
								return (a.move === 'in' ? 0 : 1) - (b.move === 'in' ? 0 : 1);
							} else {
								return a.value - b.value;
							}
						});
						
						// Simplify the breaks
						inBrk = 0;
						start = min;

						for (i in breakArrayT) {
							brk = breakArrayT[i];
							inBrk += (brk.move === 'in' ? 1 : -1);

							if (inBrk === 1 && brk.move === 'in') {
								start = brk.value;
							}
							if (inBrk === 0) {
								breakArray.push({
									from: start,
									to: brk.value,
									len: brk.value - start - (brk.size || 0)
								});
								length += brk.value - start - (brk.size || 0);
							}
						}

						axis.breakArray = breakArray;

						fireEvent(axis, 'afterBreaks');
						
						axis.transA *= ((max - axis.min) / (max - min - length));

						axis.min = min;
						axis.max = max;
					};
				}
			});

			wrap(Series.prototype, 'generatePoints', function (proceed) {

				proceed.apply(this, stripArguments(arguments));

				var series = this,
					xAxis = series.xAxis,
					yAxis = series.yAxis,
					points = series.points,
					point,
					i = points.length,
					connectNulls = series.options.connectNulls,
					nullGap;


				if (xAxis && yAxis && (xAxis.options.breaks || yAxis.options.breaks)) {
					while (i--) {
						point = points[i];

						nullGap = point.y === null && connectNulls === false; // respect nulls inside the break (#4275)
						if (!nullGap && (xAxis.isInAnyBreak(point.x, true) || yAxis.isInAnyBreak(point.y, true))) {
							points.splice(i, 1);
							if (this.data[i]) {
								this.data[i].destroyElements(); // removes the graphics for this point if they exist
							}
						}
					}
				}

			});

			wrap(H.seriesTypes.column.prototype, 'drawPoints', function (proceed) {
				proceed.apply(this);

				var series = this,
					points = series.points,
					yAxis = series.yAxis,
					breaks = yAxis.breakArray || [],
					threshold = pick(this.options.threshold, yAxis.min),
					eventName,
					point,
					brk,
					i,
					j,
					y;

				for (i = 0; i < points.length; i++) {
					point = points[i];
					y = point.stackY || point.y;
					for (j = 0; j < breaks.length; j++) {
						brk = breaks[j];
						eventName = false;

						if ((threshold < brk.from && y > brk.to) || (threshold > brk.from && y < brk.from)) { 
								eventName = 'pointBreak';
						} else if ((threshold < brk.from && y > brk.from && y < brk.to) || (threshold > brk.from && y > brk.to && y < brk.from)) { // point falls inside the break
								eventName = 'pointInBreak'; // docs
						} 
						if (eventName) {
							fireEvent(yAxis, eventName, {point: point, brk: brk});
						}
					}
				}

			});
		}(Highcharts));
		/* ****************************************************************************
		 * Start data grouping module												 *
		 ******************************************************************************/
		/*jslint white:true */
		var DATA_GROUPING = 'dataGrouping',
			seriesProto = Series.prototype,
			tooltipProto = Tooltip.prototype,
			baseProcessData = seriesProto.processData,
			baseGeneratePoints = seriesProto.generatePoints,
			baseDestroy = seriesProto.destroy,
			baseTooltipFooterHeaderFormatter = tooltipProto.tooltipFooterHeaderFormatter,
			NUMBER = 'number',

			commonOptions = {
				approximation: 'average', // average, open, high, low, close, sum
				//enabled: null, // (true for stock charts, false for basic),
				//forced: undefined,
				groupPixelWidth: 2,
				// the first one is the point or start value, the second is the start value if we're dealing with range,
				// the third one is the end value if dealing with a range
				dateTimeLabelFormats: {
					millisecond: ['%A, %b %e, %H:%M:%S.%L', '%A, %b %e, %H:%M:%S.%L', '-%H:%M:%S.%L'],
					second: ['%A, %b %e, %H:%M:%S', '%A, %b %e, %H:%M:%S', '-%H:%M:%S'],
					minute: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],
					hour: ['%A, %b %e, %H:%M', '%A, %b %e, %H:%M', '-%H:%M'],
					day: ['%A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],
					week: ['Week from %A, %b %e, %Y', '%A, %b %e', '-%A, %b %e, %Y'],
					month: ['%B %Y', '%B', '-%B %Y'],
					year: ['%Y', '%Y', '-%Y']
				}
				// smoothed = false, // enable this for navigator series only
			},

			specificOptions = { // extends common options
				line: {},
				spline: {},
				area: {},
				areaspline: {},
				column: {
					approximation: 'sum',
					groupPixelWidth: 10
				},
				arearange: {
					approximation: 'range'
				},
				areasplinerange: {
					approximation: 'range'
				},
				columnrange: {
					approximation: 'range',
					groupPixelWidth: 10
				},
				candlestick: {
					approximation: 'ohlc',
					groupPixelWidth: 10
				},
				ohlc: {
					approximation: 'ohlc',
					groupPixelWidth: 5
				}
			},

			// units are defined in a separate array to allow complete overriding in case of a user option
			defaultDataGroupingUnits = [[
					'millisecond', // unit name
					[1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples
				], [
					'second',
					[1, 2, 5, 10, 15, 30]
				], [
					'minute',
					[1, 2, 5, 10, 15, 30]
				], [
					'hour',
					[1, 2, 3, 4, 6, 8, 12]
				], [
					'day',
					[1]
				], [
					'week',
					[1]
				], [
					'month',
					[1, 3, 6]
				], [
					'year',
					null
				]
			],


			/**
			 * Define the available approximation types. The data grouping approximations takes an array
			 * or numbers as the first parameter. In case of ohlc, four arrays are sent in as four parameters.
			 * Each array consists only of numbers. In case null values belong to the group, the property
			 * .hasNulls will be set to true on the array.
			 */
			approximations = {
				sum: function (arr) {
					var len = arr.length,
						ret;

					// 1. it consists of nulls exclusively
					if (!len && arr.hasNulls) {
						ret = null;
					// 2. it has a length and real values
					} else if (len) {
						ret = 0;
						while (len--) {
							ret += arr[len];
						}
					}
					// 3. it has zero length, so just return undefined
					// => doNothing()

					return ret;
				},
				average: function (arr) {
					var len = arr.length,
						ret = approximations.sum(arr);

					// If we have a number, return it divided by the length. If not, return
					// null or undefined based on what the sum method finds.
					if (typeof ret === NUMBER && len) {
						ret = ret / len;
					}

					return ret;
				},
				open: function (arr) {
					return arr.length ? arr[0] : (arr.hasNulls ? null : UNDEFINED);
				},
				high: function (arr) {
					return arr.length ? arrayMax(arr) : (arr.hasNulls ? null : UNDEFINED);
				},
				low: function (arr) {
					return arr.length ? arrayMin(arr) : (arr.hasNulls ? null : UNDEFINED);
				},
				close: function (arr) {
					return arr.length ? arr[arr.length - 1] : (arr.hasNulls ? null : UNDEFINED);
				},
				// ohlc and range are special cases where a multidimensional array is input and an array is output
				ohlc: function (open, high, low, close) {
					open = approximations.open(open);
					high = approximations.high(high);
					low = approximations.low(low);
					close = approximations.close(close);

					if (typeof open === NUMBER || typeof high === NUMBER || typeof low === NUMBER || typeof close === NUMBER) {
						return [open, high, low, close];
					}
					// else, return is undefined
				},
				range: function (low, high) {
					low = approximations.low(low);
					high = approximations.high(high);

					if (typeof low === NUMBER || typeof high === NUMBER) {
						return [low, high];
					}
					// else, return is undefined
				}
			};

		/*jslint white:false */

		/**
		 * Takes parallel arrays of x and y data and groups the data into intervals defined by groupPositions, a collection
		 * of starting x values for each group.
		 */
		seriesProto.groupData = function (xData, yData, groupPositions, approximation) {
			var series = this,
				data = series.data,
				dataOptions = series.options.data,
				groupedXData = [],
				groupedYData = [],
				dataLength = xData.length,
				pointX,
				pointY,
				groupedY,
				handleYData = !!yData, // when grouping the fake extended axis for panning, we don't need to consider y
				values = [[], [], [], []],
				approximationFn = typeof approximation === 'function' ? approximation : approximations[approximation],
				pointArrayMap = series.pointArrayMap,
				pointArrayMapLength = pointArrayMap && pointArrayMap.length,
				i;

			// Start with the first point within the X axis range (#2696)
			for (i = 0; i <= dataLength; i++) {
				if (xData[i] >= groupPositions[0]) {
					break;
				}
			}

			for (; i <= dataLength; i++) {

				// when a new group is entered, summarize and initiate the previous group
				while ((groupPositions[1] !== UNDEFINED && xData[i] >= groupPositions[1]) ||
						i === dataLength) { // get the last group

					// get group x and y
					pointX = groupPositions.shift();
					groupedY = approximationFn.apply(0, values);

					// push the grouped data
					if (groupedY !== UNDEFINED) {
						groupedXData.push(pointX);
						groupedYData.push(groupedY);
					}

					// reset the aggregate arrays
					values[0] = [];
					values[1] = [];
					values[2] = [];
					values[3] = [];

					// don't loop beyond the last group
					if (i === dataLength) {
						break;
					}
				}

				// break out
				if (i === dataLength) {
					break;
				}

				// for each raw data point, push it to an array that contains all values for this specific group
				if (pointArrayMap) {

					var index = series.cropStart + i,
						point = (data && data[index]) || series.pointClass.prototype.applyOptions.apply({ series: series }, [dataOptions[index]]),
						j,
						val;

					for (j = 0; j < pointArrayMapLength; j++) {
						val = point[pointArrayMap[j]];
						if (typeof val === NUMBER) {
							values[j].push(val);
						} else if (val === null) {
							values[j].hasNulls = true;
						}
					}

				} else {
					pointY = handleYData ? yData[i] : null;

					if (typeof pointY === NUMBER) {
						values[0].push(pointY);
					} else if (pointY === null) {
						values[0].hasNulls = true;
					}
				}
			}
				
			return [groupedXData, groupedYData];
		};

		/**
		 * Extend the basic processData method, that crops the data to the current zoom
		 * range, with data grouping logic.
		 */
		seriesProto.processData = function () {
			var series = this,
				chart = series.chart,
				options = series.options,
				dataGroupingOptions = options[DATA_GROUPING],
				groupingEnabled = series.allowDG !== false && dataGroupingOptions && pick(dataGroupingOptions.enabled, chart.options._stock),
				hasGroupedData;

			// run base method
			series.forceCrop = groupingEnabled; // #334
			series.groupPixelWidth = null; // #2110
			series.hasProcessed = true; // #2692

			// skip if processData returns false or if grouping is disabled (in that order)
			if (baseProcessData.apply(series, arguments) === false || !groupingEnabled) {
				return;

			} else {
				series.destroyGroupedData();

			}
			var i,
				processedXData = series.processedXData,
				processedYData = series.processedYData,
				plotSizeX = chart.plotSizeX,
				xAxis = series.xAxis,
				ordinal = xAxis.options.ordinal,
				groupPixelWidth = series.groupPixelWidth = xAxis.getGroupPixelWidth && xAxis.getGroupPixelWidth(),
				nonGroupedPointRange = series.pointRange;

			// Execute grouping if the amount of points is greater than the limit defined in groupPixelWidth
			if (groupPixelWidth) {
				hasGroupedData = true;

				series.points = null; // force recreation of point instances in series.translate

				var extremes = xAxis.getExtremes(),
					xMin = extremes.min,
					xMax = extremes.max,
					groupIntervalFactor = (ordinal && xAxis.getGroupIntervalFactor(xMin, xMax, series)) || 1,
					interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) * groupIntervalFactor,
					groupPositions = xAxis.getTimeTicks(
						xAxis.normalizeTimeTickInterval(interval, dataGroupingOptions.units || defaultDataGroupingUnits),
						xMin,
						xMax,
						xAxis.options.startOfWeek,
						processedXData,
						series.closestPointRange
					),
					groupedXandY = seriesProto.groupData.apply(series, [processedXData, processedYData, groupPositions, dataGroupingOptions.approximation]),
					groupedXData = groupedXandY[0],
					groupedYData = groupedXandY[1];

				// prevent the smoothed data to spill out left and right, and make
				// sure data is not shifted to the left
				if (dataGroupingOptions.smoothed) {
					i = groupedXData.length - 1;
					groupedXData[i] = xMax;
					while (i-- && i > 0) {
						groupedXData[i] += interval / 2;
					}
					groupedXData[0] = xMin;
				}

				// record what data grouping values were used
				series.currentDataGrouping = groupPositions.info;
				if (options.pointRange === null) { // null means auto, as for columns, candlesticks and OHLC
					series.pointRange = groupPositions.info.totalRange;
				}
				series.closestPointRange = groupPositions.info.totalRange;

				// Make sure the X axis extends to show the first group (#2533)
				if (defined(groupedXData[0]) && groupedXData[0] < xAxis.dataMin) {
					if (xAxis.min === xAxis.dataMin) {
						xAxis.min = groupedXData[0];
					}
					xAxis.dataMin = groupedXData[0];
				}

				// set series props
				series.processedXData = groupedXData;
				series.processedYData = groupedYData;
			} else {
				series.currentDataGrouping = null;
				series.pointRange = nonGroupedPointRange;
			}
			series.hasGroupedData = hasGroupedData;
		};

		/**
		 * Destroy the grouped data points. #622, #740
		 */
		seriesProto.destroyGroupedData = function () {

			var groupedData = this.groupedData;

			// clear previous groups
			each(groupedData || [], function (point, i) {
				if (point) {
					groupedData[i] = point.destroy ? point.destroy() : null;
				}
			});
			this.groupedData = null;
		};

		/**
		 * Override the generatePoints method by adding a reference to grouped data
		 */
		seriesProto.generatePoints = function () {

			baseGeneratePoints.apply(this);

			// record grouped data in order to let it be destroyed the next time processData runs
			this.destroyGroupedData(); // #622
			this.groupedData = this.hasGroupedData ? this.points : null;
		};

		/**
		 * Extend the original method, make the tooltip's header reflect the grouped range
		 */
		tooltipProto.tooltipFooterHeaderFormatter = function (point, isFooter) {
			var tooltip = this,
				series = point.series,
				options = series.options,
				tooltipOptions = series.tooltipOptions,
				dataGroupingOptions = options.dataGrouping,
				xDateFormat = tooltipOptions.xDateFormat,
				xDateFormatEnd,
				xAxis = series.xAxis,
				currentDataGrouping,
				dateTimeLabelFormats,
				labelFormats,
				formattedKey,
				ret;

			// apply only to grouped series
			if (xAxis && xAxis.options.type === 'datetime' && dataGroupingOptions && isNumber(point.key)) {

				// set variables
				currentDataGrouping = series.currentDataGrouping;
				dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats;

				// if we have grouped data, use the grouping information to get the right format
				if (currentDataGrouping) {
					labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];
					if (currentDataGrouping.count === 1) {
						xDateFormat = labelFormats[0];
					} else {
						xDateFormat = labelFormats[1];
						xDateFormatEnd = labelFormats[2];
					}
				// if not grouped, and we don't have set the xDateFormat option, get the best fit,
				// so if the least distance between points is one minute, show it, but if the
				// least distance is one day, skip hours and minutes etc.
				} else if (!xDateFormat && dateTimeLabelFormats) {
					xDateFormat = tooltip.getXDateFormat(point, tooltipOptions, xAxis);
				}

				// now format the key
				formattedKey = dateFormat(xDateFormat, point.key);
				if (xDateFormatEnd) {
					formattedKey += dateFormat(xDateFormatEnd, point.key + currentDataGrouping.totalRange - 1);
				}

				// return the replaced format
				ret = tooltipOptions[(isFooter ? 'footer' : 'header') + 'Format'].replace('{point.key}', formattedKey);

			// else, fall back to the regular formatter
			} else {
				ret = baseTooltipFooterHeaderFormatter.call(tooltip, point, isFooter);
			}

			return ret;
		};

		/**
		 * Extend the series destroyer
		 */
		seriesProto.destroy = function () {
			var series = this,
				groupedData = series.groupedData || [],
				i = groupedData.length;

			while (i--) {
				if (groupedData[i]) {
					groupedData[i].destroy();
				}
			}
			baseDestroy.apply(series);
		};


		// Handle default options for data grouping. This must be set at runtime because some series types are
		// defined after this.
		wrap(seriesProto, 'setOptions', function (proceed, itemOptions) {

			var options = proceed.call(this, itemOptions),
				type = this.type,
				plotOptions = this.chart.options.plotOptions,
				defaultOptions = defaultPlotOptions[type].dataGrouping;

			if (specificOptions[type]) { // #1284
				if (!defaultOptions) {
					defaultOptions = merge(commonOptions, specificOptions[type]);
				}

				options.dataGrouping = merge(
					defaultOptions,
					plotOptions.series && plotOptions.series.dataGrouping, // #1228
					plotOptions[type].dataGrouping, // Set by the StockChart constructor
					itemOptions.dataGrouping
				);
			}

			if (this.chart.options._stock) {
				this.requireSorting = true;
			}

			return options;
		});


		/**
		 * When resetting the scale reset the hasProccessed flag to avoid taking previous data grouping
		 * of neighbour series into accound when determining group pixel width (#2692).
		 */
		wrap(Axis.prototype, 'setScale', function (proceed) {
			proceed.call(this);
			each(this.series, function (series) {
				series.hasProcessed = false;
			});
		});

		/**
		 * Get the data grouping pixel width based on the greatest defined individual width
		 * of the axis' series, and if whether one of the axes need grouping.
		 */
		Axis.prototype.getGroupPixelWidth = function () {

			var series = this.series,
				len = series.length,
				i,
				groupPixelWidth = 0,
				doGrouping = false,
				dataLength,
				dgOptions;

			// If multiple series are compared on the same x axis, give them the same
			// group pixel width (#334)
			i = len;
			while (i--) {
				dgOptions = series[i].options.dataGrouping;
				if (dgOptions) {
					groupPixelWidth = mathMax(groupPixelWidth, dgOptions.groupPixelWidth);

				}
			}

			// If one of the series needs grouping, apply it to all (#1634)
			i = len;
			while (i--) {
				dgOptions = series[i].options.dataGrouping;
					
				if (dgOptions && series[i].hasProcessed) { // #2692

					dataLength = (series[i].processedXData || series[i].data).length;

					// Execute grouping if the amount of points is greater than the limit defined in groupPixelWidth
					if (series[i].groupPixelWidth || dataLength > (this.chart.plotSizeX / groupPixelWidth) || (dataLength && dgOptions.forced)) {
						doGrouping = true;
					}
				}
			}

			return doGrouping ? groupPixelWidth : 0;
		};

		/**
		 * Force data grouping on all the axis' series.
		 */
		Axis.prototype.setDataGrouping = function (dataGrouping, redraw) {
			var i;

			redraw = pick(redraw, true);

			if (!dataGrouping) {   
				dataGrouping = {
					forced: false,
					units: null
				};
			}

			// Axis is instantiated, update all series
			if (this instanceof Axis) {
				i = this.series.length;
				while (i--) {
					this.series[i].update({
						dataGrouping: dataGrouping
					}, false);
				}

			// Axis not yet instanciated, alter series options
			} else {
				each(this.chart.options.series, function (seriesOptions) {
					seriesOptions.dataGrouping = dataGrouping;
				}, false);
			}

			if (redraw) {
				this.chart.redraw();
			}
		};



		/* ****************************************************************************
		 * End data grouping module												   *
		 ******************************************************************************//* ****************************************************************************
		 * Start OHLC series code													 *
		 *****************************************************************************/

		// 1 - Set default options
		defaultPlotOptions.ohlc = merge(defaultPlotOptions.column, {
			lineWidth: 1,
			tooltip: {
				pointFormat: '<span style="color:{point.color}">\u25CF</span> <b> {series.name}</b><br/>' + // docs
					'Open: {point.open}<br/>' +
					'High: {point.high}<br/>' +
					'Low: {point.low}<br/>' +
					'Close: {point.close}<br/>'
			},
			states: {
				hover: {
					lineWidth: 3
				}
			},
			threshold: null
			//upColor: undefined
		});

		// 2 - Create the OHLCSeries object
		var OHLCSeries = extendClass(seriesTypes.column, {
			type: 'ohlc',
			pointArrayMap: ['open', 'high', 'low', 'close'], // array point configs are mapped to this
			toYData: function (point) { // return a plain array for speedy calculation
				return [point.open, point.high, point.low, point.close];
			},
			pointValKey: 'high',

			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				stroke: 'color',
				'stroke-width': 'lineWidth'
			},
			upColorProp: 'stroke',

			/**
			 * Postprocess mapping between options and SVG attributes
			 */
			getAttribs: function () {
				seriesTypes.column.prototype.getAttribs.apply(this, arguments);
				var series = this,
					options = series.options,
					stateOptions = options.states,
					upColor = options.upColor || series.color,
					seriesDownPointAttr = merge(series.pointAttr),
					upColorProp = series.upColorProp;

				seriesDownPointAttr[''][upColorProp] = upColor;
				seriesDownPointAttr.hover[upColorProp] = stateOptions.hover.upColor || upColor;
				seriesDownPointAttr.select[upColorProp] = stateOptions.select.upColor || upColor;

				each(series.points, function (point) {
					if (point.open < point.close && !point.options.color) {
						point.pointAttr = seriesDownPointAttr;
					}
				});
			},

			/**
			 * Translate data points from raw values x and y to plotX and plotY
			 */
			translate: function () {
				var series = this,
					yAxis = series.yAxis;

				seriesTypes.column.prototype.translate.apply(series);

				// do the translation
				each(series.points, function (point) {
					// the graphics
					if (point.open !== null) {
						point.plotOpen = yAxis.translate(point.open, 0, 1, 0, 1);
					}
					if (point.close !== null) {
						point.plotClose = yAxis.translate(point.close, 0, 1, 0, 1);
					}

				});
			},

			/**
			 * Draw the data points
			 */
			drawPoints: function () {
				var series = this,
					points = series.points,
					chart = series.chart,
					pointAttr,
					plotOpen,
					plotClose,
					crispCorr,
					halfWidth,
					path,
					graphic,
					crispX;


				each(points, function (point) {
					if (point.plotY !== UNDEFINED) {

						graphic = point.graphic;
						pointAttr = point.pointAttr[point.selected ? 'selected' : ''] || series.pointAttr[NORMAL_STATE];

						// crisp vector coordinates
						crispCorr = (pointAttr['stroke-width'] % 2) / 2;
						crispX = mathRound(point.plotX) - crispCorr;  // #2596
						halfWidth = mathRound(point.shapeArgs.width / 2);

						// the vertical stem
						path = [
							'M',
							crispX, mathRound(point.yBottom),
							'L',
							crispX, mathRound(point.plotY)
						];

						// open
						if (point.open !== null) {
							plotOpen = mathRound(point.plotOpen) + crispCorr;
							path.push(
								'M',
								crispX,
								plotOpen,
								'L',
								crispX - halfWidth,
								plotOpen
							);
						}

						// close
						if (point.close !== null) {
							plotClose = mathRound(point.plotClose) + crispCorr;
							path.push(
								'M',
								crispX,
								plotClose,
								'L',
								crispX + halfWidth,
								plotClose
							);
						}

						// create and/or update the graphic
						if (graphic) {
							graphic
								.attr(pointAttr) // #3897
								.animate({ d: path });
						} else {
							point.graphic = chart.renderer.path(path)
								.attr(pointAttr)
								.add(series.group);
						}

					}


				});

			},

			/**
			 * Disable animation
			 */
			animate: null


		});
		seriesTypes.ohlc = OHLCSeries;
		/* ****************************************************************************
		 * End OHLC series code													   *
		 *****************************************************************************/
		/* ****************************************************************************
		 * Start Candlestick series code											  *
		 *****************************************************************************/

		// 1 - set default options
		defaultPlotOptions.candlestick = merge(defaultPlotOptions.column, {
			lineColor: 'black',
			lineWidth: 1,
			states: {
				hover: {
					lineWidth: 2
				}
			},
			tooltip: defaultPlotOptions.ohlc.tooltip,
			threshold: null,
			upColor: 'white'
			// upLineColor: null
		});

		// 2 - Create the CandlestickSeries object
		var CandlestickSeries = extendClass(OHLCSeries, {
			type: 'candlestick',

			/**
			 * One-to-one mapping from options to SVG attributes
			 */
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				fill: 'color',
				stroke: 'lineColor',
				'stroke-width': 'lineWidth'
			},
			upColorProp: 'fill',

			/**
			 * Postprocess mapping between options and SVG attributes
			 */
			getAttribs: function () {
				seriesTypes.ohlc.prototype.getAttribs.apply(this, arguments);
				var series = this,
					options = series.options,
					stateOptions = options.states,			
					upLineColor = options.upLineColor || options.lineColor,
					hoverStroke = stateOptions.hover.upLineColor || upLineColor, 
					selectStroke = stateOptions.select.upLineColor || upLineColor;

				// Add custom line color for points going up (close > open).
				// Fill is handled by OHLCSeries' getAttribs.
				each(series.points, function (point) {
					if (point.open < point.close) {

						// If an individual line color is set, we need to merge the
						// point attributes, because they are shared between all up
						// points by inheritance from OHCLSeries.
						if (point.lineColor) {
							point.pointAttr = merge(point.pointAttr);
							upLineColor = point.lineColor;
						}

						point.pointAttr[''].stroke = upLineColor;
						point.pointAttr.hover.stroke = hoverStroke;
						point.pointAttr.select.stroke = selectStroke;
					}
				});
			},

			/**
			 * Draw the data points
			 */
			drawPoints: function () {
				var series = this,  //state = series.state,
					points = series.points,
					chart = series.chart,
					pointAttr,
					seriesPointAttr = series.pointAttr[''],
					plotOpen,
					plotClose,
					topBox,
					bottomBox,
					hasTopWhisker,
					hasBottomWhisker,
					crispCorr,
					crispX,
					graphic,
					path,
					halfWidth;


				each(points, function (point) {

					graphic = point.graphic;
					if (point.plotY !== UNDEFINED) {

						pointAttr = point.pointAttr[point.selected ? 'selected' : ''] || seriesPointAttr;

						// crisp vector coordinates
						crispCorr = (pointAttr['stroke-width'] % 2) / 2;
						crispX = mathRound(point.plotX) - crispCorr; // #2596
						plotOpen = point.plotOpen;
						plotClose = point.plotClose;
						topBox = math.min(plotOpen, plotClose);
						bottomBox = math.max(plotOpen, plotClose);
						halfWidth = mathRound(point.shapeArgs.width / 2);
						hasTopWhisker = mathRound(topBox) !== mathRound(point.plotY);
						hasBottomWhisker = bottomBox !== point.yBottom;
						topBox = mathRound(topBox) + crispCorr;
						bottomBox = mathRound(bottomBox) + crispCorr;

						// create the path
						path = [
							'M',
							crispX - halfWidth, bottomBox,
							'L',
							crispX - halfWidth, topBox,
							'L',
							crispX + halfWidth, topBox,
							'L',
							crispX + halfWidth, bottomBox,
							'Z', // Use a close statement to ensure a nice rectangle #2602
							'M',
							crispX, topBox,
							'L',
							crispX, hasTopWhisker ? mathRound(point.plotY) : topBox, // #460, #2094
							'M',
							crispX, bottomBox,
							'L',
							crispX, hasBottomWhisker ? mathRound(point.yBottom) : bottomBox // #460, #2094
						];

						if (graphic) {
							graphic
								.attr(pointAttr) // #3897
								.animate({ d: path });
						} else {
							point.graphic = chart.renderer.path(path)
								.attr(pointAttr)
								.add(series.group)
								.shadow(series.options.shadow);
						}

					}
				});

			}


		});

		seriesTypes.candlestick = CandlestickSeries;

		/* ****************************************************************************
		 * End Candlestick series code												*
		 *****************************************************************************/
		/* ****************************************************************************
		 * Start Flags series code													*
		 *****************************************************************************/

		var symbols = SVGRenderer.prototype.symbols;

		// 1 - set default options
		defaultPlotOptions.flags = merge(defaultPlotOptions.column, {
			fillColor: 'white',
			lineWidth: 1,
			pointRange: 0, // #673
			//radius: 2,
			shape: 'flag',
			stackDistance: 12,
			states: {
				hover: {
					lineColor: 'black',
					fillColor: '#FCFFC5'
				}
			},
			style: {
				fontSize: '11px',
				fontWeight: 'bold',
				textAlign: 'center'
			},
			tooltip: {
				pointFormat: '{point.text}<br/>'
			},
			threshold: null,
			y: -30
		});

		// 2 - Create the CandlestickSeries object
		seriesTypes.flags = extendClass(seriesTypes.column, {
			type: 'flags',
			sorted: false,
			noSharedTooltip: true,
			allowDG: false,
			takeOrdinalPosition: false, // #1074
			trackerGroups: ['markerGroup'],
			forceCrop: true,
			/**
			 * Inherit the initialization from base Series
			 */
			init: Series.prototype.init,

			/**
			 * One-to-one mapping from options to SVG attributes
			 */
			pointAttrToOptions: { // mapping between SVG attributes and the corresponding options
				fill: 'fillColor',
				stroke: 'color',
				'stroke-width': 'lineWidth',
				r: 'radius'
			},

			/**
			 * Extend the translate method by placing the point on the related series
			 */
			translate: function () {

				seriesTypes.column.prototype.translate.apply(this);

				var series = this,
					options = series.options,
					chart = series.chart,
					points = series.points,
					cursor = points.length - 1,
					point,
					lastPoint,
					optionsOnSeries = options.onSeries,
					onSeries = optionsOnSeries && chart.get(optionsOnSeries),
					step = onSeries && onSeries.options.step,
					onData = onSeries && onSeries.points,
					i = onData && onData.length,
					xAxis = series.xAxis,
					xAxisExt = xAxis.getExtremes(),
					leftPoint,
					lastX,
					rightPoint,
					currentDataGrouping;

				// relate to a master series
				if (onSeries && onSeries.visible && i) {
					currentDataGrouping = onSeries.currentDataGrouping;
					lastX = onData[i - 1].x + (currentDataGrouping ? currentDataGrouping.totalRange : 0); // #2374

					// sort the data points
					points.sort(function (a, b) {
						return (a.x - b.x);
					});

					while (i-- && points[cursor]) {
						point = points[cursor];
						leftPoint = onData[i];
						
						if (leftPoint.x <= point.x && leftPoint.plotY !== UNDEFINED) {
							if (point.x <= lastX) { // #803
							
								point.plotY = leftPoint.plotY;
							
								// interpolate between points, #666
								if (leftPoint.x < point.x && !step) { 
									rightPoint = onData[i + 1];
									if (rightPoint && rightPoint.plotY !== UNDEFINED) {
										point.plotY += 
											((point.x - leftPoint.x) / (rightPoint.x - leftPoint.x)) * // the distance ratio, between 0 and 1 
											(rightPoint.plotY - leftPoint.plotY); // the y distance
									}
								}
							}
							cursor--;
							i++; // check again for points in the same x position
							if (cursor < 0) {
								break;
							}
						}
					}
				}

				// Add plotY position and handle stacking
				each(points, function (point, i) {

					var stackIndex;
					
					// Undefined plotY means the point is either on axis, outside series range or hidden series.
					// If the series is outside the range of the x axis it should fall through with 
					// an undefined plotY, but then we must remove the shapeArgs (#847).
					if (point.plotY === UNDEFINED) {
						if (point.x >= xAxisExt.min && point.x <= xAxisExt.max) { // we're inside xAxis range
							point.plotY = chart.chartHeight - xAxis.bottom - (xAxis.opposite ? xAxis.height : 0) + xAxis.offset - chart.plotTop;
						} else {
							point.shapeArgs = {}; // 847
						}
					}
					// if multiple flags appear at the same x, order them into a stack
					lastPoint = points[i - 1];
					if (lastPoint && lastPoint.plotX === point.plotX) {
						if (lastPoint.stackIndex === UNDEFINED) {
							lastPoint.stackIndex = 0;
						}
						stackIndex = lastPoint.stackIndex + 1;
					}
					point.stackIndex = stackIndex; // #3639		
				});


			},

			/**
			 * Draw the markers
			 */
			drawPoints: function () {
				var series = this,
					pointAttr,
					seriesPointAttr = series.pointAttr[''],
					points = series.points,
					chart = series.chart,
					renderer = chart.renderer,
					plotX,
					plotY,
					options = series.options,
					optionsY = options.y,
					shape,
					i,
					point,
					graphic,
					stackIndex,
					anchorX,
					anchorY,
					outsideRight;

				i = points.length;
				while (i--) {
					point = points[i];
					outsideRight = point.plotX > series.xAxis.len;
					plotX = point.plotX;
					if (plotX > 0) { // #3119
						plotX -= pick(point.lineWidth, options.lineWidth) % 2; // #4285
					}
					stackIndex = point.stackIndex;
					shape = point.options.shape || options.shape;
					plotY = point.plotY;
					if (plotY !== UNDEFINED) {
						plotY = point.plotY + optionsY - (stackIndex !== UNDEFINED && stackIndex * options.stackDistance);
					}
					anchorX = stackIndex ? UNDEFINED : point.plotX; // skip connectors for higher level stacked points
					anchorY = stackIndex ? UNDEFINED : point.plotY;

					graphic = point.graphic;

					// only draw the point if y is defined and the flag is within the visible area
					if (plotY !== UNDEFINED && plotX >= 0 && !outsideRight) {
						// shortcuts
						pointAttr = point.pointAttr[point.selected ? 'select' : ''] || seriesPointAttr;
						if (graphic) { // update
							graphic.attr({
								x: plotX,
								y: plotY,
								r: pointAttr.r,
								anchorX: anchorX,
								anchorY: anchorY
							});
						} else {
							graphic = point.graphic = renderer.label(
								point.options.title || options.title || 'A',
								plotX,
								plotY,
								shape,
								anchorX,
								anchorY,
								options.useHTML
							)
							.css(merge(options.style, point.style))
							.attr(pointAttr)
							.attr({
								align: shape === 'flag' ? 'left' : 'center',
								width: options.width,
								height: options.height
							})
							.add(series.markerGroup)
							.shadow(options.shadow);

						}

						// Set the tooltip anchor position
						point.tooltipPos = [plotX, plotY];

					} else if (graphic) {
						point.graphic = graphic.destroy();
					}

				}

			},

			/**
			 * Extend the column trackers with listeners to expand and contract stacks
			 */
			drawTracker: function () {
				var series = this,
					points = series.points;
				
				TrackerMixin.drawTrackerPoint.apply(this);

				// Bring each stacked flag up on mouse over, this allows readability of vertically
				// stacked elements as well as tight points on the x axis. #1924.
				each(points, function (point) {
					var graphic = point.graphic;
					if (graphic) {
						addEvent(graphic.element, 'mouseover', function () {

							// Raise this point
							if (point.stackIndex > 0 && !point.raised) {
								point._y = graphic.y;
								graphic.attr({
									y: point._y - 8
								});
								point.raised = true;
							}

							// Revert other raised points
							each(points, function (otherPoint) {
								if (otherPoint !== point && otherPoint.raised && otherPoint.graphic) {
									otherPoint.graphic.attr({
										y: otherPoint._y
									});
									otherPoint.raised = false;
								}
							});
						});
					}
				});
			},

			/**
			 * Disable animation
			 */
			animate: noop,
			buildKDTree: noop,
			setClip: noop

		});

		// create the flag icon with anchor
		symbols.flag = function (x, y, w, h, options) {
			var anchorX = (options && options.anchorX) || x,
				anchorY = (options &&  options.anchorY) || y;

			return [
				'M', anchorX, anchorY,
				'L', x, y + h,
				x, y,
				x + w, y,
				x + w, y + h,
				x, y + h,
				'Z'
			];
		};

		// create the circlepin and squarepin icons with anchor
		each(['circle', 'square'], function (shape) {
			symbols[shape + 'pin'] = function (x, y, w, h, options) {

				var anchorX = options && options.anchorX,
					anchorY = options &&  options.anchorY,
					path,
					labelTopOrBottomY;

				// For single-letter flags, make sure circular flags are not taller than their width
				if (shape === 'circle' && h > w) {
					x -= mathRound((h - w) / 2);
					w = h;
				}

				path = symbols[shape](x, y, w, h);

				if (anchorX && anchorY) {
					// if the label is below the anchor, draw the connecting line from the top edge of the label
					// otherwise start drawing from the bottom edge
					labelTopOrBottomY = (y > anchorY) ? y : y + h;
					path.push('M', anchorX, labelTopOrBottomY, 'L', anchorX, anchorY);
				}

				return path;
			};
		});

		// The symbol callbacks are generated on the SVGRenderer object in all browsers. Even
		// VML browsers need this in order to generate shapes in export. Now share
		// them with the VMLRenderer.
		if (Renderer === Highcharts.VMLRenderer) {
			each(['flag', 'circlepin', 'squarepin'], function (shape) {
				VMLRenderer.prototype.symbols[shape] = symbols[shape];
			});
		}

		/* ****************************************************************************
		 * End Flags series code													  *
		 *****************************************************************************/
		/* ****************************************************************************
		 * Start Scroller code														*
		 *****************************************************************************/
		var units = [].concat(defaultDataGroupingUnits), // copy
			defaultSeriesType,
			
			// Finding the min or max of a set of variables where we don't know if they are defined,
			// is a pattern that is repeated several places in Highcharts. Consider making this
			// a global utility method.
			numExt = function (extreme) {
				var numbers = grep(arguments, function (n) { return typeof n === 'number'; });
				if (numbers.length) {
					return Math[extreme].apply(0, numbers);
				}
			};

		// add more resolution to units
		units[4] = ['day', [1, 2, 3, 4]]; // allow more days
		units[5] = ['week', [1, 2, 3]]; // allow more weeks

		defaultSeriesType = seriesTypes.areaspline === UNDEFINED ? 'line' : 'areaspline';

		extend(defaultOptions, {
			navigator: {
				//enabled: true,
				handles: {
					backgroundColor: '#ebe7e8',
					borderColor: '#b2b1b6'
				},
				height: 40,
				margin: 25,
				maskFill: 'rgba(128,179,236,0.3)',
				maskInside: true,
				outlineColor: '#b2b1b6',
				outlineWidth: 1,
				series: {
					type: defaultSeriesType,
					color: '#4572A7',
					compare: null,
					fillOpacity: 0.05,
					dataGrouping: {
						approximation: 'average',
						enabled: true,
						groupPixelWidth: 2,
						smoothed: true,
						units: units
					},
					dataLabels: {
						enabled: false,
						zIndex: 2 // #1839
					},
					id: PREFIX + 'navigator-series',
					lineColor: '#4572A7',
					lineWidth: 1,
					marker: {
						enabled: false
					},
					pointRange: 0,
					shadow: false,
					threshold: null
				},
				//top: undefined,
				xAxis: {
					tickWidth: 0,
					lineWidth: 0,
					gridLineColor: '#EEE',
					gridLineWidth: 1,
					tickPixelInterval: 200,
					labels: {
						align: 'left',
						style: {
							color: '#888'
						},
						x: 3,
						y: -4
					},
					crosshair: false
				},
				yAxis: {
					gridLineWidth: 0,
					startOnTick: false,
					endOnTick: false,
					minPadding: 0.1,
					maxPadding: 0.1,
					labels: {
						enabled: false
					},
					crosshair: false,
					title: {
						text: null
					},
					tickWidth: 0
				}
			},
			scrollbar: {
				//enabled: true
				height: isTouchDevice ? 20 : 14,
				barBackgroundColor: '#bfc8d1',
				barBorderRadius: 0,
				barBorderWidth: 1,
				barBorderColor: '#bfc8d1',
				buttonArrowColor: '#666',
				buttonBackgroundColor: '#ebe7e8',
				buttonBorderColor: '#bbb',
				buttonBorderRadius: 0,
				buttonBorderWidth: 1,
				minWidth: 6,
				rifleColor: '#666',
				trackBackgroundColor: '#eeeeee',
				trackBorderColor: '#eeeeee',
				trackBorderWidth: 1,
				// trackBorderRadius: 0
				liveRedraw: hasSVG && !isTouchDevice
			}
		});

		/**
		 * The Scroller class
		 * @param {Object} chart
		 */
		function Scroller(chart) {
			var chartOptions = chart.options,
				navigatorOptions = chartOptions.navigator,
				navigatorEnabled = navigatorOptions.enabled,
				scrollbarOptions = chartOptions.scrollbar,
				scrollbarEnabled = scrollbarOptions.enabled,
				height = navigatorEnabled ? navigatorOptions.height : 0,
				scrollbarHeight = scrollbarEnabled ? scrollbarOptions.height : 0;


			this.handles = [];
			this.scrollbarButtons = [];
			this.elementsToDestroy = []; // Array containing the elements to destroy when Scroller is destroyed

			this.chart = chart;
			this.setBaseSeries();

			this.height = height;
			this.scrollbarHeight = scrollbarHeight;
			this.scrollbarEnabled = scrollbarEnabled;
			this.navigatorEnabled = navigatorEnabled;
			this.navigatorOptions = navigatorOptions;
			this.scrollbarOptions = scrollbarOptions;
			this.outlineHeight = height + scrollbarHeight;

			// Run scroller
			this.init();
		}

		Scroller.prototype = {
			/**
			 * Draw one of the handles on the side of the zoomed range in the navigator
			 * @param {Number} x The x center for the handle
			 * @param {Number} index 0 for left and 1 for right
			 */
			drawHandle: function (x, index) {
				var scroller = this,
					chart = scroller.chart,
					renderer = chart.renderer,
					elementsToDestroy = scroller.elementsToDestroy,
					handles = scroller.handles,
					handlesOptions = scroller.navigatorOptions.handles,
					attr = {
						fill: handlesOptions.backgroundColor,
						stroke: handlesOptions.borderColor,
						'stroke-width': 1
					},
					tempElem;

				// create the elements
				if (!scroller.rendered) {
					// the group
					handles[index] = renderer.g('navigator-handle-' + ['left', 'right'][index])
						.css({ cursor: 'ew-resize' })
						.attr({ zIndex: 4 - index }) // zIndex = 3 for right handle, 4 for left
						.add();

					// the rectangle
					tempElem = renderer.rect(-4.5, 0, 9, 16, 0, 1)
						.attr(attr)
						.add(handles[index]);
					elementsToDestroy.push(tempElem);

					// the rifles
					tempElem = renderer.path([
							'M',
							-1.5, 4,
							'L',
							-1.5, 12,
							'M',
							0.5, 4,
							'L',
							0.5, 12
						]).attr(attr)
						.add(handles[index]);
					elementsToDestroy.push(tempElem);
				}

				// Place it
				handles[index][chart.isResizing ? 'animate' : 'attr']({
					translateX: scroller.scrollerLeft + scroller.scrollbarHeight + parseInt(x, 10),
					translateY: scroller.top + scroller.height / 2 - 8
				});
			},

			/**
			 * Draw the scrollbar buttons with arrows
			 * @param {Number} index 0 is left, 1 is right
			 */
			drawScrollbarButton: function (index) {
				var scroller = this,
					chart = scroller.chart,
					renderer = chart.renderer,
					elementsToDestroy = scroller.elementsToDestroy,
					scrollbarButtons = scroller.scrollbarButtons,
					scrollbarHeight = scroller.scrollbarHeight,
					scrollbarOptions = scroller.scrollbarOptions,
					tempElem;

				if (!scroller.rendered) {
					scrollbarButtons[index] = renderer.g().add(scroller.scrollbarGroup);

					tempElem = renderer.rect(
							-0.5,
							-0.5,
							scrollbarHeight + 1, // +1 to compensate for crispifying in rect method
							scrollbarHeight + 1,
							scrollbarOptions.buttonBorderRadius,
							scrollbarOptions.buttonBorderWidth
						).attr({
							stroke: scrollbarOptions.buttonBorderColor,
							'stroke-width': scrollbarOptions.buttonBorderWidth,
							fill: scrollbarOptions.buttonBackgroundColor
						}).add(scrollbarButtons[index]);
					elementsToDestroy.push(tempElem);

					tempElem = renderer.path([
							'M',
							scrollbarHeight / 2 + (index ? -1 : 1), scrollbarHeight / 2 - 3,
							'L',
							scrollbarHeight / 2 + (index ? -1 : 1), scrollbarHeight / 2 + 3,
							scrollbarHeight / 2 + (index ? 2 : -2), scrollbarHeight / 2
						]).attr({
							fill: scrollbarOptions.buttonArrowColor
						}).add(scrollbarButtons[index]);
					elementsToDestroy.push(tempElem);
				}

				// adjust the right side button to the varying length of the scroll track
				if (index) {
					scrollbarButtons[index].attr({
						translateX: scroller.scrollerWidth - scrollbarHeight
					});
				}
			},

			/**
			 * Render the navigator and scroll bar
			 * @param {Number} min X axis value minimum
			 * @param {Number} max X axis value maximum
			 * @param {Number} pxMin Pixel value minimum
			 * @param {Number} pxMax Pixel value maximum
			 */
			render: function (min, max, pxMin, pxMax) {
				var scroller = this,
					chart = scroller.chart,
					renderer = chart.renderer,
					navigatorLeft,
					navigatorWidth,
					scrollerLeft,
					scrollerWidth,
					scrollbarGroup = scroller.scrollbarGroup,
					navigatorGroup = scroller.navigatorGroup,
					scrollbar = scroller.scrollbar,
					xAxis = scroller.xAxis,
					scrollbarTrack = scroller.scrollbarTrack,
					scrollbarHeight = scroller.scrollbarHeight,
					scrollbarEnabled = scroller.scrollbarEnabled,
					navigatorOptions = scroller.navigatorOptions,
					scrollbarOptions = scroller.scrollbarOptions,
					scrollbarMinWidth = scrollbarOptions.minWidth,
					height = scroller.height,
					top = scroller.top,
					navigatorEnabled = scroller.navigatorEnabled,
					outlineWidth = navigatorOptions.outlineWidth,
					halfOutline = outlineWidth / 2,
					zoomedMin,
					zoomedMax,
					range,
					scrX,
					scrWidth,
					scrollbarPad = 0,
					outlineHeight = scroller.outlineHeight,
					barBorderRadius = scrollbarOptions.barBorderRadius,
					strokeWidth,
					scrollbarStrokeWidth = scrollbarOptions.barBorderWidth,
					centerBarX,
					outlineTop = top + halfOutline,
					verb,
					unionExtremes;

				// Don't render the navigator until we have data (#486, #4202)
				if (!defined(min) || isNaN(min)) {
					return;
				}

				scroller.navigatorLeft = navigatorLeft = pick(
					xAxis.left,
					chart.plotLeft + scrollbarHeight // in case of scrollbar only, without navigator
				);
				scroller.navigatorWidth = navigatorWidth = pick(xAxis.len, chart.plotWidth - 2 * scrollbarHeight);
				scroller.scrollerLeft = scrollerLeft = navigatorLeft - scrollbarHeight;
				scroller.scrollerWidth = scrollerWidth = scrollerWidth = navigatorWidth + 2 * scrollbarHeight;

				// Set the scroller x axis extremes to reflect the total. The navigator extremes
				// should always be the extremes of the union of all series in the chart as
				// well as the navigator series.
				if (xAxis.getExtremes) {
					unionExtremes = scroller.getUnionExtremes(true);

					if (unionExtremes && (unionExtremes.dataMin !== xAxis.min || unionExtremes.dataMax !== xAxis.max)) {
						xAxis.setExtremes(unionExtremes.dataMin, unionExtremes.dataMax, true, false);
					}
				}

				// Get the pixel position of the handles
				pxMin = pick(pxMin, xAxis.translate(min));
				pxMax = pick(pxMax, xAxis.translate(max));
				if (isNaN(pxMin) || mathAbs(pxMin) === Infinity) { // Verify (#1851, #2238)
					pxMin = 0;
					pxMax = scrollerWidth;
				}

				// Are we below the minRange? (#2618)
				if (xAxis.translate(pxMax, true) - xAxis.translate(pxMin, true) < chart.xAxis[0].minRange) {
					return;
				}


				// handles are allowed to cross, but never exceed the plot area
				scroller.zoomedMax = mathMin(mathMax(pxMin, pxMax), navigatorWidth);
				scroller.zoomedMin = 
					mathMax(scroller.fixedWidth ? scroller.zoomedMax - scroller.fixedWidth : mathMin(pxMin, pxMax), 0);
				scroller.range = scroller.zoomedMax - scroller.zoomedMin;
				zoomedMax = mathRound(scroller.zoomedMax);
				zoomedMin = mathRound(scroller.zoomedMin);
				range = zoomedMax - zoomedMin;



				// on first render, create all elements
				if (!scroller.rendered) {

					if (navigatorEnabled) {

						// draw the navigator group
						scroller.navigatorGroup = navigatorGroup = renderer.g('navigator')
							.attr({
								zIndex: 3
							})
							.add();

						scroller.leftShade = renderer.rect()
							.attr({
								fill: navigatorOptions.maskFill
							}).add(navigatorGroup);
						
						if (navigatorOptions.maskInside) {
							scroller.leftShade.css({ cursor: 'ew-resize '});
						} else {
							scroller.rightShade = renderer.rect()
								.attr({
									fill: navigatorOptions.maskFill
								}).add(navigatorGroup);
						}


						scroller.outline = renderer.path()
							.attr({
								'stroke-width': outlineWidth,
								stroke: navigatorOptions.outlineColor
							})
							.add(navigatorGroup);
					}

					if (scrollbarEnabled) {

						// draw the scrollbar group
						scroller.scrollbarGroup = scrollbarGroup = renderer.g('scrollbar').add();

						// the scrollbar track
						strokeWidth = scrollbarOptions.trackBorderWidth;
						scroller.scrollbarTrack = scrollbarTrack = renderer.rect().attr({
							x: 0,
							y: -strokeWidth % 2 / 2,
							fill: scrollbarOptions.trackBackgroundColor,
							stroke: scrollbarOptions.trackBorderColor,
							'stroke-width': strokeWidth,
							r: scrollbarOptions.trackBorderRadius || 0,
							height: scrollbarHeight
						}).add(scrollbarGroup);

						// the scrollbar itself
						scroller.scrollbar = scrollbar = renderer.rect()
							.attr({
								y: -scrollbarStrokeWidth % 2 / 2,
								height: scrollbarHeight,
								fill: scrollbarOptions.barBackgroundColor,
								stroke: scrollbarOptions.barBorderColor,
								'stroke-width': scrollbarStrokeWidth,
								r: barBorderRadius
							})
							.add(scrollbarGroup);

						scroller.scrollbarRifles = renderer.path()
							.attr({
								stroke: scrollbarOptions.rifleColor,
								'stroke-width': 1
							})
							.add(scrollbarGroup);
					}
				}

				// place elements
				verb = chart.isResizing ? 'animate' : 'attr';

				if (navigatorEnabled) {
					scroller.leftShade[verb](navigatorOptions.maskInside ? {
						x: navigatorLeft + zoomedMin,
						y: top,
						width: zoomedMax - zoomedMin,
						height: height
					} : {
						x: navigatorLeft,
						y: top,
						width: zoomedMin,
						height: height
					});
					if (scroller.rightShade) {
						scroller.rightShade[verb]({
							x: navigatorLeft + zoomedMax,
							y: top,
							width: navigatorWidth - zoomedMax,
							height: height
						});
					}
			
					scroller.outline[verb]({ d: [
						M,
						scrollerLeft, outlineTop, // left
						L,
						navigatorLeft + zoomedMin - halfOutline, outlineTop, // upper left of zoomed range
						navigatorLeft + zoomedMin - halfOutline, outlineTop + outlineHeight, // lower left of z.r.
						L,
						navigatorLeft + zoomedMax - halfOutline, outlineTop + outlineHeight, // lower right of z.r.
						L,
						navigatorLeft + zoomedMax - halfOutline, outlineTop, // upper right of z.r.
						scrollerLeft + scrollerWidth, outlineTop // right
					].concat(navigatorOptions.maskInside ? [
						M,
						navigatorLeft + zoomedMin + halfOutline, outlineTop, // upper left of zoomed range
						L,
						navigatorLeft + zoomedMax - halfOutline, outlineTop // upper right of z.r.
					] : [])});
					// draw handles
					scroller.drawHandle(zoomedMin + halfOutline, 0);
					scroller.drawHandle(zoomedMax + halfOutline, 1);
				}

				// draw the scrollbar
				if (scrollbarEnabled && scrollbarGroup) {

					// draw the buttons
					scroller.drawScrollbarButton(0);
					scroller.drawScrollbarButton(1);

					scrollbarGroup[verb]({
						translateX: scrollerLeft,
						translateY: mathRound(outlineTop + height)
					});

					scrollbarTrack[verb]({
						width: scrollerWidth
					});

					// prevent the scrollbar from drawing to small (#1246)
					scrX = scrollbarHeight + zoomedMin;
					scrWidth = range - scrollbarStrokeWidth;
					if (scrWidth < scrollbarMinWidth) {
						scrollbarPad = (scrollbarMinWidth - scrWidth) / 2;
						scrWidth = scrollbarMinWidth;
						scrX -= scrollbarPad;
					}
					scroller.scrollbarPad = scrollbarPad;
					scrollbar[verb]({
						x: mathFloor(scrX) + (scrollbarStrokeWidth % 2 / 2),
						width: scrWidth
					});

					centerBarX = scrollbarHeight + zoomedMin + range / 2 - 0.5;

					scroller.scrollbarRifles
						.attr({
							visibility: range > 12 ? VISIBLE : HIDDEN
						})[verb]({
							d: [
								M,
								centerBarX - 3, scrollbarHeight / 4,
								L,
								centerBarX - 3, 2 * scrollbarHeight / 3,
								M,
								centerBarX, scrollbarHeight / 4,
								L,
								centerBarX, 2 * scrollbarHeight / 3,
								M,
								centerBarX + 3, scrollbarHeight / 4,
								L,
								centerBarX + 3, 2 * scrollbarHeight / 3
							]
						});
				}

				scroller.scrollbarPad = scrollbarPad;
				scroller.rendered = true;
			},

			/**
			 * Set up the mouse and touch events for the navigator and scrollbar
			 */
			addEvents: function () {
				var container = this.chart.container,
					mouseDownHandler = this.mouseDownHandler,
					mouseMoveHandler = this.mouseMoveHandler,
					mouseUpHandler = this.mouseUpHandler,
					_events;

				// Mouse events
				_events = [
					[container, 'mousedown', mouseDownHandler],
					[container, 'mousemove', mouseMoveHandler],
					[document, 'mouseup', mouseUpHandler]
				];

				// Touch events
				if (hasTouch) {
					_events.push(
						[container, 'touchstart', mouseDownHandler],
						[container, 'touchmove', mouseMoveHandler],
						[document, 'touchend', mouseUpHandler]
					);
				}

				// Add them all
				each(_events, function (args) {
					addEvent.apply(null, args);
				});
				this._events = _events;
			},

			/**
			 * Removes the event handlers attached previously with addEvents.
			 */
			removeEvents: function () {

				each(this._events, function (args) {
					removeEvent.apply(null, args);
				});
				this._events = UNDEFINED;
				if (this.navigatorEnabled && this.baseSeries) {
					removeEvent(this.baseSeries, 'updatedData', this.updatedDataHandler);
				}
			},

			/**
			 * Initiate the Scroller object
			 */
			init: function () {
				var scroller = this,
					chart = scroller.chart,
					xAxis,
					yAxis,
					scrollbarHeight = scroller.scrollbarHeight,
					navigatorOptions = scroller.navigatorOptions,
					height = scroller.height,
					top = scroller.top,
					dragOffset,
					hasDragged,
					baseSeries = scroller.baseSeries;

				/**
				 * Event handler for the mouse down event.
				 */
				scroller.mouseDownHandler = function (e) {
					e = chart.pointer.normalize(e);

					var zoomedMin = scroller.zoomedMin,
						zoomedMax = scroller.zoomedMax,
						top = scroller.top,
						scrollbarHeight = scroller.scrollbarHeight,
						scrollerLeft = scroller.scrollerLeft,
						scrollerWidth = scroller.scrollerWidth,
						navigatorLeft = scroller.navigatorLeft,
						navigatorWidth = scroller.navigatorWidth,
						scrollbarPad = scroller.scrollbarPad,
						range = scroller.range,
						chartX = e.chartX,
						chartY = e.chartY,
						baseXAxis = chart.xAxis[0],
						fixedMax,
						ext,
						handleSensitivity = isTouchDevice ? 10 : 7,
						left,
						isOnNavigator;

					if (chartY > top && chartY < top + height + scrollbarHeight) { // we're vertically inside the navigator
						isOnNavigator = !scroller.scrollbarEnabled || chartY < top + height;

						// grab the left handle
						if (isOnNavigator && math.abs(chartX - zoomedMin - navigatorLeft) < handleSensitivity) {
							scroller.grabbedLeft = true;
							scroller.otherHandlePos = zoomedMax;
							scroller.fixedExtreme = baseXAxis.max;
							chart.fixedRange = null;

						// grab the right handle
						} else if (isOnNavigator && math.abs(chartX - zoomedMax - navigatorLeft) < handleSensitivity) {
							scroller.grabbedRight = true;
							scroller.otherHandlePos = zoomedMin;
							scroller.fixedExtreme = baseXAxis.min;
							chart.fixedRange = null;

						// grab the zoomed range
						} else if (chartX > navigatorLeft + zoomedMin - scrollbarPad && chartX < navigatorLeft + zoomedMax + scrollbarPad) {
							scroller.grabbedCenter = chartX;
							scroller.fixedWidth = range;

							dragOffset = chartX - zoomedMin;


						// shift the range by clicking on shaded areas, scrollbar track or scrollbar buttons
						} else if (chartX > scrollerLeft && chartX < scrollerLeft + scrollerWidth) {

							// Center around the clicked point
							if (isOnNavigator) {
								left = chartX - navigatorLeft - range / 2;
							
							// Click on scrollbar
							} else {

								// Click left scrollbar button
								if (chartX < navigatorLeft) { 
									left = zoomedMin - range * 0.2;

								// Click right scrollbar button
								} else if (chartX > scrollerLeft + scrollerWidth - scrollbarHeight) {
									left = zoomedMin + range * 0.2;
								
								// Click on scrollbar track, shift the scrollbar by one range
								} else {
									left = chartX < navigatorLeft + zoomedMin ? // on the left
										zoomedMin - range :
										zoomedMax;
								}
							}
							if (left < 0) {
								left = 0;
							} else if (left + range >= navigatorWidth) {
								left = navigatorWidth - range;
								fixedMax = scroller.getUnionExtremes().dataMax; // #2293, #3543
							}
							if (left !== zoomedMin) { // it has actually moved
								scroller.fixedWidth = range; // #1370

								ext = xAxis.toFixedRange(left, left + range, null, fixedMax);
								baseXAxis.setExtremes(
									ext.min,
									ext.max,
									true,
									false,
									{ trigger: 'navigator' }
								);
							}
						}

					}
				};

				/**
				 * Event handler for the mouse move event.
				 */
				scroller.mouseMoveHandler = function (e) {
					var scrollbarHeight = scroller.scrollbarHeight,
						navigatorLeft = scroller.navigatorLeft,
						navigatorWidth = scroller.navigatorWidth,
						scrollerLeft = scroller.scrollerLeft,
						scrollerWidth = scroller.scrollerWidth,
						range = scroller.range,
						chartX;

					// In iOS, a mousemove event with e.pageX === 0 is fired when holding the finger
					// down in the center of the scrollbar. This should be ignored.
					if (e.pageX !== 0) {

						e = chart.pointer.normalize(e);
						chartX = e.chartX;

						// validation for handle dragging
						if (chartX < navigatorLeft) {
							chartX = navigatorLeft;
						} else if (chartX > scrollerLeft + scrollerWidth - scrollbarHeight) {
							chartX = scrollerLeft + scrollerWidth - scrollbarHeight;
						}

						// drag left handle
						if (scroller.grabbedLeft) {
							hasDragged = true;
							scroller.render(0, 0, chartX - navigatorLeft, scroller.otherHandlePos);

						// drag right handle
						} else if (scroller.grabbedRight) {
							hasDragged = true;
							scroller.render(0, 0, scroller.otherHandlePos, chartX - navigatorLeft);

						// drag scrollbar or open area in navigator
						} else if (scroller.grabbedCenter) {

							hasDragged = true;
							if (chartX < dragOffset) { // outside left
								chartX = dragOffset;
							} else if (chartX > navigatorWidth + dragOffset - range) { // outside right
								chartX = navigatorWidth + dragOffset - range;
							}

							scroller.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);

						}
						if (hasDragged && scroller.scrollbarOptions.liveRedraw) {
							setTimeout(function () {
								scroller.mouseUpHandler(e);
							}, 0);
						}
					}
				};

				/**
				 * Event handler for the mouse up event.
				 */
				scroller.mouseUpHandler = function (e) {
					var ext,
						fixedMin,
						fixedMax;

					if (hasDragged) {
						// When dragging one handle, make sure the other one doesn't change
						if (scroller.zoomedMin === scroller.otherHandlePos) {
							fixedMin = scroller.fixedExtreme;
						} else if (scroller.zoomedMax === scroller.otherHandlePos) {
							fixedMax = scroller.fixedExtreme;
						}
						
						ext = xAxis.toFixedRange(scroller.zoomedMin, scroller.zoomedMax, fixedMin, fixedMax);
						chart.xAxis[0].setExtremes(
							ext.min,
							ext.max,
							true,
							false,
							{
								trigger: 'navigator',
								triggerOp: 'navigator-drag',
								DOMEvent: e // #1838
							}
						);
					}

					if (e.type !== 'mousemove') {
						scroller.grabbedLeft = scroller.grabbedRight = scroller.grabbedCenter = scroller.fixedWidth =
							scroller.fixedExtreme = scroller.otherHandlePos = hasDragged = dragOffset = null;
					}

				};



				var xAxisIndex = chart.xAxis.length,
					yAxisIndex = chart.yAxis.length;

				// make room below the chart
				chart.extraBottomMargin = scroller.outlineHeight + navigatorOptions.margin;

				if (scroller.navigatorEnabled) {
					// an x axis is required for scrollbar also
					scroller.xAxis = xAxis = new Axis(chart, merge({
						// inherit base xAxis' break and ordinal options
						breaks: baseSeries && baseSeries.xAxis.options.breaks,
						ordinal: baseSeries && baseSeries.xAxis.options.ordinal 
					}, navigatorOptions.xAxis, {
						id: 'navigator-x-axis',
						isX: true,
						type: 'datetime',
						index: xAxisIndex,
						height: height,
						offset: 0,
						offsetLeft: scrollbarHeight,
						offsetRight: -scrollbarHeight,
						keepOrdinalPadding: true, // #2436
						startOnTick: false,
						endOnTick: false,
						minPadding: 0,
						maxPadding: 0,
						zoomEnabled: false
					}));

					scroller.yAxis = yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {
						id: 'navigator-y-axis',
						alignTicks: false,
						height: height,
						offset: 0,
						index: yAxisIndex,
						zoomEnabled: false
					}));

					// If we have a base series, initialize the navigator series
					if (baseSeries || navigatorOptions.series.data) {
						scroller.addBaseSeries();

					// If not, set up an event to listen for added series
					} else if (chart.series.length === 0) {

						wrap(chart, 'redraw', function (proceed, animation) {
							// We've got one, now add it as base and reset chart.redraw
							if (chart.series.length > 0 && !scroller.series) {
								scroller.setBaseSeries();
								chart.redraw = proceed; // reset
							}
							proceed.call(chart, animation);
						});
					}


				// in case of scrollbar only, fake an x axis to get translation
				} else {
					scroller.xAxis = xAxis = {
						translate: function (value, reverse) {
							var axis = chart.xAxis[0],
								ext = axis.getExtremes(),
								scrollTrackWidth = chart.plotWidth - 2 * scrollbarHeight,
								min = numExt('min', axis.options.min, ext.dataMin),
								valueRange = numExt('max', axis.options.max, ext.dataMax) - min;

							return reverse ?
								// from pixel to value
								(value * valueRange / scrollTrackWidth) + min :
								// from value to pixel
								scrollTrackWidth * (value - min) / valueRange;
						},
						toFixedRange: Axis.prototype.toFixedRange
					};
				}


				/**
				 * For stock charts, extend the Chart.getMargins method so that we can set the final top position
				 * of the navigator once the height of the chart, including the legend, is determined. #367.
				 */
				wrap(chart, 'getMargins', function (proceed) {

					var legend = this.legend,
						legendOptions = legend.options;

					proceed.apply(this, [].slice.call(arguments, 1));

					// Compute the top position
					scroller.top = top = scroller.navigatorOptions.top ||
						this.chartHeight - scroller.height - scroller.scrollbarHeight - this.spacing[2] -
								(legendOptions.verticalAlign === 'bottom' && legendOptions.enabled && !legendOptions.floating ?
									legend.legendHeight + pick(legendOptions.margin, 10) : 0);

					if (xAxis && yAxis) { // false if navigator is disabled (#904)

						xAxis.options.top = yAxis.options.top = top;

						xAxis.setAxisSize();
						yAxis.setAxisSize();
					}
				});


				scroller.addEvents();
			},

			/**
			 * Get the union data extremes of the chart - the outer data extremes of the base
			 * X axis and the navigator axis.
			 */
			getUnionExtremes: function (returnFalseOnNoBaseSeries) {
				var baseAxis = this.chart.xAxis[0],
					navAxis = this.xAxis,
					navAxisOptions = navAxis.options,
					baseAxisOptions = baseAxis.options,
					ret;

				if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {
					ret = {
						dataMin: pick( // #4053
							navAxisOptions && navAxisOptions.min, 
							numExt(
								'min',
								baseAxisOptions.min,
								baseAxis.dataMin, 
								navAxis.dataMin
							)
						),
						dataMax: pick(
							navAxisOptions && navAxisOptions.max,
							numExt(
								'max',
								baseAxisOptions.max,
								baseAxis.dataMax, 
								navAxis.dataMax
							)
						)
					};
				}
				return ret;
			},

			/**
			 * Set the base series. With a bit of modification we should be able to make
			 * this an API method to be called from the outside
			 */
			setBaseSeries: function (baseSeriesOption) {
				var chart = this.chart;

				baseSeriesOption = baseSeriesOption || chart.options.navigator.baseSeries;

				// If we're resetting, remove the existing series
				if (this.series) {
					this.series.remove();
				}

				// Set the new base series
				this.baseSeries = chart.series[baseSeriesOption] ||
					(typeof baseSeriesOption === 'string' && chart.get(baseSeriesOption)) ||
					chart.series[0];

				// When run after render, this.xAxis already exists
				if (this.xAxis) {
					this.addBaseSeries();
				}
			},

			addBaseSeries: function () {
				var baseSeries = this.baseSeries,
					baseOptions = baseSeries ? baseSeries.options : {},
					baseData = baseOptions.data,
					mergedNavSeriesOptions,
					navigatorSeriesOptions = this.navigatorOptions.series,
					navigatorData;

				// remove it to prevent merging one by one
				navigatorData = navigatorSeriesOptions.data;
				this.hasNavigatorData = !!navigatorData;

				// Merge the series options
				mergedNavSeriesOptions = merge(baseOptions, navigatorSeriesOptions, {
					enableMouseTracking: false,
					group: 'nav', // for columns
					padXAxis: false,
					xAxis: 'navigator-x-axis',
					yAxis: 'navigator-y-axis',
					name: 'Navigator',
					showInLegend: false,
					isInternal: true,
					visible: true
				});

				// set the data back
				mergedNavSeriesOptions.data = navigatorData || baseData;

				// add the series
				this.series = this.chart.initSeries(mergedNavSeriesOptions);

				// Respond to updated data in the base series.
				// Abort if lazy-loading data from the server.
				if (baseSeries && this.navigatorOptions.adaptToUpdatedData !== false) {
					addEvent(baseSeries, 'updatedData', this.updatedDataHandler);
					// Survive Series.update()
					baseSeries.userOptions.events = extend(baseSeries.userOptions.event, { updatedData: this.updatedDataHandler });

				}
			},

			updatedDataHandler: function () {
				var scroller = this.chart.scroller,
					baseSeries = scroller.baseSeries,
					baseXAxis = baseSeries.xAxis,
					baseExtremes = baseXAxis.getExtremes(),
					baseMin = baseExtremes.min,
					baseMax = baseExtremes.max,
					baseDataMin = baseExtremes.dataMin,
					baseDataMax = baseExtremes.dataMax,
					range = baseMax - baseMin,
					stickToMin,
					stickToMax,
					newMax,
					newMin,
					doRedraw,
					navigatorSeries = scroller.series,
					navXData = navigatorSeries.xData,
					hasSetExtremes = !!baseXAxis.setExtremes;

				// detect whether to move the range
				stickToMax = baseMax >= navXData[navXData.length - 1] - (this.closestPointRange || 0); // #570
				stickToMin = baseMin <= baseDataMin;

				// set the navigator series data to the new data of the base series
				if (!scroller.hasNavigatorData) {
					navigatorSeries.options.pointStart = baseSeries.xData[0];
					navigatorSeries.setData(baseSeries.options.data, false);
					doRedraw = true;
				}

				// if the zoomed range is already at the min, move it to the right as new data
				// comes in
				if (stickToMin) {
					newMin = baseDataMin;
					newMax = newMin + range;
				}

				// if the zoomed range is already at the max, move it to the right as new data
				// comes in
				if (stickToMax) {
					newMax = baseDataMax;
					if (!stickToMin) { // if stickToMin is true, the new min value is set above
						newMin = mathMax(newMax - range, navigatorSeries.xData[0]);
					}
				}

				// update the extremes
				if (hasSetExtremes && (stickToMin || stickToMax)) {
					if (!isNaN(newMin)) {
						baseXAxis.setExtremes(newMin, newMax, true, false, { trigger: 'updatedData' });
					}

				// if it is not at any edge, just move the scroller window to reflect the new series data
				} else {
					if (doRedraw) {
						this.chart.redraw(false);
					}

					scroller.render(
						mathMax(baseMin, baseDataMin),
						mathMin(baseMax, baseDataMax)
					);
				}
			},

			/**
			 * Destroys allocated elements.
			 */
			destroy: function () {
				var scroller = this;

				// Disconnect events added in addEvents
				scroller.removeEvents();

				// Destroy properties
				each([scroller.xAxis, scroller.yAxis, scroller.leftShade, scroller.rightShade, scroller.outline, scroller.scrollbarTrack, scroller.scrollbarRifles, scroller.scrollbarGroup, scroller.scrollbar], function (prop) {
					if (prop && prop.destroy) {
						prop.destroy();
					}
				});
				scroller.xAxis = scroller.yAxis = scroller.leftShade = scroller.rightShade = scroller.outline = scroller.scrollbarTrack = scroller.scrollbarRifles = scroller.scrollbarGroup = scroller.scrollbar = null;

				// Destroy elements in collection
				each([scroller.scrollbarButtons, scroller.handles, scroller.elementsToDestroy], function (coll) {
					destroyObjectProperties(coll);
				});
			}
		};

		Highcharts.Scroller = Scroller;


		/**
		 * For Stock charts, override selection zooming with some special features because
		 * X axis zooming is already allowed by the Navigator and Range selector.
		 */
		wrap(Axis.prototype, 'zoom', function (proceed, newMin, newMax) {
			var chart = this.chart,
				chartOptions = chart.options,
				zoomType = chartOptions.chart.zoomType,
				previousZoom,
				navigator = chartOptions.navigator,
				rangeSelector = chartOptions.rangeSelector,
				ret;

			if (this.isXAxis && ((navigator && navigator.enabled) ||
					(rangeSelector && rangeSelector.enabled))) {

				// For x only zooming, fool the chart.zoom method not to create the zoom button
				// because the property already exists
				if (zoomType === 'x') {
					chart.resetZoomButton = 'blocked';

				// For y only zooming, ignore the X axis completely
				} else if (zoomType === 'y') {
					ret = false;

				// For xy zooming, record the state of the zoom before zoom selection, then when
				// the reset button is pressed, revert to this state
				} else if (zoomType === 'xy') {
					previousZoom = this.previousZoom;
					if (defined(newMin)) {
						this.previousZoom = [this.min, this.max];
					} else if (previousZoom) {
						newMin = previousZoom[0];
						newMax = previousZoom[1];
						delete this.previousZoom;
					}
				}

			}
			return ret !== UNDEFINED ? ret : proceed.call(this, newMin, newMax);
		});

		// Initialize scroller for stock charts
		wrap(Chart.prototype, 'init', function (proceed, options, callback) {

			addEvent(this, 'beforeRender', function () {
				var options = this.options;
				if (options.navigator.enabled || options.scrollbar.enabled) {
					this.scroller = new Scroller(this);
				}
			});

			proceed.call(this, options, callback);

		});

		// Pick up badly formatted point options to addPoint
		wrap(Series.prototype, 'addPoint', function (proceed, options, redraw, shift, animation) {
			var turboThreshold = this.options.turboThreshold;
			if (turboThreshold && this.xData.length > turboThreshold && isObject(options) && !isArray(options) && this.chart.scroller) {
				error(20, true);
			}
			proceed.call(this, options, redraw, shift, animation);
		});

		/* ****************************************************************************
		 * End Scroller code														  *
		 *****************************************************************************/
		/* ****************************************************************************
		 * Start Range Selector code												  *
		 *****************************************************************************/
		extend(defaultOptions, {
			rangeSelector: {
				// allButtonsEnabled: false,
				// enabled: true,
				// buttons: {Object}
				// buttonSpacing: 0,
				buttonTheme: {
					width: 28,
					height: 18,
					fill: '#f7f7f7',
					padding: 2,
					r: 0,
					'stroke-width': 0,
					style: {
						color: '#444',
						cursor: 'pointer',
						fontWeight: 'normal'
					},
					zIndex: 7, // #484, #852
					states: {
						hover: {
							fill: '#e7e7e7'
						},
						select: {
							fill: '#e7f0f9',
							style: {
								color: 'black',
								fontWeight: 'bold'
							}
						}
					}
				},
				inputPosition: {
					align: 'right'
				},
				// inputDateFormat: '%b %e, %Y',
				// inputEditDateFormat: '%Y-%m-%d',
				// inputEnabled: true,
				// inputStyle: {},
				labelStyle: {
					color: '#666'
				}
				// selected: undefined
			}
		});
		defaultOptions.lang = merge(defaultOptions.lang, {
			rangeSelectorZoom: 'Zoom',
			rangeSelectorFrom: 'From',
			rangeSelectorTo: 'To'
		});

		/**
		 * The object constructor for the range selector
		 * @param {Object} chart
		 */
		function RangeSelector(chart) {

			// Run RangeSelector
			this.init(chart);
		}

		RangeSelector.prototype = {
			/**
			 * The method to run when one of the buttons in the range selectors is clicked
			 * @param {Number} i The index of the button
			 * @param {Object} rangeOptions
			 * @param {Boolean} redraw
			 */
			clickButton: function (i, redraw) {
				var rangeSelector = this,
					selected = rangeSelector.selected,
					chart = rangeSelector.chart,
					buttons = rangeSelector.buttons,
					rangeOptions = rangeSelector.buttonOptions[i],
					baseAxis = chart.xAxis[0],
					unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {},
					dataMin = unionExtremes.dataMin,
					dataMax = unionExtremes.dataMax,
					newMin,
					newMax = baseAxis && mathRound(mathMin(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568
					now,
					type = rangeOptions.type,
					baseXAxisOptions,
					range = rangeOptions._range,
					rangeMin,
					year,
					minSetting,
					rangeSetting,
					ctx,
					dataGrouping = rangeOptions.dataGrouping;

				if (dataMin === null || dataMax === null || // chart has no data, base series is removed
						i === rangeSelector.selected) { // same button is clicked twice
					return;
				}

				// Set the fixed range before range is altered
				chart.fixedRange = range;

				// Apply dataGrouping associated to button
				if (dataGrouping) {
					this.forcedDataGrouping = true;			
					Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);
				}

				// Apply range
				if (type === 'month' || type === 'year') {
					if (!baseAxis) {
						// This is set to the user options and picked up later when the axis is instantiated
						// so that we know the min and max.
						range = rangeOptions;
					} else {
						ctx = {
							range: rangeOptions,
							max: newMax,
							dataMin: dataMin,
							dataMax: dataMax
						};
						newMin = baseAxis.minFromRange.call(ctx);
						if (typeof ctx.newMax === 'number') {
							newMax = ctx.newMax;
						}
					}

				// Fixed times like minutes, hours, days
				} else if (range) {
					newMin = mathMax(newMax - range, dataMin);
					newMax = mathMin(newMin + range, dataMax);
				
				} else if (type === 'ytd') {

					// On user clicks on the buttons, or a delayed action running from the beforeRender 
					// event (below), the baseAxis is defined.
					if (baseAxis) {

						// When "ytd" is the pre-selected button for the initial view, its calculation
						// is delayed and rerun in the beforeRender event (below). When the series
						// are initialized, but before the chart is rendered, we have access to the xData
						// array (#942).
						if (dataMax === UNDEFINED) {
							dataMin = Number.MAX_VALUE;
							dataMax = Number.MIN_VALUE;
							each(chart.series, function (series) {
								var xData = series.xData; // reassign it to the last item
								dataMin = mathMin(xData[0], dataMin);
								dataMax = mathMax(xData[xData.length - 1], dataMax);
							});
							redraw = false;
						}
						now = new Date(dataMax);
						year = now.getFullYear();
						newMin = rangeMin = mathMax(dataMin || 0, Date.UTC(year, 0, 1));
						now = now.getTime();
						newMax = mathMin(dataMax || now, now);

					// "ytd" is pre-selected. We don't yet have access to processed point and extremes data
					// (things like pointStart and pointInterval are missing), so we delay the process (#942)
					} else {
						addEvent(chart, 'beforeRender', function () {
							rangeSelector.clickButton(i);
						});
						return;
					}
				} else if (type === 'all' && baseAxis) {
					newMin = dataMin;
					newMax = dataMax;
				}

				// Deselect previous button
				if (buttons[selected]) {
					buttons[selected].setState(0);
				}
				// Select this button
				if (buttons[i]) {
					buttons[i].setState(2);
				}

				// Update the chart
				if (!baseAxis) { 
					// Axis not yet instanciated. Temporarily set min and range
					// options and remove them on chart load (#4317).
					baseXAxisOptions = chart.options.xAxis[0];
					rangeSetting = baseXAxisOptions.range;
					baseXAxisOptions.range = range;
					minSetting = baseXAxisOptions.min;
					baseXAxisOptions.min = rangeMin;
					rangeSelector.setSelected(i);
					addEvent(chart, 'load', function resetMinAndRange() {
						baseXAxisOptions.range = rangeSetting;
						baseXAxisOptions.min = minSetting;
					});
				} else {
					// Existing axis object. Set extremes after render time.
					baseAxis.setExtremes(
						newMin,
						newMax,
						pick(redraw, 1),
						0, 
						{ 
							trigger: 'rangeSelectorButton',
							rangeSelectorButton: rangeOptions
						}
					);
					rangeSelector.setSelected(i);
				}
			},

			/**
			 * Set the selected option. This method only sets the internal flag, it doesn't
			 * update the buttons or the actual zoomed range.
			 */
			setSelected: function (selected) {
				this.selected = this.options.selected = selected;
			},
			
			/**
			 * The default buttons for pre-selecting time frames
			 */
			defaultButtons: [{
				type: 'month',
				count: 1,
				text: '1m'
			}, {
				type: 'month',
				count: 3,
				text: '3m'
			}, {
				type: 'month',
				count: 6,
				text: '6m'
			}, {
				type: 'ytd',
				text: 'YTD'
			}, {
				type: 'year',
				count: 1,
				text: '1y'
			}, {
				type: 'all',
				text: 'All'
			}],

			/**
			 * Initialize the range selector
			 */
			init: function (chart) {
				
				var rangeSelector = this,
					options = chart.options.rangeSelector,
					buttonOptions = options.buttons || [].concat(rangeSelector.defaultButtons),
					selectedOption = options.selected,
					blurInputs = rangeSelector.blurInputs = function () {
						var minInput = rangeSelector.minInput,
							maxInput = rangeSelector.maxInput;
						if (minInput && minInput.blur) { //#3274 in some case blur is not defined
							fireEvent(minInput, 'blur'); //#3274
						}
						if (maxInput && maxInput.blur) { //#3274 in some case blur is not defined
							fireEvent(maxInput, 'blur'); //#3274
						}
					};

				rangeSelector.chart = chart;
				rangeSelector.options = options;
				rangeSelector.buttons = [];
				
				chart.extraTopMargin = 35;
				rangeSelector.buttonOptions = buttonOptions;

				addEvent(chart.container, 'mousedown', blurInputs);
				addEvent(chart, 'resize', blurInputs);

				// Extend the buttonOptions with actual range
				each(buttonOptions, rangeSelector.computeButtonRange);

				// zoomed range based on a pre-selected button index
				if (selectedOption !== UNDEFINED && buttonOptions[selectedOption]) {
					this.clickButton(selectedOption, false);
				}


				addEvent(chart, 'load', function () {
					// If a data grouping is applied to the current button, release it when extremes change
					addEvent(chart.xAxis[0], 'setExtremes', function (e) {
						if (this.max - this.min !== chart.fixedRange && e.trigger !== 'rangeSelectorButton' &&
								e.trigger !== 'updatedData' && rangeSelector.forcedDataGrouping) {
							this.setDataGrouping(false, false);
						}
					});
					// Normalize the pressed button whenever a new range is selected
					addEvent(chart.xAxis[0], 'afterSetExtremes', function () {
						rangeSelector.updateButtonStates(true);
					});
				});
			},

			/**
			 * Dynamically update the range selector buttons after a new range has been set
			 */
			updateButtonStates: function (updating) {
				var rangeSelector = this,
					chart = this.chart,
					baseAxis = chart.xAxis[0],
					unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis,
					dataMin = unionExtremes.dataMin,
					dataMax = unionExtremes.dataMax,
					selected = rangeSelector.selected,
					allButtonsEnabled = rangeSelector.options.allButtonsEnabled,
					buttons = rangeSelector.buttons;

				if (updating && chart.fixedRange !== mathRound(baseAxis.max - baseAxis.min)) {
					if (buttons[selected]) {
						buttons[selected].setState(0);
					}
					rangeSelector.setSelected(null);
				}

				each(rangeSelector.buttonOptions, function (rangeOptions, i) {
					var actualRange = mathRound(baseAxis.max - baseAxis.min),
						range = rangeOptions._range,
						type = rangeOptions.type,
						count = rangeOptions.count || 1,
						// Disable buttons where the range exceeds what is allowed in the current view
						isTooGreatRange = range > dataMax - dataMin,
						// Disable buttons where the range is smaller than the minimum range
						isTooSmallRange = range < baseAxis.minRange,
						// Disable the All button if we're already showing all 
						isAllButAlreadyShowingAll = rangeOptions.type === 'all' && baseAxis.max - baseAxis.min >= dataMax - dataMin && 
							buttons[i].state !== 2,
						// Disable the YTD button if the complete range is within the same year
						isYTDButNotAvailable = rangeOptions.type === 'ytd' && dateFormat('%Y', dataMin) === dateFormat('%Y', dataMax),
						// Set a button on export
						isSelectedForExport = chart.renderer.forExport && i === selected,

						isSameRange = range === actualRange;

					// Months and years have a variable range so we check the extremes
					if ((type === 'month' || type === 'year') && (actualRange >= { month: 28, year: 365 }[type] * 24 * 36e5 * count) && 
							(actualRange <= { month: 31, year: 366 }[type] * 24 * 36e5 * count)) {
						isSameRange = true;
					}
					// The new zoom area happens to match the range for a button - mark it selected.
					// This happens when scrolling across an ordinal gap. It can be seen in the intraday
					// demos when selecting 1h and scroll across the night gap.
					if (isSelectedForExport || (isSameRange && i !== selected)) {
						rangeSelector.setSelected(i);
						buttons[i].setState(2);
					
					} else if (!allButtonsEnabled && (isTooGreatRange || isTooSmallRange || isAllButAlreadyShowingAll || isYTDButNotAvailable)) {
						buttons[i].setState(3);

					} else if (buttons[i].state === 3) {
						buttons[i].setState(0);
					}
				});
			},

			/** 
			 * Compute and cache the range for an individual button
			 */
			computeButtonRange: function (rangeOptions) {
				var type = rangeOptions.type,
					count = rangeOptions.count || 1,

					// these time intervals have a fixed number of milliseconds, as opposed
					// to month, ytd and year
					fixedTimes = {
						millisecond: 1,
						second: 1000,
						minute: 60 * 1000,
						hour: 3600 * 1000,
						day: 24 * 3600 * 1000,
						week: 7 * 24 * 3600 * 1000
					};
				
				// Store the range on the button object
				if (fixedTimes[type]) {
					rangeOptions._range = fixedTimes[type] * count;				
				} else if (type === 'month' || type === 'year') {
					rangeOptions._range = { month: 30, year: 365 }[type] * 24 * 36e5 * count;
				}
			},
			
			/**
			 * Set the internal and displayed value of a HTML input for the dates
			 * @param {String} name
			 * @param {Number} time
			 */
			setInputValue: function (name, time) {
				var options = this.chart.options.rangeSelector;

				if (defined(time)) {
					this[name + 'Input'].HCTime = time;
				}
				
				this[name + 'Input'].value = dateFormat(options.inputEditDateFormat || '%Y-%m-%d', this[name + 'Input'].HCTime);
				this[name + 'DateBox'].attr({ text: dateFormat(options.inputDateFormat || '%b %e, %Y', this[name + 'Input'].HCTime) });
			},

			showInput: function (name) {
				var inputGroup = this.inputGroup,
					dateBox = this[name + 'DateBox'];

				css(this[name + 'Input'], {
					left: (inputGroup.translateX + dateBox.x) + PX,
					top: inputGroup.translateY + PX,
					width: (dateBox.width - 2) + PX,
					height: (dateBox.height - 2) + PX,
					border: '2px solid silver'
				});
			},

			hideInput: function (name) {
				css(this[name + 'Input'], {
					border: 0,
					width: '1px',
					height: '1px'
				});
				this.setInputValue(name);
			},

			/**
			 * Draw either the 'from' or the 'to' HTML input box of the range selector
			 * @param {Object} name
			 */
			drawInput: function (name) {
				var rangeSelector = this,
					chart = rangeSelector.chart,
					chartStyle = chart.renderer.style,
					renderer = chart.renderer,
					options = chart.options.rangeSelector,
					lang = defaultOptions.lang,
					div = rangeSelector.div,
					isMin = name === 'min',
					input,
					label,
					dateBox,
					inputGroup = this.inputGroup;

				// Create the text label
				this[name + 'Label'] = label = renderer.label(lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'], this.inputGroup.offset)
					.attr({
						padding: 2
					})
					.css(merge(chartStyle, options.labelStyle))
					.add(inputGroup);
				inputGroup.offset += label.width + 5;
				
				// Create an SVG label that shows updated date ranges and and records click events that 
				// bring in the HTML input.
				this[name + 'DateBox'] = dateBox = renderer.label('', inputGroup.offset)
					.attr({
						padding: 2,
						width: options.inputBoxWidth || 90,
						height: options.inputBoxHeight || 17,
						stroke: options.inputBoxBorderColor || 'silver',
						'stroke-width': 1
					})
					.css(merge({
						textAlign: 'center',
						color: '#444'
					}, chartStyle, options.inputStyle))
					.on('click', function () {
						rangeSelector.showInput(name); // If it is already focused, the onfocus event doesn't fire (#3713)
						rangeSelector[name + 'Input'].focus();
					})
					.add(inputGroup);
				inputGroup.offset += dateBox.width + (isMin ? 10 : 0);
				

				// Create the HTML input element. This is rendered as 1x1 pixel then set to the right size 
				// when focused.
				this[name + 'Input'] = input = createElement('input', {
					name: name,
					className: PREFIX + 'range-selector',
					type: 'text'
				}, extend({
					position: ABSOLUTE,
					border: 0,
					width: '1px', // Chrome needs a pixel to see it
					height: '1px',
					padding: 0,
					textAlign: 'center',
					fontSize: chartStyle.fontSize,
					fontFamily: chartStyle.fontFamily,
					top: chart.plotTop + PX // prevent jump on focus in Firefox
				}, options.inputStyle), div);

				// Blow up the input box
				input.onfocus = function () {
					rangeSelector.showInput(name);
				};
				// Hide away the input box
				input.onblur = function () {
					rangeSelector.hideInput(name);
				};

				// handle changes in the input boxes
				input.onchange = function () {
					var inputValue = input.value,
						value = (options.inputDateParser || Date.parse)(inputValue),
						xAxis = chart.xAxis[0],
						dataMin = xAxis.dataMin,
						dataMax = xAxis.dataMax;

					// If the value isn't parsed directly to a value by the browser's Date.parse method,
					// like YYYY-MM-DD in IE, try parsing it a different way
					if (isNaN(value)) {
						value = inputValue.split('-');
						value = Date.UTC(pInt(value[0]), pInt(value[1]) - 1, pInt(value[2]));
					}

					if (!isNaN(value)) {

						// Correct for timezone offset (#433)
						if (!defaultOptions.global.useUTC) {
							value = value + new Date().getTimezoneOffset() * 60 * 1000;
						}

						// Validate the extremes. If it goes beyound the data min or max, use the
						// actual data extreme (#2438).
						if (isMin) {
							if (value > rangeSelector.maxInput.HCTime) {
								value = UNDEFINED;
							} else if (value < dataMin) {
								value = dataMin;
							}
						} else {
							if (value < rangeSelector.minInput.HCTime) {
								value = UNDEFINED;
							} else if (value > dataMax) {
								value = dataMax;
							}
						}

						// Set the extremes
						if (value !== UNDEFINED) {
							chart.xAxis[0].setExtremes(
								isMin ? value : xAxis.min,
								isMin ? xAxis.max : value,
								UNDEFINED,
								UNDEFINED,
								{ trigger: 'rangeSelectorInput' }
							);
						}
					}
				};
			},

			/** 
			 * Get the position of the range selector buttons and inputs. This can be overridden from outside for custom positioning.
			 */
			getPosition: function () {
				var chart = this.chart,
					options = chart.options.rangeSelector,
					buttonTop = pick((options.buttonPosition || {}).y, chart.plotTop - chart.axisOffset[0] - 35);
					
				return {
					buttonTop: buttonTop,
					inputTop: buttonTop - 10
				};
			},

			/**
			 * Render the range selector including the buttons and the inputs. The first time render
			 * is called, the elements are created and positioned. On subsequent calls, they are
			 * moved and updated.
			 * @param {Number} min X axis minimum
			 * @param {Number} max X axis maximum
			 */
			render: function (min, max) {

				var rangeSelector = this,
					chart = rangeSelector.chart,
					renderer = chart.renderer,
					container = chart.container,
					chartOptions = chart.options,
					navButtonOptions = chartOptions.exporting && chartOptions.navigation && chartOptions.navigation.buttonOptions, 
					options = chartOptions.rangeSelector,
					buttons = rangeSelector.buttons,
					lang = defaultOptions.lang,
					div = rangeSelector.div,
					inputGroup = rangeSelector.inputGroup,
					buttonTheme = options.buttonTheme,
					buttonPosition = options.buttonPosition || {},
					inputEnabled = options.inputEnabled,
					states = buttonTheme && buttonTheme.states,
					plotLeft = chart.plotLeft,
					buttonLeft,
					pos = this.getPosition(),
					buttonGroup = rangeSelector.group,
					buttonBBox,
					rendered = rangeSelector.rendered;


				// create the elements
				if (!rendered) {

					rangeSelector.group = buttonGroup = renderer.g('range-selector-buttons').add();

					rangeSelector.zoomText = renderer.text(lang.rangeSelectorZoom, pick(buttonPosition.x, plotLeft), 15)
						.css(options.labelStyle)
						.add(buttonGroup);

					// button starting position
					buttonLeft = pick(buttonPosition.x, plotLeft) + rangeSelector.zoomText.getBBox().width + 5;

					each(rangeSelector.buttonOptions, function (rangeOptions, i) {
						buttons[i] = renderer.button(
								rangeOptions.text,
								buttonLeft,
								0,
								function () {
									rangeSelector.clickButton(i);
									rangeSelector.isActive = true;
								},
								buttonTheme,
								states && states.hover,
								states && states.select,
								states && states.disabled
							)
							.css({
								textAlign: 'center'
							})
							.add(buttonGroup);

						// increase button position for the next button
						buttonLeft += buttons[i].width + pick(options.buttonSpacing, 5);

						if (rangeSelector.selected === i) {
							buttons[i].setState(2);
						}
					});

					rangeSelector.updateButtonStates();

					// first create a wrapper outside the container in order to make
					// the inputs work and make export correct
					if (inputEnabled !== false) {
						rangeSelector.div = div = createElement('div', null, {
							position: 'relative',
							height: 0,
							zIndex: 1 // above container
						});

						container.parentNode.insertBefore(div, container);

						// Create the group to keep the inputs
						rangeSelector.inputGroup = inputGroup = renderer.g('input-group')
							.add();
						inputGroup.offset = 0;

						rangeSelector.drawInput('min');
						rangeSelector.drawInput('max');	
					}
				}

				// Set or update the group position
				buttonGroup[rendered ? 'animate' : 'attr']({
					translateY: pos.buttonTop
				});
				
				if (inputEnabled !== false) {
				
					// Update the alignment to the updated spacing box
					inputGroup.align(extend({
						y: pos.inputTop,
						width: inputGroup.offset,
						// Detect collision with the exporting buttons
						x: navButtonOptions && (pos.inputTop < (navButtonOptions.y || 0) + navButtonOptions.height - chart.spacing[0]) ? 
							-40 : 0
					}, options.inputPosition), true, chart.spacingBox);

					// Hide if overlapping - inputEnabled is null or undefined
					if (!defined(inputEnabled)) {
						buttonBBox = buttonGroup.getBBox();
						inputGroup[inputGroup.translateX < buttonBBox.x + buttonBBox.width + 10 ? 'hide' : 'show']();
					}
			
					// Set or reset the input values
					rangeSelector.setInputValue('min', min);
					rangeSelector.setInputValue('max', max);
				}

				rangeSelector.rendered = true;
			},

			/**
			 * Destroys allocated elements.
			 */
			destroy: function () {
				var minInput = this.minInput,
					maxInput = this.maxInput,
					chart = this.chart,
					blurInputs = this.blurInputs,
					key;

				removeEvent(chart.container, 'mousedown', blurInputs);
				removeEvent(chart, 'resize', blurInputs);

				// Destroy elements in collections
				destroyObjectProperties(this.buttons);
				
				// Clear input element events
				if (minInput) {
					minInput.onfocus = minInput.onblur = minInput.onchange = null;
				}
				if (maxInput) {
					maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;
				}

				// Destroy HTML and SVG elements
				for (key in this) {
					if (this[key] && key !== 'chart') {
						if (this[key].destroy) { // SVGElement
							this[key].destroy();
						} else if (this[key].nodeType) { // HTML element
							discardElement(this[key]);
						}
					}
					this[key] = null;
				}
			}
		};

		/**
		 * Add logic to normalize the zoomed range in order to preserve the pressed state of range selector buttons
		 */
		Axis.prototype.toFixedRange = function (pxMin, pxMax, fixedMin, fixedMax) {
			var fixedRange = this.chart && this.chart.fixedRange,
				newMin = pick(fixedMin, this.translate(pxMin, true)),
				newMax = pick(fixedMax, this.translate(pxMax, true)),
				changeRatio = fixedRange && (newMax - newMin) / fixedRange;

			// If the difference between the fixed range and the actual requested range is
			// too great, the user is dragging across an ordinal gap, and we need to release
			// the range selector button.
			if (changeRatio > 0.7 && changeRatio < 1.3) {
				if (fixedMax) {
					newMin = newMax - fixedRange;
				} else {
					newMax = newMin + fixedRange;
				}
			}

			return {
				min: newMin,
				max: newMax
			};
		};

		Axis.prototype.minFromRange = function () {
			var rangeOptions = this.range,
				type = rangeOptions.type,
				timeName = { month: 'Month', year: 'FullYear'}[type],
				min,
				max = this.max,
				date = new Date(max),
				dataMin,
				range;

			if (typeof rangeOptions === 'number') {
				min = this.max - rangeOptions;
				range = rangeOptions;
			} else {
				date['set' + timeName](date['get' + timeName]() - rangeOptions.count);
				min = date.getTime();
			}

			dataMin = pick(this.dataMin, Number.MIN_VALUE);
			if (isNaN(min)) {
				min = dataMin;
			}
			if (min <= dataMin) {
				min = dataMin;
				this.newMax = mathMin(min + range, this.dataMax);
			}
			if (isNaN(max)) {
				min = undefined;
			}
			return min;

		};

		// Initialize scroller for stock charts
		wrap(Chart.prototype, 'init', function (proceed, options, callback) {
			
			addEvent(this, 'init', function () {
				if (this.options.rangeSelector.enabled) {
					this.rangeSelector = new RangeSelector(this);
				}
			});

			proceed.call(this, options, callback);
			
		});


		Highcharts.RangeSelector = RangeSelector;

		/* ****************************************************************************
		 * End Range Selector code													*
		 *****************************************************************************/



		Chart.prototype.callbacks.push(function (chart) {
			var extremes,
				scroller = chart.scroller,
				rangeSelector = chart.rangeSelector;

			function renderScroller() {
				extremes = chart.xAxis[0].getExtremes();
				scroller.render(extremes.min, extremes.max);
			}

			function renderRangeSelector() {
				extremes = chart.xAxis[0].getExtremes();
				if (!isNaN(extremes.min)) {
					rangeSelector.render(extremes.min, extremes.max);
				}
			}

			function afterSetExtremesHandlerScroller(e) {
				if (e.triggerOp !== 'navigator-drag') {
					scroller.render(e.min, e.max);
				}
			}

			function afterSetExtremesHandlerRangeSelector(e) {
				rangeSelector.render(e.min, e.max);
			}

			function destroyEvents() {
				if (scroller) {
					removeEvent(chart.xAxis[0], 'afterSetExtremes', afterSetExtremesHandlerScroller);
				}
				if (rangeSelector) {
					removeEvent(chart, 'resize', renderRangeSelector);
					removeEvent(chart.xAxis[0], 'afterSetExtremes', afterSetExtremesHandlerRangeSelector);
				}
			}

			// initiate the scroller
			if (scroller) {
				// redraw the scroller on setExtremes
				addEvent(chart.xAxis[0], 'afterSetExtremes', afterSetExtremesHandlerScroller);

				// redraw the scroller on chart resize or box resize
				wrap(chart, 'drawChartBox', function (proceed) {
					var isDirtyBox = this.isDirtyBox;
					proceed.call(this);
					if (isDirtyBox) {
						renderScroller();
					}
				});

				// do it now
				renderScroller();
			}
			if (rangeSelector) {
				// redraw the scroller on setExtremes
				addEvent(chart.xAxis[0], 'afterSetExtremes', afterSetExtremesHandlerRangeSelector);

				// redraw the scroller chart resize
				addEvent(chart, 'resize', renderRangeSelector);

				// do it now
				renderRangeSelector();
			}

			// Remove resize/afterSetExtremes at chart destroy
			addEvent(chart, 'destroy', destroyEvents);
		});
		/**
		 * A wrapper for Chart with all the default values for a Stock chart
		 */
		Highcharts.StockChart = function (options, callback) {
			var seriesOptions = options.series, // to increase performance, don't merge the data 
				opposite,

				// Always disable startOnTick:true on the main axis when the navigator is enabled (#1090)
				navigatorEnabled = pick(options.navigator && options.navigator.enabled, true),
				disableStartOnTick = navigatorEnabled ? {
					startOnTick: false,
					endOnTick: false
				} : null,

				lineOptions = {

					marker: {
						enabled: false,
						radius: 2
					}
					// gapSize: 0
				},
				columnOptions = {
					shadow: false,
					borderWidth: 0
				};

			// apply X axis options to both single and multi y axes
			options.xAxis = map(splat(options.xAxis || {}), function (xAxisOptions) {
				return merge({ // defaults
						minPadding: 0,
						maxPadding: 0,
						ordinal: true,
						title: {
							text: null
						},
						labels: {
							overflow: 'justify'
						},
						showLastLabel: true
					}, xAxisOptions, // user options 
					{ // forced options
						type: 'datetime',
						categories: null
					},
					disableStartOnTick
				);
			});

			// apply Y axis options to both single and multi y axes
			options.yAxis = map(splat(options.yAxis || {}), function (yAxisOptions) {
				opposite = pick(yAxisOptions.opposite, true);
				return merge({ // defaults
					labels: {
						y: -2
					},
					opposite: opposite,
					showLastLabel: false,
					title: {
						text: null
					}
				}, yAxisOptions // user options
				);
			});

			options.series = null;

			options = merge({
				chart: {
					panning: true,
					pinchType: 'x'
				},
				navigator: {
					enabled: true
				},
				scrollbar: {
					enabled: true
				},
				rangeSelector: {
					enabled: true
				},
				title: {
					text: null,
					style: {
						fontSize: '16px'
					}
				},
				tooltip: {
					shared: true,
					crosshairs: true
				},
				legend: {
					enabled: false
				},

				plotOptions: {
					line: lineOptions,
					spline: lineOptions,
					area: lineOptions,
					areaspline: lineOptions,
					arearange: lineOptions,
					areasplinerange: lineOptions,
					column: columnOptions,
					columnrange: columnOptions,
					candlestick: columnOptions,
					ohlc: columnOptions
				}

			},
			options, // user's options

			{ // forced options
				_stock: true, // internal flag
				chart: {
					inverted: false
				}
			});

			options.series = seriesOptions;


			return new Chart(options, callback);
		};

		// Implement the pinchType option
		wrap(Pointer.prototype, 'init', function (proceed, chart, options) {

			var pinchType = options.chart.pinchType || '';
				
			proceed.call(this, chart, options);

			// Pinch status
			this.pinchX = this.pinchHor = pinchType.indexOf('x') !== -1;
			this.pinchY = this.pinchVert = pinchType.indexOf('y') !== -1;
			this.hasZoom = this.hasZoom || this.pinchHor || this.pinchVert;
		});

		// Override the automatic label alignment so that the first Y axis' labels
		// are drawn on top of the grid line, and subsequent axes are drawn outside
		wrap(Axis.prototype, 'autoLabelAlign', function (proceed) {
			var chart = this.chart,
				options = this.options,
				panes = chart._labelPanes = chart._labelPanes || {},
				key,
				labelOptions = this.options.labels;
			if (this.chart.options._stock && this.coll === 'yAxis') {
				key = options.top + ',' + options.height;
				if (!panes[key] && labelOptions.enabled) { // do it only for the first Y axis of each pane
					if (labelOptions.x === 15) { // default
						labelOptions.x = 0;
					}
					if (labelOptions.align === undefined) {
						labelOptions.align = 'right';
					}
					panes[key] = 1;
					return 'right';
				}
			}
			return proceed.call(this, [].slice.call(arguments, 1));
		});

		// Override getPlotLinePath to allow for multipane charts
		wrap(Axis.prototype, 'getPlotLinePath', function (proceed, value, lineWidth, old, force, translatedValue) {
			var axis = this,
				series = (this.isLinked && !this.series ? this.linkedParent.series : this.series),
				chart = axis.chart,
				renderer = chart.renderer,
				axisLeft = axis.left,
				axisTop = axis.top,
				x1,
				y1,
				x2,
				y2,
				result = [],
				axes = [], //#3416 need a default array
				axes2,
				uniqueAxes;

			// Ignore in case of color Axis. #3360, #3524
			if (axis.coll === 'colorAxis') {
				return proceed.apply(this, [].slice.call(arguments, 1));
			}

			// Get the related axes based on series
			axes = (axis.isXAxis ? 
				(defined(axis.options.yAxis) ?
					[chart.yAxis[axis.options.yAxis]] : 
					map(series, function (S) { return S.yAxis; })
				) :
				(defined(axis.options.xAxis) ?
					[chart.xAxis[axis.options.xAxis]] : 
					map(series, function (S) { return S.xAxis; })
				)
			);

			// Get the related axes based options.*Axis setting #2810
			axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);
			each(axes2, function (A) {
				if (defined(A.options.id) ? A.options.id.indexOf('navigator') === -1 : true) {
					var a = (A.isXAxis ? 'yAxis' : 'xAxis'),
						rax = (defined(A.options[a]) ? chart[a][A.options[a]] : chart[a][0]);	

					if (axis === rax) {
						axes.push(A);
					}
				}
			});


			// Remove duplicates in the axes array. If there are no axes in the axes array,
			// we are adding an axis without data, so we need to populate this with grid
			// lines (#2796).
			uniqueAxes = axes.length ? [] : [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; //#3742
			each(axes, function (axis2) {
				if (inArray(axis2, uniqueAxes) === -1) {
					uniqueAxes.push(axis2);
				}
			});
			
			translatedValue = pick(translatedValue, axis.translate(value, null, null, old));
			
			if (!isNaN(translatedValue)) {
				if (axis.horiz) {
					each(uniqueAxes, function (axis2) {
						var skip;

						y1 = axis2.pos;
						y2 = y1 + axis2.len;
						x1 = x2 = mathRound(translatedValue + axis.transB);

						if (x1 < axisLeft || x1 > axisLeft + axis.width) { // outside plot area
							if (force) {
								x1 = x2 = mathMin(mathMax(axisLeft, x1), axisLeft + axis.width);
							} else {
								skip = true;
							}
						}
						if (!skip) {
							result.push('M', x1, y1, 'L', x2, y2);
						}
					});
				} else {
					each(uniqueAxes, function (axis2) {
						var skip;

						x1 = axis2.pos;
						x2 = x1 + axis2.len;
						y1 = y2 = mathRound(axisTop + axis.height - translatedValue);

						if (y1 < axisTop || y1 > axisTop + axis.height) { // outside plot area
							if (force) {
								y1 = y2 = mathMin(mathMax(axisTop, y1), axis.top + axis.height);
							} else {
								skip = true;
							}
						}
						if (!skip) {
							result.push('M', x1, y1, 'L', x2, y2);
						}
					});
				}
			}
			if (result.length > 0) {
				return renderer.crispPolyLine(result, lineWidth || 1); 
			} else {
				return null; //#3557 getPlotLinePath in regular Highcharts also returns null
			}
		});

		// Override getPlotBandPath to allow for multipane charts
		Axis.prototype.getPlotBandPath = function (from, to) {		
			var toPath = this.getPlotLinePath(to, null, null, true),
				path = this.getPlotLinePath(from, null, null, true),
				result = [],
				i;

			if (path && toPath && path.toString() !== toPath.toString()) {
				// Go over each subpath
				for (i = 0; i < path.length; i += 6) {
					result.push('M', path[i + 1], path[i + 2], 'L', path[i + 4], path[i + 5], toPath[i + 4], toPath[i + 5], toPath[i + 1], toPath[i + 2]);
				}
			} else { // outside the axis area
				result = null;
			}

			return result;
		};

		// Function to crisp a line with multiple segments
		SVGRenderer.prototype.crispPolyLine = function (points, width) {
			// points format: [M, 0, 0, L, 100, 0]		
			// normalize to a crisp line
			var i;
			for (i = 0; i < points.length; i = i + 6) {
				if (points[i + 1] === points[i + 4]) {
					// Substract due to #1129. Now bottom and left axis gridlines behave the same.
					points[i + 1] = points[i + 4] = mathRound(points[i + 1]) - (width % 2 / 2);
				}
				if (points[i + 2] === points[i + 5]) {
					points[i + 2] = points[i + 5] = mathRound(points[i + 2]) + (width % 2 / 2);
				}
			}
			return points;
		};
		if (Renderer === Highcharts.VMLRenderer) {
			VMLRenderer.prototype.crispPolyLine = SVGRenderer.prototype.crispPolyLine;
		}


		// Wrapper to hide the label
		wrap(Axis.prototype, 'hideCrosshair', function (proceed, i) {
			proceed.call(this, i);

			if (!defined(this.crossLabelArray)) { return; }

			if (defined(i)) {
				if (this.crossLabelArray[i]) { this.crossLabelArray[i].hide(); }
			} else {
				each(this.crossLabelArray, function (crosslabel) {
					crosslabel.hide();
				});
			}
		});

		// Wrapper to draw the label
		wrap(Axis.prototype, 'drawCrosshair', function (proceed, e, point) {
			// Draw the crosshair
			proceed.call(this, e, point);

			// Check if the label has to be drawn
			if (!defined(this.crosshair.label) || !this.crosshair.label.enabled || !defined(point)) { 
				return; 
			}

			var chart = this.chart,
				options = this.options.crosshair.label,		// the label's options
				axis = this.isXAxis ? 'x' : 'y',			// axis name
				horiz = this.horiz,							// axis orientation
				opposite = this.opposite,					// axis position
				left = this.left,							// left position
				top = this.top,								// top position
				crossLabel = this.crossLabel,				// reference to the svgElement
				posx,
				posy,
				crossBox,
				formatOption = options.format,
				formatFormat = '',
				limit;

			// If the label does not exist yet, create it.
			if (!crossLabel) {
				crossLabel = this.crossLabel = chart.renderer.label()			
				.attr({
					align: options.align || (horiz ? 'center' : opposite ? (this.labelAlign === 'right' ? 'right' : 'left') : (this.labelAlign === 'left' ? 'left' : 'center')),
					zIndex: 12,
					height: horiz ? 16 : UNDEFINED,
					fill: options.backgroundColor || (this.series[0] && this.series[0].color) || 'gray',
					padding: pick(options.padding, 2),
					stroke: options.borderColor || null,
					'stroke-width': options.borderWidth || 0
				})
				.css(extend({				
					color: 'white',
					fontWeight: 'normal',
					fontSize: '11px',
					textAlign: 'center'
				}, options.style))
				.add();
			}

			if (horiz) {
				posx = point.plotX + left;
				posy = top + (opposite ? 0 : this.height);
			} else {
				posx = opposite ? this.width + left : 0;
				posy = point.plotY + top;
			}

			// if the crosshair goes out of view (too high or too low, hide it and hide the label)
			if (posy < top || posy > top + this.height) {
				this.hideCrosshair();
				return;
			}

			// TODO: Dynamic date formats like in Series.tooltipHeaderFormat. 
			if (!formatOption && !options.formatter) {
				if (this.isDatetimeAxis) {
					formatFormat = '%b %d, %Y';
				}
				formatOption = '{value' + (formatFormat ? ':' + formatFormat : '') + '}';
			}

			// show the label
			crossLabel.attr({
				text: formatOption ? format(formatOption, {value: point[axis]}) : options.formatter.call(this, point[axis]), 
				x: posx, 
				y: posy, 
				visibility: VISIBLE
			});
			crossBox = crossLabel.getBBox();

			// now it is placed we can correct its position
			if (horiz) {
				if (((this.options.tickPosition === 'inside') && !opposite) ||
					((this.options.tickPosition !== 'inside') && opposite)) {
					posy = crossLabel.y - crossBox.height;
				}	
			} else {
				posy = crossLabel.y - (crossBox.height / 2);
			}

			// check the edges
			if (horiz) {
				limit = {
					left: left - crossBox.x,
					right: left + this.width - crossBox.x
				};
			} else {
				limit = {
					left: this.labelAlign === 'left' ? left : 0,
					right: this.labelAlign === 'right' ? left + this.width : chart.chartWidth
				};
			}

			// left edge
			if (crossLabel.translateX < limit.left) {
				posx += limit.left - crossLabel.translateX;
			}
			// right edge
			if (crossLabel.translateX + crossBox.width >= limit.right) {
				posx -= crossLabel.translateX + crossBox.width - limit.right;
			}

			// show the crosslabel
			crossLabel.attr({x: posx, y: posy, visibility: VISIBLE});
		});

		/* ****************************************************************************
		 * Start value compare logic                                                  *
		 *****************************************************************************/
		 
		var seriesInit = seriesProto.init, 
			seriesProcessData = seriesProto.processData,
			pointTooltipFormatter = Point.prototype.tooltipFormatter;
			
		/**
		 * Extend series.init by adding a method to modify the y value used for plotting
		 * on the y axis. This method is called both from the axis when finding dataMin
		 * and dataMax, and from the series.translate method.
		 */
		seriesProto.init = function () {
			
			// Call base method
			seriesInit.apply(this, arguments);
			
			// Set comparison mode
			this.setCompare(this.options.compare);
		};

		/**
		 * The setCompare method can be called also from the outside after render time
		 */
		seriesProto.setCompare = function (compare) {

			// Set or unset the modifyValue method
			this.modifyValue = (compare === 'value' || compare === 'percent') ? function (value, point) {
				var compareValue = this.compareValue;
				
				if (value !== UNDEFINED) { // #2601

					// get the modified value
					value = compare === 'value' ? 
						value - compareValue : // compare value
						value = 100 * (value / compareValue) - 100; // compare percent
						
					// record for tooltip etc.
					if (point) {
						point.change = value;
					}
					
				}
				
				return value;
			} : null;

			// Mark dirty
			if (this.chart.hasRendered) {
				this.isDirty = true;
			}

		};

		/**
		 * Extend series.processData by finding the first y value in the plot area,
		 * used for comparing the following values 
		 */
		seriesProto.processData = function () {
			var series = this,
				i = 0,
				processedXData,
				processedYData,
				length;
			
			// call base method
			seriesProcessData.apply(this, arguments);

			if (series.xAxis && series.processedYData) { // not pies
				
				// local variables
				processedXData = series.processedXData;
				processedYData = series.processedYData;
				length = processedYData.length;
				
				// find the first value for comparison
				for (; i < length; i++) {
					if (typeof processedYData[i] === NUMBER && processedXData[i] >= series.xAxis.min) {
						series.compareValue = processedYData[i];
						break;
					}
				}
			}
		};

		/**
		 * Modify series extremes
		 */
		wrap(seriesProto, 'getExtremes', function (proceed) {
			proceed.apply(this, [].slice.call(arguments, 1));

			if (this.modifyValue) {
				this.dataMax = this.modifyValue(this.dataMax);
				this.dataMin = this.modifyValue(this.dataMin);
			}		
		});

		/**
		 * Add a utility method, setCompare, to the Y axis
		 */
		Axis.prototype.setCompare = function (compare, redraw) {
			if (!this.isXAxis) {
				each(this.series, function (series) {
					series.setCompare(compare);
				});
				if (pick(redraw, true)) {
					this.chart.redraw();
				}
			}
		};

		/**
		 * Extend the tooltip formatter by adding support for the point.change variable
		 * as well as the changeDecimals option
		 */
		Point.prototype.tooltipFormatter = function (pointFormat) {
			var point = this;
			
			pointFormat = pointFormat.replace(
				'{point.change}',
				(point.change > 0 ? '+' : '') + Highcharts.numberFormat(point.change, pick(point.series.tooltipOptions.changeDecimals, 2))
			); 
			
			return pointTooltipFormatter.apply(this, [pointFormat]);
		};

		/* ****************************************************************************
		 * End value compare logic                                                    *
		 *****************************************************************************/


		/**
		 * Extend the Series prototype to create a separate series clip box. This is related
		 * to using multiple panes, and a future pane logic should incorporate this feature (#2754).
		 */
		wrap(Series.prototype, 'render', function (proceed) {
			// Only do this on stock charts (#2939), and only if the series type handles clipping
			// in the animate method (#2975).
			if (this.chart.options._stock && this.xAxis) {

				// First render, initial clip box
				if (!this.clipBox && this.animate) {
					this.clipBox = merge(this.chart.clipBox);
					this.clipBox.width = this.xAxis.len;
					this.clipBox.height = this.yAxis.len;

				// On redrawing, resizing etc, update the clip rectangle
				} else if (this.chart[this.sharedClipKey]) {
					stop(this.chart[this.sharedClipKey]); // #2998
					this.chart[this.sharedClipKey].attr({
						width: this.xAxis.len,
						height: this.yAxis.len
					});
				}
			}
			proceed.call(this);
		});

		// global variables
		extend(Highcharts, {
			
			// Constructors
			Color: Color,
			Point: Point,
			Tick: Tick,	
			Renderer: Renderer,
			SVGElement: SVGElement,
			SVGRenderer: SVGRenderer,
			
			// Various
			arrayMin: arrayMin,
			arrayMax: arrayMax,
			charts: charts,
			dateFormat: dateFormat,
			error: error,
			format: format,
			pathAnim: pathAnim,
			getOptions: getOptions,
			hasBidiBug: hasBidiBug,
			isTouchDevice: isTouchDevice,
			setOptions: setOptions,
			addEvent: addEvent,
			removeEvent: removeEvent,
			createElement: createElement,
			discardElement: discardElement,
			css: css,
			each: each,
			map: map,
			merge: merge,
			splat: splat,
			extendClass: extendClass,
			pInt: pInt,
			svg: hasSVG,
			canvas: useCanVG,
			vml: !hasSVG && !useCanVG,
			product: PRODUCT,
			version: VERSION
		});

		}());


		/*** EXPORTS FROM exports-loader ***/
		module.exports = Highcharts

	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(159);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(160);
	var React = __webpack_require__(2);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(163);
	var ReactCSSTransitionGroup = __webpack_require__(164);
	var ReactFragment = __webpack_require__(10);
	var ReactTransitionGroup = __webpack_require__(165);
	var ReactUpdates = __webpack_require__(26);

	var cx = __webpack_require__(173);
	var cloneWithProps = __webpack_require__(167);
	var update = __webpack_require__(174);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(150);
	  React.addons.TestUtils = __webpack_require__(175);
	}

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(161);
	var ReactStateSetters = __webpack_require__(162);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(2);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 162 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	'use strict';

	var shallowEqual = __webpack_require__(137);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(2);

	var assign = __webpack_require__(13);

	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(165)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(170)
	);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        appear: this.props.transitionAppear,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(2);
	var ReactTransitionChildMapping = __webpack_require__(166);

	var assign = __webpack_require__(13);
	var cloneWithProps = __webpack_require__(167);
	var emptyFunction = __webpack_require__(16);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(
	        this._handleDoneAppearing.bind(this, key)
	      );
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key, key: key}
	        ));
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var ReactChildren = __webpack_require__(8);
	var ReactFragment = __webpack_require__(10);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    if (!children) {
	      return children;
	    }
	    return ReactFragment.extract(ReactChildren.map(children, function(child) {
	      return child;
	    }));
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(11);
	var ReactPropTransferer = __webpack_require__(168);

	var keyOf = __webpack_require__(39);
	var warning = __webpack_require__(15);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(13);
	var emptyFunction = __webpack_require__(16);
	var joinClasses = __webpack_require__(169);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;


/***/ },
/* 169 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(2);

	var CSSCore = __webpack_require__(171);
	var ReactTransitionEvents = __webpack_require__(172);

	var onlyChild = __webpack_require__(156);
	var warning = __webpack_require__(15);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      '%sms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.',
	      NO_EVENT_TIMEOUT
	    ) : null);
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function(done) {
	    if (this.props.appear) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(51);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */

	'use strict';
	var warning = __webpack_require__(15);

	var warned = false;

	function cx(classNames) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      warned,
	      'React.addons.classSet will be deprecated in a future version. See ' +
	      'http://fb.me/react-addons-classset'
	    ) : null);
	    warned = true;
	  }

	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	 /* global hasOwnProperty:true */

	'use strict';

	var assign = __webpack_require__(13);
	var keyOf = __webpack_require__(39);
	var invariant = __webpack_require__(7);
	var hasOwnProperty = {}.hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(5);
	var EventPluginHub = __webpack_require__(69);
	var EventPropagators = __webpack_require__(93);
	var React = __webpack_require__(2);
	var ReactElement = __webpack_require__(11);
	var ReactEmptyComponent = __webpack_require__(76);
	var ReactBrowserEventEmitter = __webpack_require__(68);
	var ReactCompositeComponent = __webpack_require__(84);
	var ReactInstanceHandles = __webpack_require__(19);
	var ReactInstanceMap = __webpack_require__(25);
	var ReactMount = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(26);
	var SyntheticEvent = __webpack_require__(97);

	var assign = __webpack_require__(13);
	var emptyObject = __webpack_require__(14);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },

	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor
	    );
	  },

	  isDOMComponent: function(inst) {
	    // TODO: Fix this heuristic. It's just here because composites can currently
	    // pretend to be DOM components.
	    return !!(inst && inst.tagName && inst.getDOMNode);
	  },

	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type));
	  },

	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },

	  getRenderedChildOfCompositeComponent: function(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var internalInstance = ReactInstanceMap.get(inst);
	      var renderedChildren = internalInstance
	        ._renderedComponent
	        ._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        if (!renderedChildren[key].getPublicInstance) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(
	            renderedChildren[key].getPublicInstance(),
	            test
	          )
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(
	          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
	          test
	        )
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' +
	        '(found: ' + all.length + ') for class:' + className
	      );
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";

	    module.prototype.render.mockImplementation(function() {
	      return React.createElement(
	        mockTagName,
	        null,
	        this.props.children
	      );
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  createRenderer: function() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function() {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function() {
	  return (
	    (this._instance && this._instance._renderedComponent &&
	     this._instance._renderedComponent._renderedOutput)
	    || null
	  );
	};

	var NoopInternalComponent = function(element) {
	  this._renderedOutput = element;
	  this._currentElement = element === null || element === false ?
	    ReactEmptyComponent.emptyElement :
	    element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function() {
	  },

	  receiveComponent: function(element) {
	    this._renderedOutput = element;
	    this._currentElement = element === null || element === false ?
	      ReactEmptyComponent.emptyElement :
	      element;
	  },

	  unmountComponent: function() {
	  }

	};

	var ShallowComponentWrapper = function() { };
	assign(
	  ShallowComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin, {
	    _instantiateReactComponent: function(element) {
	      return new NoopInternalComponent(element);
	    },
	    _replaceNodeWithMarkupByID: function() {},
	    _renderValidatedComponent:
	      ReactCompositeComponent.Mixin.
	        _renderValidatedComponentWithoutOwnerOrContext
	  }
	);

	ReactShallowRenderer.prototype.render = function(element, context) {
	  if (!context) {
	    context = emptyObject;
	  }
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function() {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function(element, transaction, context) {
	  if (!this._instance) {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  } else {
	    this._instance.receiveComponent(element, transaction, context);
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ }
/******/ ]);